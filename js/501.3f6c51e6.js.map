{"version":3,"file":"js/501.3f6c51e6.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAA2CA,EAAMC,GAE/CC,EAAOC,QAAUF,GAOlB,CATD,CASGG,GAAM,WACT,OAAiB,SAASC,GAEhB,IAAIC,EAAmB,CAAC,EAGxB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUL,QAGnC,IAAID,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHP,QAAS,CAAC,GAUX,OANAE,EAAQG,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOC,OACf,CAyDA,OArDAI,EAAoBK,EAAIP,EAGxBE,EAAoBM,EAAIP,EAGxBC,EAAoBO,EAAI,SAASX,EAASY,EAAMC,GAC3CT,EAAoBU,EAAEd,EAASY,IAClCG,OAAOC,eAAehB,EAASY,EAAM,CAAEK,YAAY,EAAMC,IAAKL,GAEhE,EAGAT,EAAoBe,EAAI,SAASnB,GACX,qBAAXoB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAehB,EAASoB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAehB,EAAS,aAAc,CAAEsB,OAAO,GACvD,EAOAlB,EAAoBmB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQlB,EAAoBkB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,kBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAvB,EAAoBe,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOlB,EAAoBO,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,EAAM,EAAEC,KAAK,KAAMD,IAC9I,OAAOF,CACR,EAGAtB,EAAoB0B,EAAI,SAAS/B,GAChC,IAAIc,EAASd,GAAUA,EAAO0B,WAC7B,WAAwB,OAAO1B,EAAO,UAAY,EAClD,WAA8B,OAAOA,CAAQ,EAE9C,OADAK,EAAoBO,EAAEE,EAAQ,IAAKA,GAC5BA,CACR,EAGAT,EAAoBU,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,EAAW,EAGpH5B,EAAoB+B,EAAI,GAIjB/B,EAAoBA,EAAoBgC,EAAI,GACpD,CApFQ,CAsFP,CAAC,SAEKrC,EAAQC,GAQxB,IAAIqC,EAAS,CAAC,EAEdtC,EAAOC,QAAUqC,EAEjB,WAEIA,EAAOC,WAAa,IAAO,GAC3BD,EAAOE,QAAU,EACjBF,EAAOG,MAAQ,EACfH,EAAOI,eAAkB,IAAIC,KAC7BL,EAAOM,YAAc,CAAC,EACtBN,EAAOO,QAAU,KASjBP,EAAOQ,OAAS,SAASC,EAAKC,GAC1B,IAAIC,EAEAC,EAEgB,mBAATF,GACPC,EAAY,EACZC,EAAYF,IAEZC,EAAY,EACZC,GAAY,GAGhB,IAAK,IAAI3C,EAAI0C,EAAW1C,EAAI4C,UAAUC,OAAQ7C,IAAK,CAC/C,IAAI8C,EAASF,UAAU5C,GAEvB,GAAI8C,EACA,IAAK,IAAIC,KAAQD,EACTH,GAAaG,EAAOC,IAASD,EAAOC,GAAMC,cAAgBvC,OACrD+B,EAAIO,IAASP,EAAIO,GAAMC,cAAgBvC,OAIxC+B,EAAIO,GAAQD,EAAOC,IAHnBP,EAAIO,GAAQP,EAAIO,IAAS,CAAC,EAC1BhB,EAAOQ,OAAOC,EAAIO,GAAOJ,EAAWG,EAAOC,KAK/CP,EAAIO,GAAQD,EAAOC,EAInC,CAEA,OAAOP,CACX,EASAT,EAAOkB,MAAQ,SAAST,EAAKC,GACzB,OAAOV,EAAOQ,OAAO,CAAC,EAAGE,EAAMD,EACnC,EAQAT,EAAOmB,KAAO,SAASV,GACnB,GAAI/B,OAAOyC,KACP,OAAOzC,OAAOyC,KAAKV,GAGvB,IAAIU,EAAO,GACX,IAAK,IAAI5B,KAAOkB,EACZU,EAAKC,KAAK7B,GACd,OAAO4B,CACX,EAQAnB,EAAOqB,OAAS,SAASZ,GACrB,IAAIY,EAAS,GAEb,GAAI3C,OAAOyC,KAAM,CAEb,IADA,IAAIA,EAAOzC,OAAOyC,KAAKV,GACdxC,EAAI,EAAGA,EAAIkD,EAAKL,OAAQ7C,IAC7BoD,EAAOD,KAAKX,EAAIU,EAAKlD,KAEzB,OAAOoD,CACX,CAGA,IAAK,IAAI9B,KAAOkB,EACZY,EAAOD,KAAKX,EAAIlB,IACpB,OAAO8B,CACX,EAWArB,EAAOnB,IAAM,SAAS4B,EAAKa,EAAMC,EAAOC,GACpCF,EAAOA,EAAKG,MAAM,KAAKC,MAAMH,EAAOC,GAEpC,IAAK,IAAIvD,EAAI,EAAGA,EAAIqD,EAAKR,OAAQ7C,GAAK,EAClCwC,EAAMA,EAAIa,EAAKrD,IAGnB,OAAOwC,CACX,EAYAT,EAAO2B,IAAM,SAASlB,EAAKa,EAAMM,EAAKL,EAAOC,GACzC,IAAIK,EAAQP,EAAKG,MAAM,KAAKC,MAAMH,EAAOC,GAEzC,OADAxB,EAAOnB,IAAI4B,EAAKa,EAAM,GAAI,GAAGO,EAAMA,EAAMf,OAAS,IAAMc,EACjDA,CACX,EASA5B,EAAO8B,QAAU,SAASC,GACtB,IAAK,IAAI9D,EAAI8D,EAAMjB,OAAS,EAAG7C,EAAI,EAAGA,IAAK,CACvC,IAAI+D,EAAIC,KAAKC,MAAMlC,EAAOmC,UAAYlE,EAAI,IACtCmE,EAAOL,EAAM9D,GACjB8D,EAAM9D,GAAK8D,EAAMC,GACjBD,EAAMC,GAAKI,CACf,CACA,OAAOL,CACX,EASA/B,EAAOqC,OAAS,SAASC,GACrB,OAAOA,EAAQL,KAAKC,MAAMlC,EAAOmC,SAAWG,EAAQxB,QACxD,EAQAd,EAAOuC,UAAY,SAAS9B,GACxB,MAA2B,qBAAhB+B,YACA/B,aAAe+B,eAGhB/B,GAAOA,EAAIgC,UAAYhC,EAAIiC,SACzC,EAQA1C,EAAO2C,QAAU,SAASlC,GACtB,MAA+C,mBAAxC/B,OAAOkB,UAAUgD,SAASzE,KAAKsC,EAC1C,EAQAT,EAAO6C,WAAa,SAASpC,GACzB,MAAsB,oBAARA,CAClB,EAQAT,EAAO8C,cAAgB,SAASrC,GAC5B,MAAsB,kBAARA,GAAoBA,EAAIQ,cAAgBvC,MAC1D,EAQAsB,EAAO+C,SAAW,SAAStC,GACvB,MAA8B,oBAAvBmC,SAASzE,KAAKsC,EACzB,EAUAT,EAAOgD,MAAQ,SAAS/D,EAAOgE,EAAKC,GAChC,OAAIjE,EAAQgE,EACDA,EACPhE,EAAQiE,EACDA,EACJjE,CACX,EAQAe,EAAOmD,KAAO,SAASlE,GACnB,OAAOA,EAAQ,GAAK,EAAI,CAC5B,EAQAe,EAAOoD,IAAM,WACT,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAa,CACrD,GAAID,OAAOC,YAAYF,IACnB,OAAOC,OAAOC,YAAYF,MACvB,GAAIC,OAAOC,YAAYC,UAC1B,OAAOF,OAAOC,YAAYC,WAElC,CAEA,OAAIlD,KAAK+C,IACE/C,KAAK+C,MAGR,IAAI/C,KAAUL,EAAOI,aACjC,EAUAJ,EAAOmC,OAAS,SAASc,EAAKC,GAG1B,OAFAD,EAAsB,qBAARA,EAAuBA,EAAM,EAC3CC,EAAsB,qBAARA,EAAuBA,EAAM,EACpCD,EAAMO,KAAmBN,EAAMD,EAC1C,EAEA,IAAIO,EAAgB,WAGhB,OADAxD,EAAOG,OAAwB,KAAfH,EAAOG,MAAe,OAAS,OACxCH,EAAOG,MAAQ,MAC1B,EAQAH,EAAOyD,cAAgB,SAASC,GAS5B,OARAA,EAAcA,EAAYC,QAAQ,IAAI,IAEZ,GAAtBD,EAAY5C,SACZ4C,EAAcA,EAAYE,OAAO,GAAKF,EAAYE,OAAO,GAC3CF,EAAYE,OAAO,GAAKF,EAAYE,OAAO,GAC3CF,EAAYE,OAAO,GAAKF,EAAYE,OAAO,IAGtDC,SAASH,EAAa,GACjC,EAiBA1D,EAAO8D,SAAW,EAQlB9D,EAAO+D,IAAM,WACLC,SAAWhE,EAAO8D,SAAW,GAAK9D,EAAO8D,UAAY,GACrDE,QAAQD,IAAIE,MAAMD,QAAS,CAAC,cAAcE,OAAOC,MAAMvE,UAAU8B,MAAMvD,KAAK0C,YAEpF,EAQAb,EAAOoE,KAAO,WACNJ,SAAWhE,EAAO8D,SAAW,GAAK9D,EAAO8D,UAAY,GACrDE,QAAQI,KAAKH,MAAMD,QAAS,CAAC,cAAcE,OAAOC,MAAMvE,UAAU8B,MAAMvD,KAAK0C,YAErF,EAQAb,EAAOqE,KAAO,WACNL,SAAWhE,EAAO8D,SAAW,GAAK9D,EAAO8D,UAAY,GACrDE,QAAQK,KAAKJ,MAAMD,QAAS,CAAC,cAAcE,OAAOC,MAAMvE,UAAU8B,MAAMvD,KAAK0C,YAErF,EAOAb,EAAOsE,SAAW,WACd,IAAIC,EAAUJ,MAAMvE,UAAU8B,MAAMvD,KAAK0C,WAAW2D,KAAK,KAEpDxE,EAAOM,YAAYiE,KACpBvE,EAAOqE,KAAKE,GACZvE,EAAOM,YAAYiE,IAAW,EAEtC,EAWAvE,EAAOyE,WAAa,SAAShE,EAAKO,EAAM0D,GACpCjE,EAAIO,GAAQhB,EAAO2E,OAAM,WACrB3E,EAAOsE,SAAS,mBAAoBI,EACxC,GAAGjE,EAAIO,GACX,EAOAhB,EAAO4E,OAAS,WACZ,OAAO5E,EAAOE,SAClB,EASAF,EAAO6E,QAAU,SAASC,EAAUC,GAChC,GAAID,EAASD,QACT,OAAOC,EAASD,QAAQE,GAE5B,IAAK,IAAI9G,EAAI,EAAGA,EAAI6G,EAAShE,OAAQ7C,IACjC,GAAI6G,EAAS7G,KAAO8G,EAChB,OAAO9G,EAGf,OAAQ,CACZ,EASA+B,EAAOgF,IAAM,SAASC,EAAMC,GACxB,GAAID,EAAKD,IACL,OAAOC,EAAKD,IAAIE,GAKpB,IAFA,IAAIC,EAAS,GAEJlH,EAAI,EAAGA,EAAIgH,EAAKnE,OAAQ7C,GAAK,EAClCkH,EAAO/D,KAAK8D,EAAKD,EAAKhH,KAG1B,OAAOkH,CACX,EASAnF,EAAOoF,gBAAkB,SAASC,GAI9B,IAAIC,EAAS,GACTC,EAAU,GACVnD,EAAO,GAEX,IAAK,IAAIoD,KAAQH,EACRE,EAAQC,IAAUpD,EAAKoD,IACxBxF,EAAOyF,iBAAiBD,EAAMD,EAASnD,EAAMiD,EAAOC,GAI5D,OAAOA,CACX,EAEAtF,EAAOyF,iBAAmB,SAASD,EAAMD,EAASnD,EAAMiD,EAAOC,GAC3D,IAAII,EAAYL,EAAMG,IAAS,GAC/BpD,EAAKoD,IAAQ,EAEb,IAAK,IAAIvH,EAAI,EAAGA,EAAIyH,EAAU5E,OAAQ7C,GAAK,EAAG,CAC1C,IAAI0H,EAAWD,EAAUzH,GAErBmE,EAAKuD,KAKJJ,EAAQI,IACT3F,EAAOyF,iBAAiBE,EAAUJ,EAASnD,EAAMiD,EAAOC,GAEhE,CAEAlD,EAAKoD,IAAQ,EACbD,EAAQC,IAAQ,EAEhBF,EAAOlE,KAAKoE,EAChB,EAaAxF,EAAO2E,MAAQ,WAGX,IAFA,IAAIiB,EAAQ,GAEH3H,EAAI,EAAGA,EAAI4C,UAAUC,OAAQ7C,GAAK,EAAG,CAC1C,IAAIiH,EAAOrE,UAAU5C,GAEjBiH,EAAKW,SAELD,EAAMxE,KAAK6C,MAAM2B,EAAOV,EAAKW,UAE7BD,EAAMxE,KAAK8D,EAEnB,CAEA,IAAIP,EAAQ,WAKR,IAHA,IAAImB,EACAC,EAAO,IAAI5B,MAAMtD,UAAUC,QAEtB7C,EAAI,EAAGC,EAAI2C,UAAUC,OAAQ7C,EAAIC,EAAGD,IACzC8H,EAAK9H,GAAK4C,UAAU5C,GAGxB,IAAKA,EAAI,EAAGA,EAAI2H,EAAM9E,OAAQ7C,GAAK,EAAG,CAClC,IAAIqH,EAASM,EAAM3H,GAAGgG,MAAM6B,EAAYC,GAElB,qBAAXT,IACPQ,EAAaR,EAErB,CAEA,OAAOQ,CACX,EAIA,OAFAnB,EAAMkB,SAAWD,EAEVjB,CACX,EAWA3E,EAAOgG,gBAAkB,SAASC,EAAM3E,EAAM4D,GAC1C,OAAOlF,EAAO2B,IAAIsE,EAAM3E,EAAMtB,EAAO2E,MACjCO,EACAlF,EAAOnB,IAAIoH,EAAM3E,IAEzB,EAWAtB,EAAOkG,eAAiB,SAASD,EAAM3E,EAAM4D,GACzC,OAAOlF,EAAO2B,IAAIsE,EAAM3E,EAAMtB,EAAO2E,MACjC3E,EAAOnB,IAAIoH,EAAM3E,GACjB4D,GAER,EAQAlF,EAAOmG,UAAY,SAASC,GACxBpG,EAAOO,QAAU6F,CACrB,EAQApG,EAAOqG,UAAY,WAEf,IAAID,EAASpG,EAAOO,QAEpB,IAES6F,GAA4B,qBAAX/C,SAClB+C,EAAS/C,OAAO+C,QAIfA,GAA4B,qBAAXE,EAAAA,IAClBF,EAASE,EAAAA,EAAOF,OAExB,CAAE,MAAOG,GAELH,EAAS,IACb,CAEA,OAAOA,CACX,CACH,CA1lBD,EA6lBO,WAES1I,EAAQC,GAQxB,IAAI6I,EAAS,CAAC,EAEd9I,EAAOC,QAAU6I,EAEjB,WAQIA,EAAOlH,OAAS,SAASmH,GACrB,IAAIC,EAAS,CACTzD,IAAK,CAAE0D,EAAG,EAAGC,EAAG,GAChB1D,IAAK,CAAEyD,EAAG,EAAGC,EAAG,IAMpB,OAHIH,GACAD,EAAOK,OAAOH,EAAQD,GAEnBC,CACX,EASAF,EAAOK,OAAS,SAASH,EAAQD,EAAUK,GACvCJ,EAAOzD,IAAI0D,EAAII,IACfL,EAAOxD,IAAIyD,GAAKI,IAChBL,EAAOzD,IAAI2D,EAAIG,IACfL,EAAOxD,IAAI0D,GAAKG,IAEhB,IAAK,IAAI9I,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IAAK,CACtC,IAAI+I,EAASP,EAASxI,GAClB+I,EAAOL,EAAID,EAAOxD,IAAIyD,IAAGD,EAAOxD,IAAIyD,EAAIK,EAAOL,GAC/CK,EAAOL,EAAID,EAAOzD,IAAI0D,IAAGD,EAAOzD,IAAI0D,EAAIK,EAAOL,GAC/CK,EAAOJ,EAAIF,EAAOxD,IAAI0D,IAAGF,EAAOxD,IAAI0D,EAAII,EAAOJ,GAC/CI,EAAOJ,EAAIF,EAAOzD,IAAI2D,IAAGF,EAAOzD,IAAI2D,EAAII,EAAOJ,EACvD,CAEIE,IACIA,EAASH,EAAI,EACbD,EAAOxD,IAAIyD,GAAKG,EAASH,EAEzBD,EAAOzD,IAAI0D,GAAKG,EAASH,EAGzBG,EAASF,EAAI,EACbF,EAAOxD,IAAI0D,GAAKE,EAASF,EAEzBF,EAAOzD,IAAI2D,GAAKE,EAASF,EAGrC,EASAJ,EAAOS,SAAW,SAASP,EAAQQ,GAC/B,OAAOA,EAAMP,GAAKD,EAAOzD,IAAI0D,GAAKO,EAAMP,GAAKD,EAAOxD,IAAIyD,GAC9CO,EAAMN,GAAKF,EAAOzD,IAAI2D,GAAKM,EAAMN,GAAKF,EAAOxD,IAAI0D,CAC/D,EASAJ,EAAOW,SAAW,SAASC,EAASC,GAChC,OAAQD,EAAQnE,IAAI0D,GAAKU,EAAQnE,IAAIyD,GAAKS,EAAQlE,IAAIyD,GAAKU,EAAQpE,IAAI0D,GAC5DS,EAAQlE,IAAI0D,GAAKS,EAAQpE,IAAI2D,GAAKQ,EAAQnE,IAAI2D,GAAKS,EAAQnE,IAAI0D,CAC9E,EAQAJ,EAAOc,UAAY,SAASZ,EAAQa,GAChCb,EAAOzD,IAAI0D,GAAKY,EAAOZ,EACvBD,EAAOxD,IAAIyD,GAAKY,EAAOZ,EACvBD,EAAOzD,IAAI2D,GAAKW,EAAOX,EACvBF,EAAOxD,IAAI0D,GAAKW,EAAOX,CAC3B,EAQAJ,EAAOgB,MAAQ,SAASd,EAAQe,GAC5B,IAAIC,EAAShB,EAAOxD,IAAIyD,EAAID,EAAOzD,IAAI0D,EACnCgB,EAASjB,EAAOxD,IAAI0D,EAAIF,EAAOzD,IAAI2D,EAEvCF,EAAOzD,IAAI0D,EAAIc,EAASd,EACxBD,EAAOxD,IAAIyD,EAAIc,EAASd,EAAIe,EAC5BhB,EAAOzD,IAAI2D,EAAIa,EAASb,EACxBF,EAAOxD,IAAI0D,EAAIa,EAASb,EAAIe,CAChC,CAEH,CA7GD,EAgHO,WAESjK,EAAQC,GAcxB,IAAIiK,EAAS,CAAC,EAEdlK,EAAOC,QAAUiK,EAEjB,WASIA,EAAOtI,OAAS,SAASqH,EAAGC,GACxB,MAAO,CAAED,EAAGA,GAAK,EAAGC,EAAGA,GAAK,EAChC,EAQAgB,EAAO1G,MAAQ,SAASqG,GACpB,MAAO,CAAEZ,EAAGY,EAAOZ,EAAGC,EAAGW,EAAOX,EACpC,EAQAgB,EAAOC,UAAY,SAASN,GACxB,OAAOtF,KAAK6F,KAAMP,EAAOZ,EAAIY,EAAOZ,EAAMY,EAAOX,EAAIW,EAAOX,EAChE,EAQAgB,EAAOG,iBAAmB,SAASR,GAC/B,OAAQA,EAAOZ,EAAIY,EAAOZ,EAAMY,EAAOX,EAAIW,EAAOX,CACtD,EAUAgB,EAAOI,OAAS,SAAST,EAAQU,EAAOC,GACpC,IAAIC,EAAMlG,KAAKkG,IAAIF,GAAQG,EAAMnG,KAAKmG,IAAIH,GACrCC,IAAQA,EAAS,CAAC,GACvB,IAAIvB,EAAIY,EAAOZ,EAAIwB,EAAMZ,EAAOX,EAAIwB,EAGpC,OAFAF,EAAOtB,EAAIW,EAAOZ,EAAIyB,EAAMb,EAAOX,EAAIuB,EACvCD,EAAOvB,EAAIA,EACJuB,CACX,EAWAN,EAAOS,YAAc,SAASd,EAAQU,EAAOf,EAAOgB,GAChD,IAAIC,EAAMlG,KAAKkG,IAAIF,GAAQG,EAAMnG,KAAKmG,IAAIH,GACrCC,IAAQA,EAAS,CAAC,GACvB,IAAIvB,EAAIO,EAAMP,IAAMY,EAAOZ,EAAIO,EAAMP,GAAKwB,GAAOZ,EAAOX,EAAIM,EAAMN,GAAKwB,GAGvE,OAFAF,EAAOtB,EAAIM,EAAMN,IAAMW,EAAOZ,EAAIO,EAAMP,GAAKyB,GAAOb,EAAOX,EAAIM,EAAMN,GAAKuB,GAC1ED,EAAOvB,EAAIA,EACJuB,CACX,EAQAN,EAAOU,UAAY,SAASf,GACxB,IAAIM,EAAYD,EAAOC,UAAUN,GACjC,OAAkB,IAAdM,EACO,CAAElB,EAAG,EAAGC,EAAG,GACf,CAAED,EAAGY,EAAOZ,EAAIkB,EAAWjB,EAAGW,EAAOX,EAAIiB,EACpD,EASAD,EAAOW,IAAM,SAASC,EAASC,GAC3B,OAAQD,EAAQ7B,EAAI8B,EAAQ9B,EAAM6B,EAAQ5B,EAAI6B,EAAQ7B,CAC1D,EASAgB,EAAOc,MAAQ,SAASF,EAASC,GAC7B,OAAQD,EAAQ7B,EAAI8B,EAAQ7B,EAAM4B,EAAQ5B,EAAI6B,EAAQ9B,CAC1D,EAUAiB,EAAOe,OAAS,SAASH,EAASC,EAASG,GACvC,OAAQH,EAAQ9B,EAAI6B,EAAQ7B,IAAMiC,EAAQhC,EAAI4B,EAAQ5B,IAAM6B,EAAQ7B,EAAI4B,EAAQ5B,IAAMgC,EAAQjC,EAAI6B,EAAQ7B,EAC9G,EAUAiB,EAAOiB,IAAM,SAASL,EAASC,EAASP,GAIpC,OAHKA,IAAQA,EAAS,CAAC,GACvBA,EAAOvB,EAAI6B,EAAQ7B,EAAI8B,EAAQ9B,EAC/BuB,EAAOtB,EAAI4B,EAAQ5B,EAAI6B,EAAQ7B,EACxBsB,CACX,EAUAN,EAAOkB,IAAM,SAASN,EAASC,EAASP,GAIpC,OAHKA,IAAQA,EAAS,CAAC,GACvBA,EAAOvB,EAAI6B,EAAQ7B,EAAI8B,EAAQ9B,EAC/BuB,EAAOtB,EAAI4B,EAAQ5B,EAAI6B,EAAQ7B,EACxBsB,CACX,EASAN,EAAOmB,KAAO,SAASxB,EAAQyB,GAC3B,MAAO,CAAErC,EAAGY,EAAOZ,EAAIqC,EAAQpC,EAAGW,EAAOX,EAAIoC,EACjD,EASApB,EAAOqB,IAAM,SAAS1B,EAAQyB,GAC1B,MAAO,CAAErC,EAAGY,EAAOZ,EAAIqC,EAAQpC,EAAGW,EAAOX,EAAIoC,EACjD,EASApB,EAAOsB,KAAO,SAAS3B,EAAQ4B,GAE3B,OADAA,GAAoB,IAAXA,GAAmB,EAAI,EACzB,CAAExC,EAAGwC,GAAU5B,EAAOX,EAAGA,EAAGuC,EAAS5B,EAAOZ,EACvD,EAQAiB,EAAOwB,IAAM,SAAS7B,GAClB,MAAO,CAAEZ,GAAIY,EAAOZ,EAAGC,GAAIW,EAAOX,EACtC,EASAgB,EAAOK,MAAQ,SAASO,EAASC,GAC7B,OAAOxG,KAAKoH,MAAMZ,EAAQ7B,EAAI4B,EAAQ5B,EAAG6B,EAAQ9B,EAAI6B,EAAQ7B,EACjE,EAQAiB,EAAO0B,MAAQ,CACX1B,EAAOtI,SAAUsI,EAAOtI,SACxBsI,EAAOtI,SAAUsI,EAAOtI,SACxBsI,EAAOtI,SAAUsI,EAAOtI,SAG/B,CA9ND,EAgOO,WAES5B,EAAQC,EAASI,GAYjC,IAAIwL,EAAW,CAAC,EAEhB7L,EAAOC,QAAU4L,EAEjB,IAAI3B,EAAS7J,EAAoB,GAC7BiC,EAASjC,EAAoB,IAEjC,WAmBIwL,EAASjK,OAAS,SAASkK,EAAQC,GAG/B,IAFA,IAAIhD,EAAW,GAENxI,EAAI,EAAGA,EAAIuL,EAAO1I,OAAQ7C,IAAK,CACpC,IAAIiJ,EAAQsC,EAAOvL,GACf+I,EAAS,CACLL,EAAGO,EAAMP,EACTC,EAAGM,EAAMN,EACT8C,MAAOzL,EACPwL,KAAMA,EACNE,YAAY,GAGpBlD,EAASrF,KAAK4F,EAClB,CAEA,OAAOP,CACX,EAWA8C,EAASK,SAAW,SAAStI,EAAMmI,GAC/B,IAAII,EAAc,qCACdL,EAAS,GAMb,OAJAlI,EAAKqC,QAAQkG,GAAa,SAASC,EAAOnD,EAAGC,GACzC4C,EAAOpI,KAAK,CAAEuF,EAAGoD,WAAWpD,GAAIC,EAAGmD,WAAWnD,IAClD,IAEO2C,EAASjK,OAAOkK,EAAQC,EACnC,EAQAF,EAASS,OAAS,SAASvD,GAOvB,IANA,IAEIiC,EACAtG,EACAJ,EAJAiI,EAAOV,EAASU,KAAKxD,GAAU,GAC/BuD,EAAS,CAAErD,EAAG,EAAGC,EAAG,GAKf3I,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IACjC+D,GAAK/D,EAAI,GAAKwI,EAAS3F,OACvB4H,EAAQd,EAAOc,MAAMjC,EAASxI,GAAIwI,EAASzE,IAC3CI,EAAOwF,EAAOmB,KAAKnB,EAAOiB,IAAIpC,EAASxI,GAAIwI,EAASzE,IAAK0G,GACzDsB,EAASpC,EAAOiB,IAAImB,EAAQ5H,GAGhC,OAAOwF,EAAOqB,IAAIe,EAAQ,EAAIC,EAClC,EAQAV,EAASW,KAAO,SAASzD,GAGrB,IAFA,IAAI0D,EAAU,CAAExD,EAAG,EAAGC,EAAG,GAEhB3I,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IACjCkM,EAAQxD,GAAKF,EAASxI,GAAG0I,EACzBwD,EAAQvD,GAAKH,EAASxI,GAAG2I,EAG7B,OAAOgB,EAAOqB,IAAIkB,EAAS1D,EAAS3F,OACxC,EASAyI,EAASU,KAAO,SAASxD,EAAU2D,GAI/B,IAHA,IAAIH,EAAO,EACPjI,EAAIyE,EAAS3F,OAAS,EAEjB7C,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IACjCgM,IAASxD,EAASzE,GAAG2E,EAAIF,EAASxI,GAAG0I,IAAMF,EAASzE,GAAG4E,EAAIH,EAASxI,GAAG2I,GACvE5E,EAAI/D,EAGR,OAAImM,EACOH,EAAO,EAEXhI,KAAKoI,IAAIJ,GAAQ,CAC5B,EASAV,EAASe,QAAU,SAAS7D,EAAU8D,GASlC,IARA,IAGI7B,EACA1G,EAJAwI,EAAY,EACZC,EAAc,EACdC,EAAIjE,EAMChH,EAAI,EAAGA,EAAIiL,EAAE5J,OAAQrB,IAC1BuC,GAAKvC,EAAI,GAAKiL,EAAE5J,OAChB4H,EAAQzG,KAAKoI,IAAIzC,EAAOc,MAAMgC,EAAE1I,GAAI0I,EAAEjL,KACtC+K,GAAa9B,GAASd,EAAOW,IAAImC,EAAE1I,GAAI0I,EAAE1I,IAAM4F,EAAOW,IAAImC,EAAE1I,GAAI0I,EAAEjL,IAAMmI,EAAOW,IAAImC,EAAEjL,GAAIiL,EAAEjL,KAC3FgL,GAAe/B,EAGnB,OAAQ6B,EAAO,GAAMC,EAAYC,EACrC,EASAlB,EAASjC,UAAY,SAASb,EAAUc,EAAQyB,GAC5CA,EAA2B,qBAAXA,EAAyBA,EAAS,EAElD,IAGI/K,EAHA0M,EAAiBlE,EAAS3F,OAC1B8J,EAAarD,EAAOZ,EAAIqC,EACxB6B,EAAatD,EAAOX,EAAIoC,EAG5B,IAAK/K,EAAI,EAAGA,EAAI0M,EAAgB1M,IAC5BwI,EAASxI,GAAG0I,GAAKiE,EACjBnE,EAASxI,GAAG2I,GAAKiE,EAGrB,OAAOpE,CACX,EASA8C,EAASvB,OAAS,SAASvB,EAAUwB,EAAOf,GACxC,GAAc,IAAVe,EAAJ,CAGA,IAKIjB,EACA8D,EACAC,EACA9M,EARAkK,EAAMlG,KAAKkG,IAAIF,GACfG,EAAMnG,KAAKmG,IAAIH,GACf+C,EAAS9D,EAAMP,EACfsE,EAAS/D,EAAMN,EACf+D,EAAiBlE,EAAS3F,OAM9B,IAAK7C,EAAI,EAAGA,EAAI0M,EAAgB1M,IAC5B+I,EAASP,EAASxI,GAClB6M,EAAK9D,EAAOL,EAAIqE,EAChBD,EAAK/D,EAAOJ,EAAIqE,EAChBjE,EAAOL,EAAIqE,GAAUF,EAAK3C,EAAM4C,EAAK3C,GACrCpB,EAAOJ,EAAIqE,GAAUH,EAAK1C,EAAM2C,EAAK5C,GAGzC,OAAO1B,CApBG,CAqBd,EASA8C,EAAStC,SAAW,SAASR,EAAUS,GAOnC,IANA,IAIIgE,EAJAF,EAAS9D,EAAMP,EACfsE,EAAS/D,EAAMN,EACf+D,EAAiBlE,EAAS3F,OAC1BkG,EAASP,EAASkE,EAAiB,GAG9B1M,EAAI,EAAGA,EAAI0M,EAAgB1M,IAAK,CAGrC,GAFAiN,EAAazE,EAASxI,IAEjB+M,EAAShE,EAAOL,IAAMuE,EAAWtE,EAAII,EAAOJ,IAC1CqE,EAASjE,EAAOJ,IAAMI,EAAOL,EAAIuE,EAAWvE,GAAK,EACpD,OAAO,EAGXK,EAASkE,CACb,CAEA,OAAO,CACX,EAUA3B,EAAS4B,MAAQ,SAAS1E,EAAU2E,EAAQC,EAAQnE,GAChD,GAAe,IAAXkE,GAA2B,IAAXC,EAChB,OAAO5E,EAIX,IAAIO,EACAsE,EAHJpE,EAAQA,GAASqC,EAASS,OAAOvD,GAKjC,IAAK,IAAIxI,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IACjC+I,EAASP,EAASxI,GAClBqN,EAAQ1D,EAAOkB,IAAI9B,EAAQE,GAC3BT,EAASxI,GAAG0I,EAAIO,EAAMP,EAAI2E,EAAM3E,EAAIyE,EACpC3E,EAASxI,GAAG2I,EAAIM,EAAMN,EAAI0E,EAAM1E,EAAIyE,EAGxC,OAAO5E,CACX,EAYA8C,EAASgC,QAAU,SAAS9E,EAAU+E,EAAQC,EAASC,EAAYC,GAE3DH,EADkB,kBAAXA,EACE,CAACA,GAEDA,GAAU,CAAC,GAIxBC,EAA8B,qBAAZA,EAA2BA,GAAW,EACxDC,EAAaA,GAAc,EAC3BC,EAAaA,GAAc,GAI3B,IAFA,IAAIC,EAAc,GAET3N,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IAAK,CACtC,IAAI4N,EAAapF,EAASxI,EAAI,GAAK,EAAIA,EAAI,EAAIwI,EAAS3F,OAAS,GAC7DkG,EAASP,EAASxI,GAClBiN,EAAazE,GAAUxI,EAAI,GAAKwI,EAAS3F,QACzCgL,EAAgBN,EAAOvN,EAAIuN,EAAO1K,OAAS7C,EAAIuN,EAAO1K,OAAS,GAEnE,GAAsB,IAAlBgL,EAAJ,CAKA,IAAIC,EAAanE,EAAOU,UAAU,CAC9B3B,EAAGK,EAAOJ,EAAIiF,EAAWjF,EACzBA,EAAGiF,EAAWlF,EAAIK,EAAOL,IAGzBqF,EAAapE,EAAOU,UAAU,CAC9B3B,EAAGuE,EAAWtE,EAAII,EAAOJ,EACzBA,EAAGI,EAAOL,EAAIuE,EAAWvE,IAGzBsF,EAAiBhK,KAAK6F,KAAK,EAAI7F,KAAKiK,IAAIJ,EAAe,IACvDK,EAAevE,EAAOmB,KAAK/I,EAAOkB,MAAM6K,GAAaD,GACrDM,EAAYxE,EAAOU,UAAUV,EAAOmB,KAAKnB,EAAOiB,IAAIkD,EAAYC,GAAa,KAC7EK,EAAezE,EAAOkB,IAAI9B,EAAQY,EAAOmB,KAAKqD,EAAWH,IAEzDK,EAAYb,GAEC,IAAbA,IAEAa,EAA4C,KAAhCrK,KAAKiK,IAAIJ,EAAe,MAGxCQ,EAAYtM,EAAOgD,MAAMsJ,EAAWZ,EAAYC,GAG5CW,EAAY,IAAM,IAClBA,GAAa,GAKjB,IAHA,IAAIC,EAAQtK,KAAKuK,KAAK5E,EAAOW,IAAIwD,EAAYC,IACzCS,EAAQF,EAAQD,EAEXtK,EAAI,EAAGA,EAAIsK,EAAWtK,IAC3B4J,EAAYxK,KAAKwG,EAAOiB,IAAIjB,EAAOI,OAAOmE,EAAcM,EAAQzK,GAAIqK,GAlCxE,MAFIT,EAAYxK,KAAK4F,EAsCzB,CAEA,OAAO4E,CACX,EAQArC,EAASmD,cAAgB,SAASjG,GAC9B,IAAIuD,EAAST,EAASW,KAAKzD,GAM3B,OAJAA,EAASkG,MAAK,SAASC,EAASC,GAC5B,OAAOjF,EAAOK,MAAM+B,EAAQ4C,GAAWhF,EAAOK,MAAM+B,EAAQ6C,EAChE,IAEOpG,CACX,EAQA8C,EAASuD,SAAW,SAASrG,GAIzB,IAEIxI,EACA+D,EACA+K,EACAC,EALAC,EAAO,EACPxN,EAAIgH,EAAS3F,OAMjB,GAAIrB,EAAI,EACJ,OAAO,KAEX,IAAKxB,EAAI,EAAGA,EAAIwB,EAAGxB,IAYf,GAXA+D,GAAK/D,EAAI,GAAKwB,EACdsN,GAAK9O,EAAI,GAAKwB,EACduN,GAAKvG,EAASzE,GAAG2E,EAAIF,EAASxI,GAAG0I,IAAMF,EAASsG,GAAGnG,EAAIH,EAASzE,GAAG4E,GACnEoG,IAAMvG,EAASzE,GAAG4E,EAAIH,EAASxI,GAAG2I,IAAMH,EAASsG,GAAGpG,EAAIF,EAASzE,GAAG2E,GAEhEqG,EAAI,EACJC,GAAQ,EACDD,EAAI,IACXC,GAAQ,GAGC,IAATA,EACA,OAAO,EAIf,OAAa,IAATA,GAGO,IAEf,EAQA1D,EAAS2D,KAAO,SAASzG,GAGrB,IAEIO,EACA/I,EAHAkP,EAAQ,GACRC,EAAQ,GAYZ,IAPA3G,EAAWA,EAAS/E,MAAM,GAC1B+E,EAASkG,MAAK,SAASC,EAASC,GAC5B,IAAI/B,EAAK8B,EAAQjG,EAAIkG,EAAQlG,EAC7B,OAAc,IAAPmE,EAAWA,EAAK8B,EAAQhG,EAAIiG,EAAQjG,CAC/C,IAGK3I,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,GAAK,EAAG,CACrC+I,EAASP,EAASxI,GAElB,MAAOmP,EAAMtM,QAAU,GACb8G,EAAOe,OAAOyE,EAAMA,EAAMtM,OAAS,GAAIsM,EAAMA,EAAMtM,OAAS,GAAIkG,IAAW,EACjFoG,EAAMC,MAGVD,EAAMhM,KAAK4F,EACf,CAGA,IAAK/I,EAAIwI,EAAS3F,OAAS,EAAG7C,GAAK,EAAGA,GAAK,EAAG,CAC1C+I,EAASP,EAASxI,GAElB,MAAOkP,EAAMrM,QAAU,GACb8G,EAAOe,OAAOwE,EAAMA,EAAMrM,OAAS,GAAIqM,EAAMA,EAAMrM,OAAS,GAAIkG,IAAW,EACjFmG,EAAME,MAGVF,EAAM/L,KAAK4F,EACf,CAOA,OAHAmG,EAAME,MACND,EAAMC,MAECF,EAAMjJ,OAAOkJ,EACxB,CAEH,EA3bD,EA8bO,WAES1P,EAAQC,EAASI,GAWjC,IAAIuP,EAAO,CAAC,EAEZ5P,EAAOC,QAAU2P,EAEjB,IAAI/D,EAAWxL,EAAoB,GAC/B6J,EAAS7J,EAAoB,GAC7BwP,EAAWxP,EAAoB,GAC/BiC,EAASjC,EAAoB,GAC7ByI,EAASzI,EAAoB,GAC7ByP,EAAOzP,EAAoB,KAE/B,WAEIuP,EAAKG,iBAAkB,EACvBH,EAAKI,cAAgB,EACrBJ,EAAKK,sBAAwB,EAC7BL,EAAKM,0BAA4B,EACjCN,EAAKO,cAAgB,EACrBP,EAAKrN,WAAa,IAAO,GAWzBqN,EAAKhO,OAAS,SAASwO,GACnB,IAAIC,EAAW,CACXC,GAAIhO,EAAO4E,SACXqJ,KAAM,OACNC,MAAO,OACPrM,MAAO,GACPsM,OAAQ,CAAC,EACTlG,MAAO,EACPxB,SAAU8C,EAASK,SAAS,+BAC5BnC,SAAU,CAAEd,EAAG,EAAGC,EAAG,GACrBwH,MAAO,CAAEzH,EAAG,EAAGC,EAAG,GAClByH,OAAQ,EACRC,gBAAiB,CAAE3H,EAAG,EAAGC,EAAG,GAC5B2H,kBAAmB,CAAE5H,EAAG,EAAGC,EAAG,EAAGqB,MAAO,GACxCuG,cAAe,EACfC,MAAO,EACPC,aAAc,EACd5H,SAAU,CAAEH,EAAG,EAAGC,EAAG,GACrB+H,gBAAiB,EACjBC,UAAU,EACVC,UAAU,EACVC,YAAY,EACZC,OAAQ,EACRC,eAAgB,GAChBC,QAAS,KACTC,YAAa,EACbC,SAAU,GACVC,eAAgB,GAChBC,YAAa,IACbC,gBAAiB,CACbC,SAAU,EACVC,KAAM,WACNC,MAAO,GAEXC,KAAM,IACNC,UAAW,EACXC,OAAQ,CACJC,SAAS,EACTC,QAAS,EACTC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,OAAQ,CACJC,OAAQ,EACRC,OAAQ,EACRC,QAAS,EACTC,QAAS,IAGjBC,OAAQ,KACR7J,OAAQ,KACR6E,QAAS,KACTiF,aAAc,EACdC,aAAc,KACdC,UAAW,EACXC,OAAQ,KACRC,KAAM,KACN3G,KAAM,EACNM,KAAM,EACND,QAAS,EACTuG,UAAW,IAAO,GAClBC,UAAW,MAGXrH,EAAOzJ,EAAOQ,OAAOuN,EAAUD,GAInC,OAFAiD,EAAgBtH,EAAMqE,GAEfrE,CACX,EAUA6D,EAAK0D,UAAY,SAASC,GACtB,OAAIA,EACO3D,EAAKM,2BAETN,EAAKK,uBAChB,EAQAL,EAAK4D,aAAe,WAEhB,OADA5D,EAAKO,cAAgBP,EAAKO,eAAiB,EACpCP,EAAKO,aAChB,EASA,IAAIkD,EAAkB,SAAStH,EAAMqE,GACjCA,EAAUA,GAAW,CAAC,EAGtBR,EAAK3L,IAAI8H,EAAM,CACX/C,OAAQ+C,EAAK/C,QAAUF,EAAOlH,OAAOmK,EAAKhD,UAC1CgK,aAAchH,EAAKgH,cAAgB7I,EAAO1G,MAAMuI,EAAKhC,UACrDiJ,UAAWjH,EAAKiH,WAAajH,EAAKxB,MAClCxB,SAAUgD,EAAKhD,SACf5E,MAAO4H,EAAK5H,OAAS,CAAC4H,GACtBoF,SAAUpF,EAAKoF,SACfC,WAAYrF,EAAKqF,WACjB6B,OAAQlH,EAAKkH,QAAUlH,IAG3BF,EAASvB,OAAOyB,EAAKhD,SAAUgD,EAAKxB,MAAOwB,EAAKhC,UAChD+F,EAAKxF,OAAOyB,EAAKmH,KAAMnH,EAAKxB,OAC5BzB,EAAOK,OAAO4C,EAAK/C,OAAQ+C,EAAKhD,SAAUgD,EAAK3C,UAG/CwG,EAAK3L,IAAI8H,EAAM,CACXmH,KAAM9C,EAAQ8C,MAAQnH,EAAKmH,KAC3B3G,KAAM6D,EAAQ7D,MAAQR,EAAKQ,KAC3BM,KAAMuD,EAAQvD,MAAQd,EAAKc,KAC3BD,QAASwD,EAAQxD,SAAWb,EAAKa,UAIrC,IAAI6G,EAAoB1H,EAAKoF,SAAW,UAAY7O,EAAOqC,OAAO,CAAC,UAAW,UAAW,UAAW,UAAW,YAC3G+O,EAAqB3H,EAAKoF,SAAW,OAAS,OAC9CwC,EAAmB5H,EAAKoF,UAAsC,OAA1BpF,EAAKmG,OAAOI,UAAqB,EAAI,EAC7EvG,EAAKmG,OAAOI,UAAYvG,EAAKmG,OAAOI,WAAamB,EACjD1H,EAAKmG,OAAOG,YAActG,EAAKmG,OAAOG,aAAeqB,EACrD3H,EAAKmG,OAAOK,UAAYxG,EAAKmG,OAAOK,WAAaoB,EACjD5H,EAAKmG,OAAOM,OAAOG,WAAa5G,EAAK/C,OAAOzD,IAAI0D,EAAI8C,EAAKhC,SAASd,IAAM8C,EAAK/C,OAAOxD,IAAIyD,EAAI8C,EAAK/C,OAAOzD,IAAI0D,GAC5G8C,EAAKmG,OAAOM,OAAOI,WAAa7G,EAAK/C,OAAOzD,IAAI2D,EAAI6C,EAAKhC,SAASb,IAAM6C,EAAK/C,OAAOxD,IAAI0D,EAAI6C,EAAK/C,OAAOzD,IAAI2D,EAChH,EAUA0G,EAAK3L,IAAM,SAAS8H,EAAM6H,EAAUrS,GAChC,IAAIU,EAQJ,IAAKA,IANmB,kBAAb2R,IACP3R,EAAW2R,EACXA,EAAW,CAAC,EACZA,EAAS3R,GAAYV,GAGRqS,EACb,GAAK5S,OAAOkB,UAAUC,eAAe1B,KAAKmT,EAAU3R,GAIpD,OADAV,EAAQqS,EAAS3R,GACTA,GAER,IAAK,WACD2N,EAAKiE,UAAU9H,EAAMxK,GACrB,MACJ,IAAK,aACDsO,EAAS5L,IAAI8H,EAAMxK,GACnB,MACJ,IAAK,OACDqO,EAAKkE,QAAQ/H,EAAMxK,GACnB,MACJ,IAAK,UACDqO,EAAKmE,WAAWhI,EAAMxK,GACtB,MACJ,IAAK,UACDqO,EAAKoE,WAAWjI,EAAMxK,GACtB,MACJ,IAAK,WACDqO,EAAKqE,YAAYlI,EAAMxK,GACvB,MACJ,IAAK,WACDqO,EAAKsE,YAAYnI,EAAMxK,GACvB,MACJ,IAAK,QACDqO,EAAKuE,SAASpI,EAAMxK,GACpB,MACJ,IAAK,WACDqO,EAAKwE,YAAYrI,EAAMxK,GACvB,MACJ,IAAK,kBACDqO,EAAKyE,mBAAmBtI,EAAMxK,GAC9B,MACJ,IAAK,QACDqO,EAAK0E,SAASvI,EAAMxK,GACpB,MACJ,IAAK,eACDqO,EAAK2E,gBAAgBxI,EAAMxK,GAC3B,MACJ,IAAK,QACDqO,EAAK4E,SAASzI,EAAMxK,GACpB,MACJ,IAAK,SACDqO,EAAK6E,UAAU1I,EAAMxK,GACrB,MACJ,QACIwK,EAAK9J,GAAYV,EAI7B,EAQAqO,EAAKiE,UAAY,SAAS9H,EAAMoF,GAC5B,IAAK,IAAI5Q,EAAI,EAAGA,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACxC,IAAImU,EAAO3I,EAAK5H,MAAM5D,GAElB4Q,GACKuD,EAAKvD,WACNuD,EAAKtB,UAAY,CACb5B,YAAakD,EAAKlD,YAClBC,SAAUiD,EAAKjD,SACf5E,KAAM6H,EAAK7H,KACXD,QAAS8H,EAAK9H,QACd2E,QAASmD,EAAKnD,QACdoD,YAAaD,EAAKC,YAClBC,eAAgBF,EAAKE,iBAI7BF,EAAKlD,YAAc,EACnBkD,EAAKjD,SAAW,EAChBiD,EAAK7H,KAAO6H,EAAK9H,QAAU8H,EAAKnD,QAAUlI,IAC1CqL,EAAKC,YAAcD,EAAKE,eAAiB,EAEzCF,EAAK3B,aAAa9J,EAAIyL,EAAK3K,SAASd,EACpCyL,EAAK3B,aAAa7J,EAAIwL,EAAK3K,SAASb,EACpCwL,EAAK1B,UAAY0B,EAAKnK,MACtBmK,EAAKzD,gBAAkB,EACvByD,EAAK3D,MAAQ,EACb2D,EAAK1D,aAAe,EACpB0D,EAAKrD,OAAS,GACPqD,EAAKtB,YACZsB,EAAKlD,YAAckD,EAAKtB,UAAU5B,YAClCkD,EAAKjD,SAAWiD,EAAKtB,UAAU3B,SAC/BiD,EAAK7H,KAAO6H,EAAKtB,UAAUvG,KAC3B6H,EAAK9H,QAAU8H,EAAKtB,UAAUxG,QAC9B8H,EAAKnD,QAAUmD,EAAKtB,UAAU7B,QAC9BmD,EAAKC,YAAcD,EAAKtB,UAAUuB,YAClCD,EAAKE,eAAiBF,EAAKtB,UAAUwB,eAErCF,EAAKtB,UAAY,MAGrBsB,EAAKvD,SAAWA,CACpB,CACJ,EAQAvB,EAAKkE,QAAU,SAAS/H,EAAMc,GAC1B,IAAIgI,EAAS9I,EAAKa,SAAWb,EAAKc,KAAO,GACzCd,EAAKa,QAAUiI,GAAUhI,EAAO,GAChCd,EAAK6I,eAAiB,EAAI7I,EAAKa,QAE/Bb,EAAKc,KAAOA,EACZd,EAAK4I,YAAc,EAAI5I,EAAKc,KAC5Bd,EAAKwF,QAAUxF,EAAKc,KAAOd,EAAKQ,IACpC,EAQAqD,EAAKmE,WAAa,SAAShI,EAAMwF,GAC7B3B,EAAKkE,QAAQ/H,EAAMwF,EAAUxF,EAAKQ,MAClCR,EAAKwF,QAAUA,CACnB,EASA3B,EAAKoE,WAAa,SAASjI,EAAMa,GAC7Bb,EAAKa,QAAUA,EACfb,EAAK6I,eAAiB,EAAI7I,EAAKa,OACnC,EAcAgD,EAAKqE,YAAc,SAASlI,EAAMhD,GAE1BA,EAAS,GAAGgD,OAASA,EACrBA,EAAKhD,SAAWA,EAEhBgD,EAAKhD,SAAW8C,EAASjK,OAAOmH,EAAUgD,GAI9CA,EAAKmH,KAAOpD,EAAKgF,aAAa/I,EAAKhD,UACnCgD,EAAKQ,KAAOV,EAASU,KAAKR,EAAKhD,UAC/B6G,EAAKkE,QAAQ/H,EAAMA,EAAKwF,QAAUxF,EAAKQ,MAGvC,IAAID,EAAST,EAASS,OAAOP,EAAKhD,UAClC8C,EAASjC,UAAUmC,EAAKhD,SAAUuD,GAAS,GAG3CsD,EAAKoE,WAAWjI,EAAM6D,EAAKI,cAAgBnE,EAASe,QAAQb,EAAKhD,SAAUgD,EAAKc,OAGhFhB,EAASjC,UAAUmC,EAAKhD,SAAUgD,EAAKhC,UACvCjB,EAAOK,OAAO4C,EAAK/C,OAAQ+C,EAAKhD,SAAUgD,EAAK3C,SACnD,EAmBAwG,EAAK4E,SAAW,SAASzI,EAAM5H,EAAO4Q,GAClC,IAAIxU,EAQJ,IALA4D,EAAQA,EAAMH,MAAM,GACpB+H,EAAK5H,MAAMf,OAAS,EACpB2I,EAAK5H,MAAMT,KAAKqI,GAChBA,EAAKkH,OAASlH,EAETxL,EAAI,EAAGA,EAAI4D,EAAMf,OAAQ7C,IAAK,CAC/B,IAAImU,EAAOvQ,EAAM5D,GACbmU,IAAS3I,IACT2I,EAAKzB,OAASlH,EACdA,EAAK5H,MAAMT,KAAKgR,GAExB,CAEA,GAA0B,IAAtB3I,EAAK5H,MAAMf,OAAf,CAMA,GAHA2R,EAA+B,qBAAbA,GAA2BA,EAGzCA,EAAU,CACV,IAAIhM,EAAW,GACf,IAAKxI,EAAI,EAAGA,EAAI4D,EAAMf,OAAQ7C,IAC1BwI,EAAWA,EAASvC,OAAOrC,EAAM5D,GAAGwI,UAGxC8C,EAASmD,cAAcjG,GAEvB,IAAIyG,EAAO3D,EAAS2D,KAAKzG,GACrBiM,EAAanJ,EAASS,OAAOkD,GAEjCI,EAAKqE,YAAYlI,EAAMyD,GACvB3D,EAASjC,UAAUmC,EAAKhD,SAAUiM,EACtC,CAGA,IAAIC,EAAQrF,EAAKsF,iBAAiBnJ,GAElCA,EAAKQ,KAAO0I,EAAM1I,KAClBR,EAAKkH,OAASlH,EACdA,EAAKhC,SAASd,EAAIgM,EAAM3I,OAAOrD,EAC/B8C,EAAKhC,SAASb,EAAI+L,EAAM3I,OAAOpD,EAC/B6C,EAAKgH,aAAa9J,EAAIgM,EAAM3I,OAAOrD,EACnC8C,EAAKgH,aAAa7J,EAAI+L,EAAM3I,OAAOpD,EAEnC0G,EAAKkE,QAAQ/H,EAAMkJ,EAAMpI,MACzB+C,EAAKoE,WAAWjI,EAAMkJ,EAAMrI,SAC5BgD,EAAKsE,YAAYnI,EAAMkJ,EAAM3I,OAhCnB,CAiCd,EAaAsD,EAAK6E,UAAY,SAAS1I,EAAMO,EAAQ6I,GAC/BA,GAMDpJ,EAAKgH,aAAa9J,GAAKqD,EAAOrD,EAC9B8C,EAAKgH,aAAa7J,GAAKoD,EAAOpD,EAC9B6C,EAAKhC,SAASd,GAAKqD,EAAOrD,EAC1B8C,EAAKhC,SAASb,GAAKoD,EAAOpD,IAR1B6C,EAAKgH,aAAa9J,EAAIqD,EAAOrD,GAAK8C,EAAKhC,SAASd,EAAI8C,EAAKgH,aAAa9J,GACtE8C,EAAKgH,aAAa7J,EAAIoD,EAAOpD,GAAK6C,EAAKhC,SAASb,EAAI6C,EAAKgH,aAAa7J,GACtE6C,EAAKhC,SAASd,EAAIqD,EAAOrD,EACzB8C,EAAKhC,SAASb,EAAIoD,EAAOpD,EAOjC,EAUA0G,EAAKsE,YAAc,SAASnI,EAAMhC,EAAUqL,GACxC,IAAIxH,EAAQ1D,EAAOkB,IAAIrB,EAAUgC,EAAKhC,UAElCqL,GACArJ,EAAKgH,aAAa9J,EAAI8C,EAAKhC,SAASd,EACpC8C,EAAKgH,aAAa7J,EAAI6C,EAAKhC,SAASb,EACpC6C,EAAK3C,SAASH,EAAI2E,EAAM3E,EACxB8C,EAAK3C,SAASF,EAAI0E,EAAM1E,EACxB6C,EAAKgF,MAAQ7G,EAAOC,UAAUyD,KAE9B7B,EAAKgH,aAAa9J,GAAK2E,EAAM3E,EAC7B8C,EAAKgH,aAAa7J,GAAK0E,EAAM1E,GAGjC,IAAK,IAAI3I,EAAI,EAAGA,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACxC,IAAImU,EAAO3I,EAAK5H,MAAM5D,GACtBmU,EAAK3K,SAASd,GAAK2E,EAAM3E,EACzByL,EAAK3K,SAASb,GAAK0E,EAAM1E,EACzB2C,EAASjC,UAAU8K,EAAK3L,SAAU6E,GAClC9E,EAAOK,OAAOuL,EAAK1L,OAAQ0L,EAAK3L,SAAUgD,EAAK3C,SACnD,CACJ,EAUAwG,EAAKuE,SAAW,SAASpI,EAAMxB,EAAO6K,GAClC,IAAIxH,EAAQrD,EAAQwB,EAAKxB,MAErB6K,GACArJ,EAAKiH,UAAYjH,EAAKxB,MACtBwB,EAAKkF,gBAAkBrD,EACvB7B,EAAKiF,aAAezM,KAAKoI,IAAIiB,IAE7B7B,EAAKiH,WAAapF,EAGtB,IAAK,IAAIrN,EAAI,EAAGA,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACxC,IAAImU,EAAO3I,EAAK5H,MAAM5D,GACtBmU,EAAKnK,OAASqD,EACd/B,EAASvB,OAAOoK,EAAK3L,SAAU6E,EAAO7B,EAAKhC,UAC3C+F,EAAKxF,OAAOoK,EAAKxB,KAAMtF,GACvB9E,EAAOK,OAAOuL,EAAK1L,OAAQ0L,EAAK3L,SAAUgD,EAAK3C,UAC3C7I,EAAI,GACJ2J,EAAOS,YAAY+J,EAAK3K,SAAU6D,EAAO7B,EAAKhC,SAAU2K,EAAK3K,SAErE,CACJ,EASA6F,EAAKwE,YAAc,SAASrI,EAAM3C,GAC9B,IAAI6I,EAAYlG,EAAKoH,UAAYvD,EAAKrN,WACtCwJ,EAAKgH,aAAa9J,EAAI8C,EAAKhC,SAASd,EAAIG,EAASH,EAAIgJ,EACrDlG,EAAKgH,aAAa7J,EAAI6C,EAAKhC,SAASb,EAAIE,EAASF,EAAI+I,EACrDlG,EAAK3C,SAASH,GAAK8C,EAAKhC,SAASd,EAAI8C,EAAKgH,aAAa9J,GAAKgJ,EAC5DlG,EAAK3C,SAASF,GAAK6C,EAAKhC,SAASb,EAAI6C,EAAKgH,aAAa7J,GAAK+I,EAC5DlG,EAAKgF,MAAQ7G,EAAOC,UAAU4B,EAAK3C,SACvC,EAQAwG,EAAKyF,YAAc,SAAStJ,GACxB,IAAIkG,EAAYrC,EAAKrN,WAAawJ,EAAKoH,UAEvC,MAAO,CACHlK,GAAI8C,EAAKhC,SAASd,EAAI8C,EAAKgH,aAAa9J,GAAKgJ,EAC7C/I,GAAI6C,EAAKhC,SAASb,EAAI6C,EAAKgH,aAAa7J,GAAK+I,EAErD,EASArC,EAAK0F,SAAW,SAASvJ,GACrB,OAAO7B,EAAOC,UAAUyF,EAAKyF,YAAYtJ,GAC7C,EASA6D,EAAK0E,SAAW,SAASvI,EAAMgF,GAC3BnB,EAAKwE,YAAYrI,EAAM7B,EAAOmB,KAAKnB,EAAOU,UAAUgF,EAAKyF,YAAYtJ,IAAQgF,GACjF,EASAnB,EAAKyE,mBAAqB,SAAStI,EAAM3C,GACrC,IAAI6I,EAAYlG,EAAKoH,UAAYvD,EAAKrN,WACtCwJ,EAAKiH,UAAYjH,EAAKxB,MAAQnB,EAAW6I,EACzClG,EAAKkF,iBAAmBlF,EAAKxB,MAAQwB,EAAKiH,WAAaf,EACvDlG,EAAKiF,aAAezM,KAAKoI,IAAIZ,EAAKkF,gBACtC,EAQArB,EAAK2F,mBAAqB,SAASxJ,GAC/B,OAAQA,EAAKxB,MAAQwB,EAAKiH,WAAapD,EAAKrN,WAAawJ,EAAKoH,SAClE,EASAvD,EAAK4F,gBAAkB,SAASzJ,GAC5B,OAAOxH,KAAKoI,IAAIiD,EAAK2F,mBAAmBxJ,GAC5C,EASA6D,EAAK2E,gBAAkB,SAASxI,EAAMgF,GAClCnB,EAAKyE,mBAAmBtI,EAAMzJ,EAAOmD,KAAKmK,EAAK2F,mBAAmBxJ,IAASgF,EAC/E,EAUAnB,EAAKhG,UAAY,SAASmC,EAAM0J,EAAaL,GACzCxF,EAAKsE,YAAYnI,EAAM7B,EAAOiB,IAAIY,EAAKhC,SAAU0L,GAAcL,EACnE,EAWAxF,EAAKtF,OAAS,SAASyB,EAAM2J,EAAUlM,EAAO4L,GAC1C,GAAK5L,EAEE,CACH,IAAIiB,EAAMlG,KAAKkG,IAAIiL,GACfhL,EAAMnG,KAAKmG,IAAIgL,GACftI,EAAKrB,EAAKhC,SAASd,EAAIO,EAAMP,EAC7BoE,EAAKtB,EAAKhC,SAASb,EAAIM,EAAMN,EAEjC0G,EAAKsE,YAAYnI,EAAM,CACnB9C,EAAGO,EAAMP,GAAKmE,EAAK3C,EAAM4C,EAAK3C,GAC9BxB,EAAGM,EAAMN,GAAKkE,EAAK1C,EAAM2C,EAAK5C,IAC/B2K,GAEHxF,EAAKuE,SAASpI,EAAMA,EAAKxB,MAAQmL,EAAUN,EAC/C,MAbIxF,EAAKuE,SAASpI,EAAMA,EAAKxB,MAAQmL,EAAUN,EAcnD,EAUAxF,EAAKnC,MAAQ,SAAS1B,EAAM2B,EAAQC,EAAQnE,GACxC,IAAImM,EAAY,EACZC,EAAe,EAEnBpM,EAAQA,GAASuC,EAAKhC,SAEtB,IAAK,IAAIxJ,EAAI,EAAGA,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACxC,IAAImU,EAAO3I,EAAK5H,MAAM5D,GAGtBsL,EAAS4B,MAAMiH,EAAK3L,SAAU2E,EAAQC,EAAQnE,GAG9CkL,EAAKxB,KAAOpD,EAAKgF,aAAaJ,EAAK3L,UACnC2L,EAAKnI,KAAOV,EAASU,KAAKmI,EAAK3L,UAC/B6G,EAAKkE,QAAQY,EAAM3I,EAAKwF,QAAUmD,EAAKnI,MAGvCV,EAASjC,UAAU8K,EAAK3L,SAAU,CAAEE,GAAIyL,EAAK3K,SAASd,EAAGC,GAAIwL,EAAK3K,SAASb,IAC3E0G,EAAKoE,WAAWU,EAAM9E,EAAKI,cAAgBnE,EAASe,QAAQ8H,EAAK3L,SAAU2L,EAAK7H,OAChFhB,EAASjC,UAAU8K,EAAK3L,SAAU,CAAEE,EAAGyL,EAAK3K,SAASd,EAAGC,EAAGwL,EAAK3K,SAASb,IAErE3I,EAAI,IACJoV,GAAajB,EAAKnI,KAClBqJ,GAAgBlB,EAAK9H,SAIzB8H,EAAK3K,SAASd,EAAIO,EAAMP,GAAKyL,EAAK3K,SAASd,EAAIO,EAAMP,GAAKyE,EAC1DgH,EAAK3K,SAASb,EAAIM,EAAMN,GAAKwL,EAAK3K,SAASb,EAAIM,EAAMN,GAAKyE,EAG1D7E,EAAOK,OAAOuL,EAAK1L,OAAQ0L,EAAK3L,SAAUgD,EAAK3C,SACnD,CAGI2C,EAAK5H,MAAMf,OAAS,IACpB2I,EAAKQ,KAAOoJ,EAEP5J,EAAKoF,WACNvB,EAAKkE,QAAQ/H,EAAMA,EAAKwF,QAAUoE,GAClC/F,EAAKoE,WAAWjI,EAAM6J,KAK1B7J,EAAK+G,eACDpF,IAAWC,EACX5B,EAAK+G,cAAgBpF,EAGrB3B,EAAK+G,aAAe,KAGhC,EASAlD,EAAKzG,OAAS,SAAS4C,EAAMoH,GACzBA,GAAkC,qBAAdA,EAA4BA,EAAa,IAAO,IAAOpH,EAAKkG,UAEhF,IAAI4D,EAAmB1C,EAAYA,EAC/B2C,EAAalG,EAAKG,gBAAkBoD,GAAapH,EAAKoH,WAAaA,GAAa,EAGhFxB,EAAc,EAAI5F,EAAK4F,aAAewB,EAAY7Q,EAAOC,YACzDwT,GAAiBhK,EAAKhC,SAASd,EAAI8C,EAAKgH,aAAa9J,GAAK6M,EAC1DE,GAAiBjK,EAAKhC,SAASb,EAAI6C,EAAKgH,aAAa7J,GAAK4M,EAG9D/J,EAAK3C,SAASH,EAAK8M,EAAgBpE,EAAgB5F,EAAK2E,MAAMzH,EAAI8C,EAAKc,KAAQgJ,EAC/E9J,EAAK3C,SAASF,EAAK8M,EAAgBrE,EAAgB5F,EAAK2E,MAAMxH,EAAI6C,EAAKc,KAAQgJ,EAE/E9J,EAAKgH,aAAa9J,EAAI8C,EAAKhC,SAASd,EACpC8C,EAAKgH,aAAa7J,EAAI6C,EAAKhC,SAASb,EACpC6C,EAAKhC,SAASd,GAAK8C,EAAK3C,SAASH,EACjC8C,EAAKhC,SAASb,GAAK6C,EAAK3C,SAASF,EACjC6C,EAAKoH,UAAYA,EAGjBpH,EAAKkF,iBAAoBlF,EAAKxB,MAAQwB,EAAKiH,WAAarB,EAAcmE,EAAe/J,EAAK4E,OAAS5E,EAAKa,QAAWiJ,EACnH9J,EAAKiH,UAAYjH,EAAKxB,MACtBwB,EAAKxB,OAASwB,EAAKkF,gBAGnB,IAAK,IAAI1Q,EAAI,EAAGA,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACxC,IAAImU,EAAO3I,EAAK5H,MAAM5D,GAEtBsL,EAASjC,UAAU8K,EAAK3L,SAAUgD,EAAK3C,UAEnC7I,EAAI,IACJmU,EAAK3K,SAASd,GAAK8C,EAAK3C,SAASH,EACjCyL,EAAK3K,SAASb,GAAK6C,EAAK3C,SAASF,GAGR,IAAzB6C,EAAKkF,kBACLpF,EAASvB,OAAOoK,EAAK3L,SAAUgD,EAAKkF,gBAAiBlF,EAAKhC,UAC1D+F,EAAKxF,OAAOoK,EAAKxB,KAAMnH,EAAKkF,iBACxB1Q,EAAI,GACJ2J,EAAOS,YAAY+J,EAAK3K,SAAUgC,EAAKkF,gBAAiBlF,EAAKhC,SAAU2K,EAAK3K,WAIpFjB,EAAOK,OAAOuL,EAAK1L,OAAQ0L,EAAK3L,SAAUgD,EAAK3C,SACnD,CACJ,EAOAwG,EAAKqG,iBAAmB,SAASlK,GAC7B,IAAIkG,EAAYrC,EAAKrN,WAAawJ,EAAKoH,UACnC+C,EAAenK,EAAK3C,SAExB8M,EAAajN,GAAK8C,EAAKhC,SAASd,EAAI8C,EAAKgH,aAAa9J,GAAKgJ,EAC3DiE,EAAahN,GAAK6C,EAAKhC,SAASb,EAAI6C,EAAKgH,aAAa7J,GAAK+I,EAC3DlG,EAAKgF,MAAQxM,KAAK6F,KAAM8L,EAAajN,EAAIiN,EAAajN,EAAMiN,EAAahN,EAAIgN,EAAahN,GAE1F6C,EAAKkF,iBAAmBlF,EAAKxB,MAAQwB,EAAKiH,WAAaf,EACvDlG,EAAKiF,aAAezM,KAAKoI,IAAIZ,EAAKkF,gBACtC,EAqBArB,EAAKuG,WAAa,SAASpK,EAAMhC,EAAU2G,GACvC,IAAI0F,EAAS,CAAEnN,EAAGc,EAASd,EAAI8C,EAAKhC,SAASd,EAAGC,EAAGa,EAASb,EAAI6C,EAAKhC,SAASb,GAC9E6C,EAAK2E,MAAMzH,GAAKyH,EAAMzH,EACtB8C,EAAK2E,MAAMxH,GAAKwH,EAAMxH,EACtB6C,EAAK4E,QAAUyF,EAAOnN,EAAIyH,EAAMxH,EAAIkN,EAAOlN,EAAIwH,EAAMzH,CACzD,EASA2G,EAAKsF,iBAAmB,SAASnJ,GAa7B,IARA,IAAIsK,EAAa,CACbxJ,KAAM,EACNN,KAAM,EACNK,QAAS,EACTN,OAAQ,CAAErD,EAAG,EAAGC,EAAG,IAId3I,EAA0B,IAAtBwL,EAAK5H,MAAMf,OAAe,EAAI,EAAG7C,EAAIwL,EAAK5H,MAAMf,OAAQ7C,IAAK,CACtE,IAAImU,EAAO3I,EAAK5H,MAAM5D,GAClBsM,EAAO6H,EAAK7H,OAASxD,IAAWqL,EAAK7H,KAAO,EAEhDwJ,EAAWxJ,MAAQA,EACnBwJ,EAAW9J,MAAQmI,EAAKnI,KACxB8J,EAAWzJ,SAAW8H,EAAK9H,QAC3ByJ,EAAW/J,OAASpC,EAAOiB,IAAIkL,EAAW/J,OAAQpC,EAAOmB,KAAKqJ,EAAK3K,SAAU8C,GACjF,CAIA,OAFAwJ,EAAW/J,OAASpC,EAAOqB,IAAI8K,EAAW/J,OAAQ+J,EAAWxJ,MAEtDwJ,CACX,CA+lBH,EAl7CD,EAq7CO,WAESrW,EAAQC,EAASI,GAUjC,IAAIiW,EAAS,CAAC,EAEdtW,EAAOC,QAAUqW,EAEjB,IAAIhU,EAASjC,EAAoB,IAEjC,WASIiW,EAAOC,GAAK,SAASvU,EAAQwU,EAAYC,GAIrC,IAHA,IACI5V,EADA6V,EAAQF,EAAWzS,MAAM,KAGpBxD,EAAI,EAAGA,EAAImW,EAAMtT,OAAQ7C,IAC9BM,EAAO6V,EAAMnW,GACbyB,EAAO6Q,OAAS7Q,EAAO6Q,QAAU,CAAC,EAClC7Q,EAAO6Q,OAAOhS,GAAQmB,EAAO6Q,OAAOhS,IAAS,GAC7CmB,EAAO6Q,OAAOhS,GAAM6C,KAAK+S,GAG7B,OAAOA,CACX,EASAH,EAAOK,IAAM,SAAS3U,EAAQwU,EAAYC,GACtC,GAAKD,EAAL,CAM0B,oBAAfA,IACPC,EAAWD,EACXA,EAAalU,EAAOmB,KAAKzB,EAAO6Q,QAAQ/L,KAAK,MAKjD,IAFA,IAAI4P,EAAQF,EAAWzS,MAAM,KAEpBxD,EAAI,EAAGA,EAAImW,EAAMtT,OAAQ7C,IAAK,CACnC,IAAIqW,EAAY5U,EAAO6Q,OAAO6D,EAAMnW,IAChCsW,EAAe,GAEnB,GAAIJ,GAAYG,EACZ,IAAK,IAAItS,EAAI,EAAGA,EAAIsS,EAAUxT,OAAQkB,IAC9BsS,EAAUtS,KAAOmS,GACjBI,EAAanT,KAAKkT,EAAUtS,IAIxCtC,EAAO6Q,OAAO6D,EAAMnW,IAAMsW,CAC9B,CAtBA,MAFI7U,EAAO6Q,OAAS,CAAC,CAyBzB,EASAyD,EAAOQ,QAAU,SAAS9U,EAAQwU,EAAYO,GAC1C,IAAIL,EACA7V,EACA+V,EACAI,EAEAnE,EAAS7Q,EAAO6Q,OAEpB,GAAIA,GAAUvQ,EAAOmB,KAAKoP,GAAQzP,OAAS,EAAG,CACrC2T,IACDA,EAAQ,CAAC,GAEbL,EAAQF,EAAWzS,MAAM,KAEzB,IAAK,IAAIxD,EAAI,EAAGA,EAAImW,EAAMtT,OAAQ7C,IAI9B,GAHAM,EAAO6V,EAAMnW,GACbqW,EAAY/D,EAAOhS,GAEf+V,EAAW,CACXI,EAAa1U,EAAOkB,MAAMuT,GAAO,GACjCC,EAAWnW,KAAOA,EAClBmW,EAAW3T,OAASrB,EAEpB,IAAK,IAAIsC,EAAI,EAAGA,EAAIsS,EAAUxT,OAAQkB,IAClCsS,EAAUtS,GAAGiC,MAAMvE,EAAQ,CAACgV,GAEpC,CAER,CACJ,CAEH,EAjGD,EAoGO,WAEShX,EAAQC,EAASI,GAejC,IAAI4W,EAAY,CAAC,EAEjBjX,EAAOC,QAAUgX,EAEjB,IAAIX,EAASjW,EAAoB,GAC7BiC,EAASjC,EAAoB,GAC7ByI,EAASzI,EAAoB,GAC7BuP,EAAOvP,EAAoB,IAE/B,WASI4W,EAAUrV,OAAS,SAASwO,GACxB,OAAO9N,EAAOQ,OAAO,CACjBwN,GAAIhO,EAAO4E,SACXqJ,KAAM,YACN0C,OAAQ,KACRiE,YAAY,EACZC,OAAQ,GACRC,YAAa,GACbC,WAAY,GACZ7G,MAAO,YACPC,OAAQ,CAAC,EACT6G,MAAO,CACHC,UAAW,KACXC,eAAgB,KAChBC,cAAe,OAEpBrH,EACP,EAaA6G,EAAUS,YAAc,SAASC,EAAWT,EAAYU,EAAeC,GAanE,GAZAF,EAAUT,WAAaA,EAEnBA,GAAcS,EAAUL,QACxBK,EAAUL,MAAMC,UAAY,KAC5BI,EAAUL,MAAME,eAAiB,KACjCG,EAAUL,MAAMG,cAAgB,MAGhCG,GAAiBD,EAAU1E,QAC3BgE,EAAUS,YAAYC,EAAU1E,OAAQiE,EAAYU,EAAeC,GAGnEA,EACA,IAAK,IAAItX,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAAK,CAClD,IAAIuX,EAAiBH,EAAUN,WAAW9W,GAC1C0W,EAAUS,YAAYI,EAAgBZ,EAAYU,EAAeC,EACrE,CAER,EAUAZ,EAAU9L,IAAM,SAASwM,EAAW3V,GAChC,IAAI+V,EAAU,GAAGvR,OAAOxE,GAExBsU,EAAOQ,QAAQa,EAAW,YAAa,CAAE3V,OAAQA,IAEjD,IAAK,IAAIzB,EAAI,EAAGA,EAAIwX,EAAQ3U,OAAQ7C,IAAK,CACrC,IAAIwC,EAAMgV,EAAQxX,GAElB,OAAQwC,EAAIwN,MAEZ,IAAK,OAED,GAAIxN,EAAIkQ,SAAWlQ,EAAK,CACpBT,EAAOqE,KAAK,wFACZ,KACJ,CAEAsQ,EAAUe,QAAQL,EAAW5U,GAC7B,MACJ,IAAK,aACDkU,EAAUgB,cAAcN,EAAW5U,GACnC,MACJ,IAAK,YACDkU,EAAUiB,aAAaP,EAAW5U,GAClC,MACJ,IAAK,kBACDkU,EAAUgB,cAAcN,EAAW5U,EAAIoV,YACvC,MAGR,CAIA,OAFA7B,EAAOQ,QAAQa,EAAW,WAAY,CAAE3V,OAAQA,IAEzC2V,CACX,EAYAV,EAAUmB,OAAS,SAAST,EAAW3V,EAAQgB,GAC3C,IAAI+U,EAAU,GAAGvR,OAAOxE,GAExBsU,EAAOQ,QAAQa,EAAW,eAAgB,CAAE3V,OAAQA,IAEpD,IAAK,IAAIzB,EAAI,EAAGA,EAAIwX,EAAQ3U,OAAQ7C,IAAK,CACrC,IAAIwC,EAAMgV,EAAQxX,GAElB,OAAQwC,EAAIwN,MAEZ,IAAK,OACD0G,EAAUoB,WAAWV,EAAW5U,EAAKC,GACrC,MACJ,IAAK,aACDiU,EAAUqB,iBAAiBX,EAAW5U,EAAKC,GAC3C,MACJ,IAAK,YACDiU,EAAUsB,gBAAgBZ,EAAW5U,EAAKC,GAC1C,MACJ,IAAK,kBACDiU,EAAUqB,iBAAiBX,EAAW5U,EAAIoV,YAC1C,MAGR,CAIA,OAFA7B,EAAOQ,QAAQa,EAAW,cAAe,CAAE3V,OAAQA,IAE5C2V,CACX,EAUAV,EAAUiB,aAAe,SAASM,EAAYC,GAI1C,OAHAD,EAAWnB,WAAW3T,KAAK+U,GAC3BA,EAAWxF,OAASuF,EACpBvB,EAAUS,YAAYc,GAAY,GAAM,GAAM,GACvCA,CACX,EAWAvB,EAAUsB,gBAAkB,SAASC,EAAYC,EAAYzV,GACzD,IAAI+G,EAAWzH,EAAO6E,QAAQqR,EAAWnB,WAAYoB,GAErD,IAAkB,IAAd1O,EAAiB,CACjB,IAAIoN,EAASF,EAAUM,UAAUkB,GAEjCxB,EAAUyB,kBAAkBF,EAAYzO,GAExC,IAAK,IAAIxJ,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAC/B4W,EAAO5W,GAAGoY,aAAe,CAEjC,CAEA,GAAI3V,EACA,IAASzC,EAAI,EAAGA,EAAIiY,EAAWnB,WAAWjU,OAAQ7C,IAC9C0W,EAAUsB,gBAAgBC,EAAWnB,WAAW9W,GAAIkY,GAAY,GAIxE,OAAOD,CACX,EAUAvB,EAAUyB,kBAAoB,SAASf,EAAW5N,GAG9C,OAFA4N,EAAUN,WAAWuB,OAAO7O,EAAU,GACtCkN,EAAUS,YAAYC,GAAW,GAAM,GAAM,GACtCA,CACX,EAUAV,EAAUe,QAAU,SAASL,EAAW5L,GAGpC,OAFA4L,EAAUR,OAAOzT,KAAKqI,GACtBkL,EAAUS,YAAYC,GAAW,GAAM,GAAM,GACtCA,CACX,EAWAV,EAAUoB,WAAa,SAASV,EAAW5L,EAAM/I,GAC7C,IAAI+G,EAAWzH,EAAO6E,QAAQwQ,EAAUR,OAAQpL,GAOhD,IALkB,IAAdhC,IACAkN,EAAU4B,aAAalB,EAAW5N,GAClCgC,EAAK4M,aAAe,GAGpB3V,EACA,IAAK,IAAIzC,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C0W,EAAUoB,WAAWV,EAAUN,WAAW9W,GAAIwL,GAAM,GAI5D,OAAO4L,CACX,EAUAV,EAAU4B,aAAe,SAASlB,EAAW5N,GAGzC,OAFA4N,EAAUR,OAAOyB,OAAO7O,EAAU,GAClCkN,EAAUS,YAAYC,GAAW,GAAM,GAAM,GACtCA,CACX,EAUAV,EAAUgB,cAAgB,SAASN,EAAWQ,GAG1C,OAFAR,EAAUP,YAAY1T,KAAKyU,GAC3BlB,EAAUS,YAAYC,GAAW,GAAM,GAAM,GACtCA,CACX,EAWAV,EAAUqB,iBAAmB,SAASX,EAAWQ,EAAYnV,GACzD,IAAI+G,EAAWzH,EAAO6E,QAAQwQ,EAAUP,YAAae,GAMrD,IAJkB,IAAdpO,GACAkN,EAAU6B,mBAAmBnB,EAAW5N,GAGxC/G,EACA,IAAK,IAAIzC,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C0W,EAAUqB,iBAAiBX,EAAUN,WAAW9W,GAAI4X,GAAY,GAIxE,OAAOR,CACX,EAUAV,EAAU6B,mBAAqB,SAASnB,EAAW5N,GAG/C,OAFA4N,EAAUP,YAAYwB,OAAO7O,EAAU,GACvCkN,EAAUS,YAAYC,GAAW,GAAM,GAAM,GACtCA,CACX,EAUAV,EAAU8B,MAAQ,SAASpB,EAAWqB,EAAYhW,GAC9C,GAAIA,EACA,IAAK,IAAIzC,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C0W,EAAU8B,MAAMpB,EAAUN,WAAW9W,GAAIyY,GAAY,GAe7D,OAXIA,EACArB,EAAUR,OAASQ,EAAUR,OAAO8B,QAAO,SAASlN,GAAQ,OAAOA,EAAKoF,QAAU,IAElFwG,EAAUR,OAAO/T,OAAS,EAG9BuU,EAAUP,YAAYhU,OAAS,EAC/BuU,EAAUN,WAAWjU,OAAS,EAE9B6T,EAAUS,YAAYC,GAAW,GAAM,GAAM,GAEtCA,CACX,EAQAV,EAAUM,UAAY,SAASI,GAC3B,GAAIA,EAAUL,OAASK,EAAUL,MAAMC,UACnC,OAAOI,EAAUL,MAAMC,UAK3B,IAFA,IAAIJ,EAAS,GAAG3Q,OAAOmR,EAAUR,QAExB5W,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C4W,EAASA,EAAO3Q,OAAOyQ,EAAUM,UAAUI,EAAUN,WAAW9W,KAMpE,OAJIoX,EAAUL,QACVK,EAAUL,MAAMC,UAAYJ,GAGzBA,CACX,EAQAF,EAAUO,eAAiB,SAASG,GAChC,GAAIA,EAAUL,OAASK,EAAUL,MAAME,eACnC,OAAOG,EAAUL,MAAME,eAK3B,IAFA,IAAIJ,EAAc,GAAG5Q,OAAOmR,EAAUP,aAE7B7W,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C6W,EAAcA,EAAY5Q,OAAOyQ,EAAUO,eAAeG,EAAUN,WAAW9W,KAMnF,OAJIoX,EAAUL,QACVK,EAAUL,MAAME,eAAiBJ,GAG9BA,CACX,EAQAH,EAAUQ,cAAgB,SAASE,GAC/B,GAAIA,EAAUL,OAASK,EAAUL,MAAMG,cACnC,OAAOE,EAAUL,MAAMG,cAK3B,IAFA,IAAIJ,EAAa,GAAG7Q,OAAOmR,EAAUN,YAE5B9W,EAAI,EAAGA,EAAIoX,EAAUN,WAAWjU,OAAQ7C,IAC7C8W,EAAaA,EAAW7Q,OAAOyQ,EAAUQ,cAAcE,EAAUN,WAAW9W,KAMhF,OAJIoX,EAAUL,QACVK,EAAUL,MAAMG,cAAgBJ,GAG7BA,CACX,EAUAJ,EAAU9V,IAAM,SAASwW,EAAWrH,EAAIC,GACpC,IAAIwH,EACA/V,EAEJ,OAAQuO,GACR,IAAK,OACDwH,EAAUd,EAAUM,UAAUI,GAC9B,MACJ,IAAK,aACDI,EAAUd,EAAUO,eAAeG,GACnC,MACJ,IAAK,YACDI,EAAUd,EAAUQ,cAAcE,GAAWnR,OAAOmR,GACpD,MAGJ,OAAKI,GAGL/V,EAAS+V,EAAQkB,QAAO,SAASjX,GAC7B,OAAOA,EAAOsO,GAAGpL,aAAeoL,EAAGpL,UACvC,IAEyB,IAAlBlD,EAAOoB,OAAe,KAAOpB,EAAO,IANhC,IAOf,EAUAiV,EAAUiC,KAAO,SAASV,EAAYT,EAASU,GAG3C,OAFAxB,EAAUmB,OAAOI,EAAYT,GAC7Bd,EAAU9L,IAAIsN,EAAYV,GACnBS,CACX,EAQAvB,EAAUkC,OAAS,SAASxB,GAKxB,IAJA,IAAII,EAAUd,EAAUM,UAAUI,GAC7BnR,OAAOyQ,EAAUO,eAAeG,IAChCnR,OAAOyQ,EAAUQ,cAAcE,IAE3BpX,EAAI,EAAGA,EAAIwX,EAAQ3U,OAAQ7C,IAChCwX,EAAQxX,GAAG+P,GAAKhO,EAAO4E,SAG3B,OAAOyQ,CACX,EAUAV,EAAUrN,UAAY,SAAS+N,EAAWlC,EAAa2D,GAGnD,IAFA,IAAIjC,EAASiC,EAAYnC,EAAUM,UAAUI,GAAaA,EAAUR,OAE3D5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAC/BqP,EAAKhG,UAAUuN,EAAO5W,GAAIkV,GAG9B,OAAOkC,CACX,EAUAV,EAAU3M,OAAS,SAASqN,EAAWjC,EAAUlM,EAAO4P,GAKpD,IAJA,IAAI3O,EAAMlG,KAAKkG,IAAIiL,GACfhL,EAAMnG,KAAKmG,IAAIgL,GACfyB,EAASiC,EAAYnC,EAAUM,UAAUI,GAAaA,EAAUR,OAE3D5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GACd6M,EAAKrB,EAAKhC,SAASd,EAAIO,EAAMP,EAC7BoE,EAAKtB,EAAKhC,SAASb,EAAIM,EAAMN,EAEjC0G,EAAKsE,YAAYnI,EAAM,CACnB9C,EAAGO,EAAMP,GAAKmE,EAAK3C,EAAM4C,EAAK3C,GAC9BxB,EAAGM,EAAMN,GAAKkE,EAAK1C,EAAM2C,EAAK5C,KAGlCmF,EAAKtF,OAAOyB,EAAM2J,EACtB,CAEA,OAAOiC,CACX,EAWAV,EAAUxJ,MAAQ,SAASkK,EAAWjK,EAAQC,EAAQnE,EAAO4P,GAGzD,IAFA,IAAIjC,EAASiC,EAAYnC,EAAUM,UAAUI,GAAaA,EAAUR,OAE3D5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GACd6M,EAAKrB,EAAKhC,SAASd,EAAIO,EAAMP,EAC7BoE,EAAKtB,EAAKhC,SAASb,EAAIM,EAAMN,EAEjC0G,EAAKsE,YAAYnI,EAAM,CACnB9C,EAAGO,EAAMP,EAAImE,EAAKM,EAClBxE,EAAGM,EAAMN,EAAImE,EAAKM,IAGtBiC,EAAKnC,MAAM1B,EAAM2B,EAAQC,EAC7B,CAEA,OAAOgK,CACX,EAQAV,EAAUjO,OAAS,SAAS2O,GAIxB,IAHA,IAAIR,EAASF,EAAUM,UAAUI,GAC7B5O,EAAW,GAENxI,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,GAAK,EAAG,CACvC,IAAIwL,EAAOoL,EAAO5W,GAClBwI,EAASrF,KAAKqI,EAAK/C,OAAOzD,IAAKwG,EAAK/C,OAAOxD,IAC/C,CAEA,OAAOsD,EAAOlH,OAAOmH,EACzB,CA6IH,EArsBD,EAwsBO,WAES/I,EAAQC,EAASI,GAQjC,IAAIwP,EAAW,CAAC,EAEhB7P,EAAOC,QAAU4P,EAEjB,IAAID,EAAOvP,EAAoB,GAC3BiW,EAASjW,EAAoB,GAC7BiC,EAASjC,EAAoB,IAEjC,WAEIwP,EAASwJ,qBAAuB,IAChCxJ,EAASyJ,sBAAwB,IACjCzJ,EAAS0J,SAAW,GAQpB1J,EAAS1G,OAAS,SAASgO,EAAQvJ,GAK/B,IAJA,IAAIqE,EAAYrE,EAAQtL,EAAOC,WAC3BiX,EAAuB3J,EAASyJ,sBAG3B/Y,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GACdwQ,EAAQnB,EAAK0F,SAASvJ,GACtBiF,EAAepB,EAAK4F,gBAAgBzJ,GACpCsF,EAASN,EAAQA,EAAQC,EAAeA,EAG5C,GAAqB,IAAjBjF,EAAK2E,MAAMzH,GAA4B,IAAjB8C,EAAK2E,MAAMxH,EAArC,CAKA,IAAIuQ,EAAYlV,KAAKgB,IAAIwG,EAAKsF,OAAQA,GAClCqI,EAAYnV,KAAKiB,IAAIuG,EAAKsF,OAAQA,GAGtCtF,EAAKsF,OAASxB,EAAS0J,SAAWE,GAAa,EAAI5J,EAAS0J,UAAYG,EAEpE3N,EAAKuF,eAAiB,GAAKvF,EAAKsF,OAASmI,GACzCzN,EAAK4M,cAAgB,EAEjB5M,EAAK4M,cAAgB5M,EAAKuF,eAAiBW,GAC3CpC,EAAS5L,IAAI8H,GAAM,IAEhBA,EAAK4M,aAAe,IAC3B5M,EAAK4M,cAAgB,EAfzB,MAFI9I,EAAS5L,IAAI8H,GAAM,EAmB3B,CACJ,EAOA8D,EAAS8J,gBAAkB,SAASC,GAIhC,IAHA,IAAIJ,EAAuB3J,EAASyJ,sBAG3B/Y,EAAI,EAAGA,EAAIqZ,EAAMxW,OAAQ7C,IAAK,CACnC,IAAIsZ,EAAOD,EAAMrZ,GAGjB,GAAKsZ,EAAKC,SAAV,CAGA,IAAIC,EAAYF,EAAKE,UACjBC,EAAQD,EAAUC,MAAM/G,OACxBgH,EAAQF,EAAUE,MAAMhH,OAG5B,KAAK+G,EAAM5I,YAAc6I,EAAM7I,YAAe4I,EAAM7I,UAAY8I,EAAM9I,YAGlE6I,EAAM5I,YAAc6I,EAAM7I,YAAY,CACtC,IAAI8I,EAAgBF,EAAM5I,aAAe4I,EAAM7I,SAAY6I,EAAQC,EAC/DE,EAAaD,IAAiBF,EAAQC,EAAQD,GAE7CE,EAAa/I,UAAYgJ,EAAW9I,OAASmI,GAC9C3J,EAAS5L,IAAIiW,GAAc,EAEnC,CAjBY,CAkBhB,CACJ,EAQArK,EAAS5L,IAAM,SAAS8H,EAAMqF,GAC1B,IAAIgJ,EAAcrO,EAAKqF,WAEnBA,GACArF,EAAKqF,YAAa,EAClBrF,EAAK4M,aAAe5M,EAAKuF,eAEzBvF,EAAK6E,gBAAgB3H,EAAI,EACzB8C,EAAK6E,gBAAgB1H,EAAI,EAEzB6C,EAAKgH,aAAa9J,EAAI8C,EAAKhC,SAASd,EACpC8C,EAAKgH,aAAa7J,EAAI6C,EAAKhC,SAASb,EAEpC6C,EAAKiH,UAAYjH,EAAKxB,MACtBwB,EAAKgF,MAAQ,EACbhF,EAAKiF,aAAe,EACpBjF,EAAKsF,OAAS,EAET+I,GACD9D,EAAOQ,QAAQ/K,EAAM,gBAGzBA,EAAKqF,YAAa,EAClBrF,EAAK4M,aAAe,EAEhByB,GACA9D,EAAOQ,QAAQ/K,EAAM,YAGjC,CAEH,EAvHD,EA0HO,WAES/L,EAAQC,EAASI,GAYjC,IAAIga,EAAY,CAAC,EAEjBra,EAAOC,QAAUoa,EAEjB,IAAIxO,EAAWxL,EAAoB,GAC/Bia,EAAOja,EAAoB,IAE/B,WACI,IAAIka,EAAY,GAEZC,EAAa,CACbC,QAAS,EACTC,KAAM,MAGNC,EAAa,CACbF,QAAS,EACTC,KAAM,MAUVL,EAAUzY,OAAS,SAASoY,EAAOC,GAC/B,MAAO,CACHJ,KAAM,KACNe,UAAU,EACVZ,MAAOA,EACPC,MAAOA,EACPY,QAASb,EAAM/G,OACf6H,QAASb,EAAMhH,OACf8H,MAAO,EACPC,OAAQ,CAAE/R,EAAG,EAAGC,EAAG,GACnB+R,QAAS,CAAEhS,EAAG,EAAGC,EAAG,GACpBgS,YAAa,CAAEjS,EAAG,EAAGC,EAAG,GACxBiS,SAAU,CAAC,KAAM,MACjBC,aAAc,EAEtB,EAUAf,EAAUgB,SAAW,SAASrB,EAAOC,EAAOL,GAGxC,GAFAS,EAAUiB,aAAad,EAAYR,EAAMjR,SAAUkR,EAAMlR,SAAUiR,EAAM9G,MAErEsH,EAAWC,SAAW,EACtB,OAAO,KAKX,GAFAJ,EAAUiB,aAAaX,EAAYV,EAAMlR,SAAUiR,EAAMjR,SAAUkR,EAAM/G,MAErEyH,EAAWF,SAAW,EACtB,OAAO,KAIX,IACIV,EAgBAwB,EAjBA1B,EAAOD,GAASA,EAAM4B,MAAMlB,EAAKhK,GAAG0J,EAAOC,IAG1CJ,EAQDE,EAAYF,EAAKE,WAPjBA,EAAYM,EAAUzY,OAAOoY,EAAOC,GACpCF,EAAUa,UAAW,EACrBb,EAAUC,MAAQA,EAAM1J,GAAK2J,EAAM3J,GAAK0J,EAAQC,EAChDF,EAAUE,MAAQD,EAAM1J,GAAK2J,EAAM3J,GAAK2J,EAAQD,EAChDD,EAAUc,QAAUd,EAAUC,MAAM/G,OACpC8G,EAAUe,QAAUf,EAAUE,MAAMhH,QAKxC+G,EAAQD,EAAUC,MAClBC,EAAQF,EAAUE,MAKdsB,EADAf,EAAWC,QAAUE,EAAWF,QACnBD,EAEAG,EAGjB,IAAIK,EAASjB,EAAUiB,OACnBC,EAAUlB,EAAUkB,QACpBC,EAAcnB,EAAUmB,YACxBC,EAAWpB,EAAUoB,SACrBJ,EAAQQ,EAAWd,QACnBgB,EAAUF,EAAWb,KACrBgB,EAAUD,EAAQxS,EAClB0S,EAAUF,EAAQvS,EAClBc,EAASiQ,EAAMlQ,SAASd,EAAI+Q,EAAMjQ,SAASd,EAC3CgB,EAASgQ,EAAMlQ,SAASb,EAAI8Q,EAAMjQ,SAASb,EAG3CwS,EAAU1R,EAAS2R,EAAU1R,GAAU,IACvCyR,GAAWA,EACXC,GAAWA,GAGfX,EAAO/R,EAAIyS,EACXV,EAAO9R,EAAIyS,EAEXV,EAAQhS,GAAK0S,EACbV,EAAQ/R,EAAIwS,EAEZR,EAAYjS,EAAIyS,EAAUX,EAC1BG,EAAYhS,EAAIyS,EAAUZ,EAE1BhB,EAAUgB,MAAQA,EAGlB,IAAIa,EAAYvB,EAAUwB,cAAc7B,EAAOC,EAAOe,EAAQ,GAC1DI,EAAe,EAYnB,GATIvP,EAAStC,SAASyQ,EAAMjR,SAAU6S,EAAU,MAC5CT,EAASC,KAAkBQ,EAAU,IAGrC/P,EAAStC,SAASyQ,EAAMjR,SAAU6S,EAAU,MAC5CT,EAASC,KAAkBQ,EAAU,IAIrCR,EAAe,EAAG,CAClB,IAAIU,EAAYzB,EAAUwB,cAAc5B,EAAOD,EAAOgB,GAAS,GAE3DnP,EAAStC,SAAS0Q,EAAMlR,SAAU+S,EAAU,MAC5CX,EAASC,KAAkBU,EAAU,IAGrCV,EAAe,GAAKvP,EAAStC,SAAS0Q,EAAMlR,SAAU+S,EAAU,MAChEX,EAASC,KAAkBU,EAAU,GAE7C,CAUA,OAPqB,IAAjBV,IACAD,EAASC,KAAkBQ,EAAU,IAIzC7B,EAAUqB,aAAeA,EAElBrB,CACX,EAWAM,EAAUiB,aAAe,SAAS1T,EAAQmU,EAAWC,EAAW9I,GAC5D,IASIuH,EACAwB,EACAC,EACArR,EACAtK,EACA+D,EAdA6X,EAAkBJ,EAAU3Y,OAC5BgZ,EAAkBJ,EAAU5Y,OAC5BiZ,EAAaN,EAAU,GAAG9S,EAC1BqT,EAAaP,EAAU,GAAG7S,EAC1BqT,EAAaP,EAAU,GAAG/S,EAC1BuT,EAAaR,EAAU,GAAG9S,EAC1BuT,EAAavJ,EAAK9P,OAClBsZ,EAAaC,OAAOC,UACpBC,EAAoB,EAQxB,IAAKtc,EAAI,EAAGA,EAAIkc,EAAYlc,IAAK,CAC7B,IAAIma,EAAOxH,EAAK3S,GACZuc,EAAQpC,EAAKzR,EACb8T,EAAQrC,EAAKxR,EACb8T,EAAOX,EAAaS,EAAQR,EAAaS,EACzCE,EAAOV,EAAaO,EAAQN,EAAaO,EACzCG,EAAOF,EACPG,EAAOF,EAEX,IAAK3Y,EAAI,EAAGA,EAAI6X,EAAiB7X,GAAK,EAClCuG,EAAMkR,EAAUzX,GAAG2E,EAAI6T,EAAQf,EAAUzX,GAAG4E,EAAI6T,EAE5ClS,EAAMqS,EACNA,EAAOrS,EACAA,EAAMmS,IACbA,EAAOnS,GAIf,IAAKvG,EAAI,EAAGA,EAAI8X,EAAiB9X,GAAK,EAClCuG,EAAMmR,EAAU1X,GAAG2E,EAAI6T,EAAQd,EAAU1X,GAAG4E,EAAI6T,EAE5ClS,EAAMsS,EACNA,EAAOtS,EACAA,EAAMoS,IACbA,EAAOpS,GAQf,GAJAoR,EAAYiB,EAAOD,EACnBf,EAAYiB,EAAOH,EACnBvC,EAAUwB,EAAYC,EAAYD,EAAYC,EAE1CzB,EAAUiC,IACVA,EAAajC,EACboC,EAAoBtc,EAEhBka,GAAW,GAEX,KAGZ,CAEA7S,EAAO8S,KAAOxH,EAAK2J,GACnBjV,EAAO6S,QAAUiC,CACrB,EAYArC,EAAUwB,cAAgB,SAAS7B,EAAOC,EAAOe,EAAQoC,GACrD,IASIC,EACAC,EACAhZ,EAXAyE,EAAWkR,EAAMlR,SACjBkE,EAAiBlE,EAAS3F,OAC1Bma,EAAiBvD,EAAMjQ,SAASd,EAChCuU,EAAiBxD,EAAMjQ,SAASb,EAChCwS,EAAUV,EAAO/R,EAAImU,EACrBzB,EAAUX,EAAO9R,EAAIkU,EACrBlO,EAAUnG,EAAS,GACnBoG,EAAUD,EACVuO,EAAkB/B,GAAW6B,EAAiBpO,EAAQlG,GAAK0S,GAAW6B,EAAiBrO,EAAQjG,GAMnG,IAAK5E,EAAI,EAAGA,EAAI2I,EAAgB3I,GAAK,EACjC6K,EAAUpG,EAASzE,GACnBgZ,EAAW5B,GAAW6B,EAAiBpO,EAAQlG,GAAK0S,GAAW6B,EAAiBrO,EAAQjG,GAGpFoU,EAAWG,IACXA,EAAkBH,EAClBpO,EAAUC,GAUlB,OALAkO,EAAUtU,GAAUkE,EAAiBiC,EAAQlD,MAAQ,GAAKiB,GAC1DwQ,EAAkB/B,GAAW6B,EAAiBF,EAAQpU,GAAK0S,GAAW6B,EAAiBH,EAAQnU,GAG/FiG,EAAUpG,GAAUmG,EAAQlD,MAAQ,GAAKiB,GACrCyO,GAAW6B,EAAiBpO,EAAQlG,GAAK0S,GAAW6B,EAAiBrO,EAAQjG,GAAKuU,GAClFlD,EAAU,GAAKrL,EACfqL,EAAU,GAAKpL,EAERoL,IAGXA,EAAU,GAAKrL,EACfqL,EAAU,GAAK8C,EAER9C,EACX,CA6GH,EAjYD,EAoYO,WAESva,EAAQC,EAASI,GAQjC,IAAIia,EAAO,CAAC,EAEZta,EAAOC,QAAUqa,EAEjB,IAAIoD,EAAUrd,EAAoB,KAElC,WASIia,EAAK1Y,OAAS,SAASmY,EAAW4D,GAC9B,IAAI3D,EAAQD,EAAUC,MAClBC,EAAQF,EAAUE,MAElBJ,EAAO,CACPvJ,GAAIgK,EAAKhK,GAAG0J,EAAOC,GACnBD,MAAOA,EACPC,MAAOA,EACPF,UAAWA,EACX6D,SAAU,CAACF,EAAQ9b,SAAU8b,EAAQ9b,UACrCic,aAAc,EACdC,WAAY,EACZhE,UAAU,EACV5I,SAAU8I,EAAM9I,UAAY+I,EAAM/I,SAClC6M,YAAaJ,EACbK,YAAaL,EACbhJ,YAAa,EACblD,SAAU,EACVC,eAAgB,EAChBF,YAAa,EACbQ,KAAM,GAKV,OAFAsI,EAAKnR,OAAO0Q,EAAME,EAAW4D,GAEtB9D,CACX,EASAS,EAAKnR,OAAS,SAAS0Q,EAAME,EAAW4D,GACpC,IAAIxC,EAAWpB,EAAUoB,SACrBC,EAAerB,EAAUqB,aACzBwC,EAAW/D,EAAK+D,SAChB/C,EAAUd,EAAUc,QACpBC,EAAUf,EAAUe,QAExBjB,EAAKC,UAAW,EAChBD,EAAKmE,YAAcL,EACnB9D,EAAKE,UAAYA,EACjBF,EAAKiE,WAAa/D,EAAUgB,MAC5BlB,EAAKlF,YAAckG,EAAQlG,YAAcmG,EAAQnG,YACjDkF,EAAKpI,SAAWoJ,EAAQpJ,SAAWqJ,EAAQrJ,SAAWoJ,EAAQpJ,SAAWqJ,EAAQrJ,SACjFoI,EAAKnI,eAAiBmJ,EAAQnJ,eAAiBoJ,EAAQpJ,eAAiBmJ,EAAQnJ,eAAiBoJ,EAAQpJ,eACzGmI,EAAKrI,YAAcqJ,EAAQrJ,YAAcsJ,EAAQtJ,YAAcqJ,EAAQrJ,YAAcsJ,EAAQtJ,YAC7FqI,EAAK7H,KAAO6I,EAAQ7I,KAAO8I,EAAQ9I,KAAO6I,EAAQ7I,KAAO8I,EAAQ9I,KAEjE6H,EAAKgE,aAAezC,EACpBrB,EAAUF,KAAOA,EAEjB,IAAIoE,EAAW9C,EAAS,GACpB+C,EAAWN,EAAS,GACpBO,EAAWhD,EAAS,GACpBiD,EAAWR,EAAS,GAGpBQ,EAAS9U,SAAW2U,GAAYC,EAAS5U,SAAW6U,IACpDP,EAAS,GAAKM,EACdN,EAAS,GAAKM,EAAWE,EACzBA,EAAWR,EAAS,IAIxBM,EAAS5U,OAAS2U,EAClBG,EAAS9U,OAAS6U,CACtB,EASA7D,EAAK+D,UAAY,SAASxE,EAAMC,EAAU6D,GAClC7D,GACAD,EAAKC,UAAW,EAChBD,EAAKmE,YAAcL,IAEnB9D,EAAKC,UAAW,EAChBD,EAAKgE,aAAe,EAE5B,EASAvD,EAAKhK,GAAK,SAAS0J,EAAOC,GACtB,OAAOD,EAAM1J,GAAK2J,EAAM3J,GAAK0J,EAAM1J,GAAGpL,SAAS,IAAM,IAAM+U,EAAM3J,GAAGpL,SAAS,IACvE+U,EAAM3J,GAAGpL,SAAS,IAAM,IAAM8U,EAAM1J,GAAGpL,SAAS,GAC1D,CAEH,EA9GD,EAiHO,WAESlF,EAAQC,EAASI,GAYjC,IAAIie,EAAa,CAAC,EAElBte,EAAOC,QAAUqe,EAEjB,IAAIzS,EAAWxL,EAAoB,GAC/B6J,EAAS7J,EAAoB,GAC7BwP,EAAWxP,EAAoB,GAC/ByI,EAASzI,EAAoB,GAC7ByP,EAAOzP,EAAoB,IAC3BiC,EAASjC,EAAoB,IAEjC,WAEIie,EAAWC,SAAW,GACtBD,EAAWE,cAAgB,EAC3BF,EAAWG,WAAa,KAaxBH,EAAW1c,OAAS,SAASwO,GACzB,IAAI+H,EAAa/H,EAGb+H,EAAW6B,QAAU7B,EAAWuG,SAChCvG,EAAWuG,OAAS,CAAEzV,EAAG,EAAGC,EAAG,IAC/BiP,EAAW8B,QAAU9B,EAAWwG,SAChCxG,EAAWwG,OAAS,CAAE1V,EAAG,EAAGC,EAAG,IAGnC,IAAI0V,EAAgBzG,EAAW6B,MAAQ9P,EAAOiB,IAAIgN,EAAW6B,MAAMjQ,SAAUoO,EAAWuG,QAAUvG,EAAWuG,OACzGG,EAAgB1G,EAAW8B,MAAQ/P,EAAOiB,IAAIgN,EAAW8B,MAAMlQ,SAAUoO,EAAWwG,QAAUxG,EAAWwG,OACzGvb,EAAS8G,EAAOC,UAAUD,EAAOkB,IAAIwT,EAAeC,IAExD1G,EAAW/U,OAAsC,qBAAtB+U,EAAW/U,OAAyB+U,EAAW/U,OAASA,EAGnF+U,EAAW7H,GAAK6H,EAAW7H,IAAMhO,EAAO4E,SACxCiR,EAAW3H,MAAQ2H,EAAW3H,OAAS,aACvC2H,EAAW5H,KAAO,aAClB4H,EAAW2G,UAAY3G,EAAW2G,YAAc3G,EAAW/U,OAAS,EAAI,EAAI,IAC5E+U,EAAW4G,QAAU5G,EAAW4G,SAAW,EAC3C5G,EAAW6G,iBAAmB7G,EAAW6G,kBAAoB,EAC7D7G,EAAW8G,OAAS9G,EAAW6B,MAAQ7B,EAAW6B,MAAMzP,MAAQ4N,EAAW8G,OAC3E9G,EAAW+G,OAAS/G,EAAW8B,MAAQ9B,EAAW8B,MAAM1P,MAAQ4N,EAAW+G,OAC3E/G,EAAW1H,OAAS,CAAC,EAGrB,IAAIyB,EAAS,CACTC,SAAS,EACTI,UAAW,EACXF,YAAa,UACb9B,KAAM,OACN4O,SAAS,GAYb,OAT0B,IAAtBhH,EAAW/U,QAAgB+U,EAAW2G,UAAY,IAClD5M,EAAO3B,KAAO,MACd2B,EAAOiN,SAAU,GACVhH,EAAW2G,UAAY,KAC9B5M,EAAO3B,KAAO,UAGlB4H,EAAWjG,OAAS5P,EAAOQ,OAAOoP,EAAQiG,EAAWjG,QAE9CiG,CACX,EAQAmG,EAAWc,YAAc,SAASjI,GAC9B,IAAK,IAAI5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,GAAK,EAAG,CACvC,IAAIwL,EAAOoL,EAAO5W,GACd8e,EAAUtT,EAAK8E,kBAEf9E,EAAKoF,UAA2B,IAAdkO,EAAQpW,GAAyB,IAAdoW,EAAQnW,GAA6B,IAAlBmW,EAAQ9U,QAIpEwB,EAAKhC,SAASd,GAAKoW,EAAQpW,EAC3B8C,EAAKhC,SAASb,GAAKmW,EAAQnW,EAC3B6C,EAAKxB,OAAS8U,EAAQ9U,MAC1B,CACJ,EASA+T,EAAWgB,SAAW,SAASlI,EAAaxJ,GAIxC,IAHA,IAAIqE,EAAY3P,EAAOgD,MAAMsI,EAAQtL,EAAOC,WAAY,EAAG,GAGlDhC,EAAI,EAAGA,EAAI6W,EAAYhU,OAAQ7C,GAAK,EAAG,CAC5C,IAAI4X,EAAaf,EAAY7W,GACzBgf,GAAUpH,EAAW6B,OAAU7B,EAAW6B,OAAS7B,EAAW6B,MAAM7I,SACpEqO,GAAUrH,EAAW8B,OAAU9B,EAAW8B,OAAS9B,EAAW8B,MAAM9I,UAEpEoO,GAAUC,IACVlB,EAAWmB,MAAMrI,EAAY7W,GAAI0R,EAEzC,CAGA,IAAK1R,EAAI,EAAGA,EAAI6W,EAAYhU,OAAQ7C,GAAK,EACrC4X,EAAaf,EAAY7W,GACzBgf,GAAUpH,EAAW6B,OAAU7B,EAAW6B,OAAS7B,EAAW6B,MAAM7I,SACpEqO,GAAUrH,EAAW8B,OAAU9B,EAAW8B,OAAS9B,EAAW8B,MAAM9I,SAE/DoO,GAAWC,GACZlB,EAAWmB,MAAMrI,EAAY7W,GAAI0R,EAG7C,EASAqM,EAAWmB,MAAQ,SAAStH,EAAYlG,GACpC,IAAI+H,EAAQ7B,EAAW6B,MACnBC,EAAQ9B,EAAW8B,MACnByE,EAASvG,EAAWuG,OACpBC,EAASxG,EAAWwG,OAExB,GAAK3E,GAAUC,EAAf,CAIID,IAAUA,EAAM7I,WAChBjH,EAAOI,OAAOoU,EAAQ1E,EAAMzP,MAAQ4N,EAAW8G,OAAQP,GACvDvG,EAAW8G,OAASjF,EAAMzP,OAI1B0P,IAAUA,EAAM9I,WAChBjH,EAAOI,OAAOqU,EAAQ1E,EAAM1P,MAAQ4N,EAAW+G,OAAQP,GACvDxG,EAAW+G,OAASjF,EAAM1P,OAG9B,IAAImV,EAAchB,EACdiB,EAAchB,EAKlB,GAHI3E,IAAO0F,EAAcxV,EAAOiB,IAAI6O,EAAMjQ,SAAU2U,IAChDzE,IAAO0F,EAAczV,EAAOiB,IAAI8O,EAAMlQ,SAAU4U,IAE/Ce,GAAgBC,EAArB,CAGA,IAAI/R,EAAQ1D,EAAOkB,IAAIsU,EAAaC,GAChCC,EAAgB1V,EAAOC,UAAUyD,GAGjCgS,EAAgBtB,EAAWG,aAC3BmB,EAAgBtB,EAAWG,YAI/B,IASI9N,EACAkP,EACA7E,EACA8E,EACAC,EAbAC,GAAcJ,EAAgBzH,EAAW/U,QAAUwc,EACnDK,EAAU9H,EAAW2G,WAAa,GAA2B,IAAtB3G,EAAW/U,OAClD0b,EAAYmB,EAAU9H,EAAW2G,UAAY7M,EACvCkG,EAAW2G,UAAY7M,EAAYA,EACzC8M,EAAU5G,EAAW4G,QAAU9M,EAC/BvB,EAAQxG,EAAOmB,KAAKuC,EAAOoS,EAAalB,GACxCoB,GAAalG,EAAQA,EAAMrF,YAAc,IAAMsF,EAAQA,EAAMtF,YAAc,GAC3EwL,GAAgBnG,EAAQA,EAAMpF,eAAiB,IAAMqF,EAAQA,EAAMrF,eAAiB,GACpFwL,EAAkBF,EAAYC,EAOlC,GAAIpB,EAAU,EAAG,CACb,IAAIsB,EAAOnW,EAAOtI,SAClBoZ,EAAS9Q,EAAOqB,IAAIqC,EAAOgS,GAE3BG,EAAmB7V,EAAOkB,IACtB6O,GAAS/P,EAAOkB,IAAI6O,EAAMlQ,SAAUkQ,EAAMlH,eAAiBsN,EAC3DrG,GAAS9P,EAAOkB,IAAI4O,EAAMjQ,SAAUiQ,EAAMjH,eAAiBsN,GAG/DP,EAAiB5V,EAAOW,IAAImQ,EAAQ+E,EACxC,CAEI/F,IAAUA,EAAM7I,WAChB0O,EAAQ7F,EAAMrF,YAAcuL,EAG5BlG,EAAMnJ,kBAAkB5H,GAAKyH,EAAMzH,EAAI4W,EACvC7F,EAAMnJ,kBAAkB3H,GAAKwH,EAAMxH,EAAI2W,EAGvC7F,EAAMjQ,SAASd,GAAKyH,EAAMzH,EAAI4W,EAC9B7F,EAAMjQ,SAASb,GAAKwH,EAAMxH,EAAI2W,EAG1Bd,EAAU,IACV/E,EAAMjH,aAAa9J,GAAK8V,EAAU/D,EAAO/R,EAAI6W,EAAiBD,EAC9D7F,EAAMjH,aAAa7J,GAAK6V,EAAU/D,EAAO9R,EAAI4W,EAAiBD,GAIlElP,EAAUzG,EAAOc,MAAM0T,EAAQhO,GAAS0P,EAAmB9B,EAAWE,cAAgBxE,EAAMpF,gBAAkB,EAAIuD,EAAW6G,kBAC7HhF,EAAMnJ,kBAAkBtG,OAASoG,EACjCqJ,EAAMzP,OAASoG,GAGfsJ,IAAUA,EAAM9I,WAChB0O,EAAQ5F,EAAMtF,YAAcuL,EAG5BjG,EAAMpJ,kBAAkB5H,GAAKyH,EAAMzH,EAAI4W,EACvC5F,EAAMpJ,kBAAkB3H,GAAKwH,EAAMxH,EAAI2W,EAGvC5F,EAAMlQ,SAASd,GAAKyH,EAAMzH,EAAI4W,EAC9B5F,EAAMlQ,SAASb,GAAKwH,EAAMxH,EAAI2W,EAG1Bd,EAAU,IACV9E,EAAMlH,aAAa9J,GAAK8V,EAAU/D,EAAO/R,EAAI6W,EAAiBD,EAC9D5F,EAAMlH,aAAa7J,GAAK6V,EAAU/D,EAAO9R,EAAI4W,EAAiBD,GAIlElP,EAAUzG,EAAOc,MAAM2T,EAAQjO,GAAS0P,EAAmB9B,EAAWE,cAAgBvE,EAAMrF,gBAAkB,EAAIuD,EAAW6G,kBAC7H/E,EAAMpJ,kBAAkBtG,OAASoG,EACjCsJ,EAAM1P,OAASoG,EAjFT,CArBA,CAyGd,EAQA2N,EAAWgC,aAAe,SAASnJ,GAC/B,IAAK,IAAI5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GACd8e,EAAUtT,EAAK8E,kBAEnB,KAAI9E,EAAKoF,UAA2B,IAAdkO,EAAQpW,GAAyB,IAAdoW,EAAQnW,GAA6B,IAAlBmW,EAAQ9U,OAApE,CAIAsF,EAAS5L,IAAI8H,GAAM,GAGnB,IAAK,IAAIzH,EAAI,EAAGA,EAAIyH,EAAK5H,MAAMf,OAAQkB,IAAK,CACxC,IAAIoQ,EAAO3I,EAAK5H,MAAMG,GAEtBuH,EAASjC,UAAU8K,EAAK3L,SAAUsW,GAE9B/a,EAAI,IACJoQ,EAAK3K,SAASd,GAAKoW,EAAQpW,EAC3ByL,EAAK3K,SAASb,GAAKmW,EAAQnW,GAGT,IAAlBmW,EAAQ9U,QACRsB,EAASvB,OAAOoK,EAAK3L,SAAUsW,EAAQ9U,MAAOwB,EAAKhC,UACnD+F,EAAKxF,OAAOoK,EAAKxB,KAAMmM,EAAQ9U,OAC3BjG,EAAI,GACJ4F,EAAOS,YAAY+J,EAAK3K,SAAUsV,EAAQ9U,MAAOwB,EAAKhC,SAAU2K,EAAK3K,WAI7EjB,EAAOK,OAAOuL,EAAK1L,OAAQ0L,EAAK3L,SAAUgD,EAAK3C,SACnD,CAGAiW,EAAQ9U,OAAS+T,EAAWC,SAC5Bc,EAAQpW,GAAKqV,EAAWC,SACxBc,EAAQnW,GAAKoV,EAAWC,QA7BxB,CA8BJ,CACJ,EAQAD,EAAWoB,YAAc,SAASvH,GAC9B,MAAO,CACHlP,GAAIkP,EAAW6B,MAAQ7B,EAAW6B,MAAMjQ,SAASd,EAAI,IAC9CkP,EAAWuG,OAASvG,EAAWuG,OAAOzV,EAAI,GACjDC,GAAIiP,EAAW6B,MAAQ7B,EAAW6B,MAAMjQ,SAASb,EAAI,IAC9CiP,EAAWuG,OAASvG,EAAWuG,OAAOxV,EAAI,GAEzD,EAQAoV,EAAWqB,YAAc,SAASxH,GAC9B,MAAO,CACHlP,GAAIkP,EAAW8B,MAAQ9B,EAAW8B,MAAMlQ,SAASd,EAAI,IAC9CkP,EAAWwG,OAASxG,EAAWwG,OAAO1V,EAAI,GACjDC,GAAIiP,EAAW8B,MAAQ9B,EAAW8B,MAAMlQ,SAASb,EAAI,IAC9CiP,EAAWwG,OAASxG,EAAWwG,OAAOzV,EAAI,GAEzD,EAUAoV,EAAWsB,cAAgB,SAASzH,GAChC,IAAIoI,GAAWpI,EAAW6B,MAAQ7B,EAAW6B,MAAMjQ,SAASd,EAAI,IACzDkP,EAAWuG,OAASvG,EAAWuG,OAAOzV,EAAI,GAE7CuX,GAAWrI,EAAW6B,MAAQ7B,EAAW6B,MAAMjQ,SAASb,EAAI,IACzDiP,EAAWuG,OAASvG,EAAWuG,OAAOxV,EAAI,GAE7CuX,GAAWtI,EAAW8B,MAAQ9B,EAAW8B,MAAMlQ,SAASd,EAAI,IACzDkP,EAAWwG,OAASxG,EAAWwG,OAAO1V,EAAI,GAE7CyX,GAAWvI,EAAW8B,MAAQ9B,EAAW8B,MAAMlQ,SAASb,EAAI,IACzDiP,EAAWwG,OAASxG,EAAWwG,OAAOzV,EAAI,GAE7Cc,EAASuW,EAAUE,EACnBxW,EAASuW,EAAUE,EAEvB,OAAOnc,KAAK6F,KAAKJ,EAASA,EAASC,EAASA,EAChD,CAwJH,EA7eD,EAgfO,WAESjK,EAAQC,EAASI,GAQjC,IAAIyP,EAAO,CAAC,EAEZ9P,EAAOC,QAAU6P,EAEjB,IAAI5F,EAAS7J,EAAoB,GAC7BiC,EAASjC,EAAoB,IAEjC,WAQIyP,EAAKgF,aAAe,SAAS/L,GAIzB,IAHA,IAAImK,EAAO,CAAC,EAGH3S,EAAI,EAAGA,EAAIwI,EAAS3F,OAAQ7C,IAAK,CACtC,IAAI+D,GAAK/D,EAAI,GAAKwI,EAAS3F,OACvB4X,EAAS9Q,EAAOU,UAAU,CACtB3B,EAAGF,EAASzE,GAAG4E,EAAIH,EAASxI,GAAG2I,EAC/BA,EAAGH,EAASxI,GAAG0I,EAAIF,EAASzE,GAAG2E,IAEnC0X,EAAyB,IAAb3F,EAAO9R,EAAWG,IAAY2R,EAAO/R,EAAI+R,EAAO9R,EAGhEyX,EAAWA,EAASC,QAAQ,GAAG1b,WAC/BgO,EAAKyN,GAAY3F,CACrB,CAEA,OAAO1Y,EAAOqB,OAAOuP,EACzB,EAQApD,EAAKxF,OAAS,SAAS4I,EAAM3I,GACzB,GAAc,IAAVA,EAMJ,IAHA,IAAIE,EAAMlG,KAAKkG,IAAIF,GACfG,EAAMnG,KAAKmG,IAAIH,GAEVhK,EAAI,EAAGA,EAAI2S,EAAK9P,OAAQ7C,IAAK,CAClC,IACIsgB,EADAnG,EAAOxH,EAAK3S,GAEhBsgB,EAAKnG,EAAKzR,EAAIwB,EAAMiQ,EAAKxR,EAAIwB,EAC7BgQ,EAAKxR,EAAIwR,EAAKzR,EAAIyB,EAAMgQ,EAAKxR,EAAIuB,EACjCiQ,EAAKzR,EAAI4X,CACb,CACJ,CAEH,EAlDD,EAqDO,WAES7gB,EAAQC,EAASI,GAajC,IAAIygB,EAAS,CAAC,EAEd9gB,EAAOC,QAAU6gB,EAEjB,IAAIjV,EAAWxL,EAAoB,GAC/BiC,EAASjC,EAAoB,GAC7BuP,EAAOvP,EAAoB,GAC3ByI,EAASzI,EAAoB,GAC7B6J,EAAS7J,EAAoB,IAEjC,WAcIygB,EAAOC,UAAY,SAAS9X,EAAGC,EAAG8X,EAAOC,EAAQ7Q,GAC7CA,EAAUA,GAAW,CAAC,EAEtB,IAAI2Q,EAAY,CACZvQ,MAAO,iBACPzG,SAAU,CAAEd,EAAGA,EAAGC,EAAGA,GACrBH,SAAU8C,EAASK,SAAS,WAAa8U,EAAQ,QAAUA,EAAQ,IAAMC,EAAS,QAAUA,IAGhG,GAAI7Q,EAAQvC,QAAS,CACjB,IAAIA,EAAUuC,EAAQvC,QACtBkT,EAAUhY,SAAW8C,EAASgC,QAAQkT,EAAUhY,SAAU8E,EAAQC,OAC9DD,EAAQE,QAASF,EAAQG,WAAYH,EAAQI,mBAC1CmC,EAAQvC,OACnB,CAEA,OAAO+B,EAAKhO,OAAOU,EAAOQ,OAAO,CAAC,EAAGie,EAAW3Q,GACpD,EAgBA0Q,EAAOI,UAAY,SAASjY,EAAGC,EAAG8X,EAAOC,EAAQE,EAAO/Q,GACpDA,EAAUA,GAAW,CAAC,EAElB+Q,GAAS,GACT7e,EAAOqE,KAAK,kDAGhBwa,GAAS,GACT,IAKIC,EALAC,GAAQ,EAAa,EAARF,GAAcH,EAE3BM,EAAKN,EAAQG,EACbI,EAAKD,EAAKD,EACVG,EAAKD,EAAKD,EAIVF,EADAD,EAAQ,GACO,WAAaG,EAAK,KAAQL,EAAU,MAAQM,EAAK,KAAQN,EAAU,MAAQO,EAAK,KAEhF,WAAaD,EAAK,KAAQN,EAAU,MAAQO,EAAK,KAGpE,IAAIN,EAAY,CACZ1Q,MAAO,iBACPzG,SAAU,CAAEd,EAAGA,EAAGC,EAAGA,GACrBH,SAAU8C,EAASK,SAASkV,IAGhC,GAAIhR,EAAQvC,QAAS,CACjB,IAAIA,EAAUuC,EAAQvC,QACtBqT,EAAUnY,SAAW8C,EAASgC,QAAQqT,EAAUnY,SAAU8E,EAAQC,OAC9DD,EAAQE,QAASF,EAAQG,WAAYH,EAAQI,mBAC1CmC,EAAQvC,OACnB,CAEA,OAAO+B,EAAKhO,OAAOU,EAAOQ,OAAO,CAAC,EAAGoe,EAAW9Q,GACpD,EAcA0Q,EAAOW,OAAS,SAASxY,EAAGC,EAAG4E,EAAQsC,EAASsR,GAC5CtR,EAAUA,GAAW,CAAC,EAEtB,IAAIqR,EAAS,CACTjR,MAAO,cACPsC,aAAchF,GAIlB4T,EAAWA,GAAY,GACvB,IAAIC,EAAQpd,KAAKqd,KAAKrd,KAAKiB,IAAI,GAAIjB,KAAKgB,IAAImc,EAAU5T,KAMtD,OAHI6T,EAAQ,IAAM,IACdA,GAAS,GAENb,EAAOe,QAAQ5Y,EAAGC,EAAGyY,EAAO7T,EAAQxL,EAAOQ,OAAO,CAAC,EAAG2e,EAAQrR,GACzE,EAcA0Q,EAAOe,QAAU,SAAS5Y,EAAGC,EAAGyY,EAAO7T,EAAQsC,GAG3C,GAFAA,EAAUA,GAAW,CAAC,EAElBuR,EAAQ,EACR,OAAOb,EAAOW,OAAOxY,EAAGC,EAAG4E,EAAQsC,GAMvC,IAJA,IAAIrB,EAAQ,EAAIxK,KAAKud,GAAKH,EACtB/d,EAAO,GACPwS,EAAiB,GAARrH,EAEJxO,EAAI,EAAGA,EAAIohB,EAAOphB,GAAK,EAAG,CAC/B,IAAIgK,EAAQ6L,EAAU7V,EAAIwO,EACtB8R,EAAKtc,KAAKkG,IAAIF,GAASuD,EACvBiU,EAAKxd,KAAKmG,IAAIH,GAASuD,EAE3BlK,GAAQ,KAAOid,EAAGD,QAAQ,GAAK,IAAMmB,EAAGnB,QAAQ,GAAK,GACzD,CAEA,IAAIiB,EAAU,CACVrR,MAAO,eACPzG,SAAU,CAAEd,EAAGA,EAAGC,EAAGA,GACrBH,SAAU8C,EAASK,SAAStI,IAGhC,GAAIwM,EAAQvC,QAAS,CACjB,IAAIA,EAAUuC,EAAQvC,QACtBgU,EAAQ9Y,SAAW8C,EAASgC,QAAQgU,EAAQ9Y,SAAU8E,EAAQC,OAC1DD,EAAQE,QAASF,EAAQG,WAAYH,EAAQI,mBAC1CmC,EAAQvC,OACnB,CAEA,OAAO+B,EAAKhO,OAAOU,EAAOQ,OAAO,CAAC,EAAG+e,EAASzR,GAClD,EAoCA0Q,EAAOhM,aAAe,SAAS7L,EAAGC,EAAG8Y,EAAY5R,EAAS6R,EAAcC,EAAiBC,EAAaC,GAClG,IACIC,EACAtW,EACA5H,EACAiL,EACAkT,EACAvZ,EACAxI,EACA+D,EACA+K,EACArC,EACAsC,EAXA5G,EAASpG,EAAOqG,YA6BpB,IAfA0Z,EAAYE,QAAQ7Z,GAAUA,EAAO8Z,aAErCpS,EAAUA,GAAW,CAAC,EACtBjM,EAAQ,GAER8d,EAAuC,qBAAjBA,GAA+BA,EACrDC,EAA6C,qBAApBA,EAAkCA,EAAkB,IAC7EC,EAAqC,qBAAhBA,EAA8BA,EAAc,GACjEC,EAAyD,qBAA1BA,EAAwCA,EAAwB,IAG1F9f,EAAO2C,QAAQ+c,EAAW,MAC3BA,EAAa,CAACA,IAGbhV,EAAI,EAAGA,EAAIgV,EAAW5e,OAAQ4J,GAAK,EAWpC,GAVAjE,EAAWiZ,EAAWhV,GACtBoC,EAAWvD,EAASuD,SAASrG,GAC7BuZ,GAAalT,EAETkT,IAAcD,GACd/f,EAAOsE,SACH,kJAIJwI,IAAaiT,EAETtZ,EADAqG,EACWvD,EAASmD,cAAcjG,GAGvB8C,EAAS2D,KAAKzG,GAG7B5E,EAAMT,KAAK,CACPqG,SAAU,CAAEd,EAAGA,EAAGC,EAAGA,GACrBH,SAAUA,QAEX,CAEH,IAAI0Z,EAAU1Z,EAASzB,KAAI,SAASgC,GAChC,MAAO,CAACA,EAAOL,EAAGK,EAAOJ,EAC7B,IAGAR,EAAOga,QAAQD,IACS,IAApBP,GACAxZ,EAAOia,sBAAsBF,EAASP,IACZ,IAA1BE,GAAmC1Z,EAAO0Z,uBAC1C1Z,EAAO0Z,sBAAsBK,EAASL,GAG1C,IAAIQ,EAAala,EAAO8Z,YAAYC,GAGpC,IAAKliB,EAAI,EAAGA,EAAIqiB,EAAWxf,OAAQ7C,IAAK,CACpC,IAAIsiB,EAAQD,EAAWriB,GAGnBuiB,EAAgBD,EAAMvb,KAAI,SAASyB,GACnC,MAAO,CACHE,EAAGF,EAAS,GACZG,EAAGH,EAAS,GAEpB,IAGIoZ,EAAc,GAAKtW,EAASU,KAAKuW,GAAiBX,GAItDhe,EAAMT,KAAK,CACPqG,SAAU8B,EAASS,OAAOwW,GAC1B/Z,SAAU+Z,GAElB,CACJ,CAIJ,IAAKviB,EAAI,EAAGA,EAAI4D,EAAMf,OAAQ7C,IAC1B4D,EAAM5D,GAAKqP,EAAKhO,OAAOU,EAAOQ,OAAOqB,EAAM5D,GAAI6P,IAInD,GAAI6R,EAAc,CACd,IAAIc,EAAsB,EAE1B,IAAKxiB,EAAI,EAAGA,EAAI4D,EAAMf,OAAQ7C,IAAK,CAC/B,IAAIyiB,EAAQ7e,EAAM5D,GAElB,IAAK+D,EAAI/D,EAAI,EAAG+D,EAAIH,EAAMf,OAAQkB,IAAK,CACnC,IAAI2e,EAAQ9e,EAAMG,GAElB,GAAIwE,EAAOW,SAASuZ,EAAMha,OAAQia,EAAMja,QAAS,CAC7C,IAAIka,EAAMF,EAAMja,SACZoa,EAAMF,EAAMla,SAGhB,IAAKsG,EAAI,EAAGA,EAAI2T,EAAMja,SAAS3F,OAAQiM,IACnC,IAAKC,EAAI,EAAGA,EAAI2T,EAAMla,SAAS3F,OAAQkM,IAAK,CAExC,IAAI8T,EAAKlZ,EAAOG,iBAAiBH,EAAOkB,IAAI8X,GAAK7T,EAAI,GAAK6T,EAAI9f,QAAS+f,EAAI7T,KACvE+T,EAAKnZ,EAAOG,iBAAiBH,EAAOkB,IAAI8X,EAAI7T,GAAI8T,GAAK7T,EAAI,GAAK6T,EAAI/f,UAGlEggB,EAAKL,GAAuBM,EAAKN,IACjCG,EAAI7T,GAAGpD,YAAa,EACpBkX,EAAI7T,GAAGrD,YAAa,EAE5B,CAGR,CACJ,CACJ,CACJ,CAEA,OAAI9H,EAAMf,OAAS,GAEf2I,EAAO6D,EAAKhO,OAAOU,EAAOQ,OAAO,CAAEqB,MAAOA,EAAMH,MAAM,IAAMoM,IAG5DR,EAAKsE,YAAYnI,EAAM,CAAE9C,EAAGA,EAAGC,EAAGA,IAE3B6C,GAEA5H,EAAM,EAErB,CAEH,EArVD,EAwVO,WAESnE,EAAQC,EAASI,GAQjC,IAAIijB,EAAW,CAAC,EAEhBtjB,EAAOC,QAAUqjB,EAEjB,IAAIhhB,EAASjC,EAAoB,GAC7Bga,EAAYha,EAAoB,IAEpC,WAQIijB,EAAS1hB,OAAS,SAASwO,GACvB,IAAIC,EAAW,CACX8G,OAAQ,GACRoM,WAAY,GACZ3J,MAAO,MAGX,OAAOtX,EAAOQ,OAAOuN,EAAUD,EACnC,EAQAkT,EAASE,UAAY,SAASC,EAAUtM,GACpCsM,EAAStM,OAASA,EAAOnT,MAAM,EACnC,EAOAsf,EAASvK,MAAQ,SAAS0K,GACtBA,EAAStM,OAAS,GAClBsM,EAASF,WAAa,EAC1B,EAWAD,EAASC,WAAa,SAASE,GAC3B,IAOIljB,EACA+D,EARAsV,EAAQ6J,EAAS7J,MACjBzC,EAASsM,EAAStM,OAClBuM,EAAevM,EAAO/T,OACtBugB,EAAaL,EAASK,WACtBtI,EAAWhB,EAAUgB,SACrBkI,EAAaE,EAASF,WACtBK,EAAiB,EAMrB,IAFAzM,EAAOlI,KAAKqU,EAASO,iBAEhBtjB,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CAC/B,IAAIyZ,EAAQ7C,EAAO5W,GACfmJ,EAAUsQ,EAAMhR,OAChB8a,EAAY9J,EAAMhR,OAAOxD,IAAIyD,EAC7B8a,EAAY/J,EAAMhR,OAAOxD,IAAI0D,EAC7B8a,EAAYhK,EAAMhR,OAAOzD,IAAI2D,EAC7B+a,EAAcjK,EAAM7I,UAAY6I,EAAM5I,WACtC8S,EAAelK,EAAM7V,MAAMf,OAC3B+gB,EAAgC,IAAjBD,EAEnB,IAAK5f,EAAI/D,EAAI,EAAG+D,EAAIof,EAAcpf,IAAK,CACnC,IAAI2V,EAAQ9C,EAAO7S,GACfqF,EAAUsQ,EAAMjR,OAEpB,GAAIW,EAAQpE,IAAI0D,EAAI6a,EAChB,MAGJ,KAAIC,EAAYpa,EAAQpE,IAAI2D,GAAK8a,EAAYra,EAAQnE,IAAI0D,OAIrD+a,IAAgBhK,EAAM9I,WAAY8I,EAAM7I,aAIvCuS,EAAW3J,EAAMpI,gBAAiBqI,EAAMrI,kBAA7C,CAIA,IAAIwS,EAAenK,EAAM9V,MAAMf,OAE/B,GAAI+gB,GAAiC,IAAjBC,EAAoB,CACpC,IAAIrK,EAAYsB,EAASrB,EAAOC,EAAOL,GAEnCG,IACAwJ,EAAWK,KAAoB7J,EAEvC,MAII,IAHA,IAAIsK,EAAcH,EAAe,EAAI,EAAI,EACrCI,EAAcF,EAAe,EAAI,EAAI,EAEhC/U,EAAIgV,EAAahV,EAAI6U,EAAc7U,IAIxC,IAHA,IAAI2T,EAAQhJ,EAAM7V,MAAMkL,GAGfC,GAFL5F,EAAUsZ,EAAMha,OAEPsb,GAAahV,EAAI8U,EAAc9U,IAAK,CAC7C,IAAI2T,EAAQhJ,EAAM9V,MAAMmL,GACpB3F,EAAUsZ,EAAMja,OAEpB,KAAIU,EAAQnE,IAAI0D,EAAIU,EAAQnE,IAAIyD,GAAKS,EAAQlE,IAAIyD,EAAIU,EAAQpE,IAAI0D,GAC1DS,EAAQlE,IAAI0D,EAAIS,EAAQpE,IAAI2D,GAAKQ,EAAQnE,IAAI2D,EAAIS,EAAQnE,IAAI0D,GADpE,CAKI6Q,EAAYsB,EAAS2H,EAAOC,EAAOrJ,GAEnCG,IACAwJ,EAAWK,KAAoB7J,EALnC,CAOJ,CAhCR,CAmCJ,CACJ,CAMA,OAJIwJ,EAAWngB,SAAWwgB,IACtBL,EAAWngB,OAASwgB,GAGjBL,CACX,EAUAD,EAASK,WAAa,SAASY,EAASC,GACpC,OAAID,EAAQxS,QAAUyS,EAAQzS,OAA2B,IAAlBwS,EAAQxS,MACpCwS,EAAQxS,MAAQ,EAEkB,KAArCwS,EAAQzS,KAAO0S,EAAQ3S,WAAyD,KAArC2S,EAAQ1S,KAAOyS,EAAQ1S,SAC9E,EAWAyR,EAASO,gBAAkB,SAAS7J,EAAOC,GACvC,OAAOD,EAAMhR,OAAOzD,IAAI0D,EAAIgR,EAAMjR,OAAOzD,IAAI0D,CACjD,CA+BH,EA9LD,EAiMO,WAESjJ,EAAQC,EAASI,GAQjC,IAAIokB,EAAQ,CAAC,EAEbzkB,EAAOC,QAAUwkB,EAEjB,IAAIniB,EAASjC,EAAoB,IAEjC,WAQIokB,EAAM7iB,OAAS,SAAS8iB,GACpB,IAAIC,EAAQ,CAAC,EAsFb,OApFKD,GACDpiB,EAAO+D,IAAI,mEAAoE,QAGnFse,EAAMD,QAAUA,GAAWE,SAAS7Y,KACpC4Y,EAAME,SAAW,CAAE5b,EAAG,EAAGC,EAAG,GAC5Byb,EAAM5a,SAAW,CAAEd,EAAG,EAAGC,EAAG,GAC5Byb,EAAMG,kBAAoB,CAAE7b,EAAG,EAAGC,EAAG,GACrCyb,EAAMI,gBAAkB,CAAE9b,EAAG,EAAGC,EAAG,GACnCyb,EAAMvO,OAAS,CAAEnN,EAAG,EAAGC,EAAG,GAC1Byb,EAAMlX,MAAQ,CAAExE,EAAG,EAAGC,EAAG,GACzByb,EAAMK,WAAa,EACnBL,EAAMM,QAAU,EAChBN,EAAMO,WAAa/e,SAASwe,EAAMD,QAAQS,aAAa,oBAAqB,KAAO,EAEnFR,EAAMS,aAAe,CACjBC,UAAW,KACXC,UAAW,KACXC,QAAS,KACTC,WAAY,MAGhBb,EAAMU,UAAY,SAAStO,GACvB,IAAIhN,EAAW0a,EAAMgB,0BAA0B1O,EAAO4N,EAAMD,QAASC,EAAMO,YACvEQ,EAAU3O,EAAM4O,eAEhBD,IACAf,EAAMM,OAAS,EACflO,EAAM6O,kBAGVjB,EAAME,SAAS5b,EAAIc,EAASd,EAC5B0b,EAAME,SAAS3b,EAAIa,EAASb,EAC5Byb,EAAM5a,SAASd,EAAI0b,EAAME,SAAS5b,EAAI0b,EAAMlX,MAAMxE,EAAI0b,EAAMvO,OAAOnN,EACnE0b,EAAM5a,SAASb,EAAIyb,EAAME,SAAS3b,EAAIyb,EAAMlX,MAAMvE,EAAIyb,EAAMvO,OAAOlN,EACnEyb,EAAMS,aAAaC,UAAYtO,CACnC,EAEA4N,EAAMW,UAAY,SAASvO,GACvB,IAAIhN,EAAW0a,EAAMgB,0BAA0B1O,EAAO4N,EAAMD,QAASC,EAAMO,YACvEQ,EAAU3O,EAAM4O,eAEhBD,GACAf,EAAMM,OAAS,EACflO,EAAM6O,kBAENjB,EAAMM,OAASlO,EAAMkO,OAGzBN,EAAME,SAAS5b,EAAIc,EAASd,EAC5B0b,EAAME,SAAS3b,EAAIa,EAASb,EAC5Byb,EAAM5a,SAASd,EAAI0b,EAAME,SAAS5b,EAAI0b,EAAMlX,MAAMxE,EAAI0b,EAAMvO,OAAOnN,EACnE0b,EAAM5a,SAASb,EAAIyb,EAAME,SAAS3b,EAAIyb,EAAMlX,MAAMvE,EAAIyb,EAAMvO,OAAOlN,EACnEyb,EAAMG,kBAAkB7b,EAAI0b,EAAM5a,SAASd,EAC3C0b,EAAMG,kBAAkB5b,EAAIyb,EAAM5a,SAASb,EAC3Cyb,EAAMS,aAAaE,UAAYvO,CACnC,EAEA4N,EAAMY,QAAU,SAASxO,GACrB,IAAIhN,EAAW0a,EAAMgB,0BAA0B1O,EAAO4N,EAAMD,QAASC,EAAMO,YACvEQ,EAAU3O,EAAM4O,eAEhBD,GACA3O,EAAM6O,iBAGVjB,EAAMM,QAAU,EAChBN,EAAME,SAAS5b,EAAIc,EAASd,EAC5B0b,EAAME,SAAS3b,EAAIa,EAASb,EAC5Byb,EAAM5a,SAASd,EAAI0b,EAAME,SAAS5b,EAAI0b,EAAMlX,MAAMxE,EAAI0b,EAAMvO,OAAOnN,EACnE0b,EAAM5a,SAASb,EAAIyb,EAAME,SAAS3b,EAAIyb,EAAMlX,MAAMvE,EAAIyb,EAAMvO,OAAOlN,EACnEyb,EAAMI,gBAAgB9b,EAAI0b,EAAM5a,SAASd,EACzC0b,EAAMI,gBAAgB7b,EAAIyb,EAAM5a,SAASb,EACzCyb,EAAMS,aAAaG,QAAUxO,CACjC,EAEA4N,EAAMa,WAAa,SAASzO,GACxB4N,EAAMK,WAAazgB,KAAKiB,KAAK,EAAGjB,KAAKgB,IAAI,EAAGwR,EAAMiO,aAAejO,EAAM8O,SACvE9O,EAAM6O,iBACNjB,EAAMS,aAAaI,WAAazO,CACpC,EAEA0N,EAAMqB,WAAWnB,EAAOA,EAAMD,SAEvBC,CACX,EAQAF,EAAMqB,WAAa,SAASnB,EAAOD,GAC/BC,EAAMD,QAAUA,EAEhBA,EAAQqB,iBAAiB,YAAapB,EAAMU,UAAW,CAAEW,SAAS,IAClEtB,EAAQqB,iBAAiB,YAAapB,EAAMW,UAAW,CAAEU,SAAS,IAClEtB,EAAQqB,iBAAiB,UAAWpB,EAAMY,QAAS,CAAES,SAAS,IAE9DtB,EAAQqB,iBAAiB,QAASpB,EAAMa,WAAY,CAAEQ,SAAS,IAE/DtB,EAAQqB,iBAAiB,YAAapB,EAAMU,UAAW,CAAEW,SAAS,IAClEtB,EAAQqB,iBAAiB,aAAcpB,EAAMW,UAAW,CAAEU,SAAS,IACnEtB,EAAQqB,iBAAiB,WAAYpB,EAAMY,QAAS,CAAES,SAAS,GACnE,EAOAvB,EAAMwB,kBAAoB,SAAStB,GAC/BA,EAAMS,aAAaC,UAAY,KAC/BV,EAAMS,aAAaE,UAAY,KAC/BX,EAAMS,aAAaG,QAAU,KAC7BZ,EAAMS,aAAaI,WAAa,KAChCb,EAAMK,WAAa,CACvB,EAQAP,EAAMyB,UAAY,SAASvB,EAAOvO,GAC9BuO,EAAMvO,OAAOnN,EAAImN,EAAOnN,EACxB0b,EAAMvO,OAAOlN,EAAIkN,EAAOlN,EACxByb,EAAM5a,SAASd,EAAI0b,EAAME,SAAS5b,EAAI0b,EAAMlX,MAAMxE,EAAI0b,EAAMvO,OAAOnN,EACnE0b,EAAM5a,SAASb,EAAIyb,EAAME,SAAS3b,EAAIyb,EAAMlX,MAAMvE,EAAIyb,EAAMvO,OAAOlN,CACvE,EAQAub,EAAM0B,SAAW,SAASxB,EAAOlX,GAC7BkX,EAAMlX,MAAMxE,EAAIwE,EAAMxE,EACtB0b,EAAMlX,MAAMvE,EAAIuE,EAAMvE,EACtByb,EAAM5a,SAASd,EAAI0b,EAAME,SAAS5b,EAAI0b,EAAMlX,MAAMxE,EAAI0b,EAAMvO,OAAOnN,EACnE0b,EAAM5a,SAASb,EAAIyb,EAAME,SAAS3b,EAAIyb,EAAMlX,MAAMvE,EAAIyb,EAAMvO,OAAOlN,CACvE,EAWAub,EAAMgB,0BAA4B,SAAS1O,EAAO2N,EAASQ,GACvD,IAKIjc,EAAGC,EALHkd,EAAgB1B,EAAQ2B,wBACxBC,EAAY1B,SAAS2B,iBAAmB3B,SAAS7Y,KAAKya,YAAc5B,SAAS7Y,KAC7E0a,OAAkCC,IAAvB/gB,OAAOghB,YAA6BhhB,OAAOghB,YAAcL,EAASM,WAC7EC,OAAkCH,IAAvB/gB,OAAOmhB,YAA6BnhB,OAAOmhB,YAAcR,EAASS,UAC7ErB,EAAU3O,EAAM4O,eAWpB,OARID,GACAzc,EAAIyc,EAAQ,GAAGsB,MAAQZ,EAAca,KAAOR,EAC5Cvd,EAAIwc,EAAQ,GAAGwB,MAAQd,EAAce,IAAMN,IAE3C5d,EAAI8N,EAAMiQ,MAAQZ,EAAca,KAAOR,EACvCvd,EAAI6N,EAAMmQ,MAAQd,EAAce,IAAMN,GAGnC,CACH5d,EAAGA,GAAKyb,EAAQ0C,aAAe1C,EAAQ1D,OAAS0D,EAAQ0C,aAAelC,GACvEhc,EAAGA,GAAKwb,EAAQ2C,cAAgB3C,EAAQzD,QAAUyD,EAAQ2C,cAAgBnC,GAElF,CAEH,EA5LD,EA+LO,WAESllB,EAAQC,EAASI,GAQjC,IAAIinB,EAAS,CAAC,EAEdtnB,EAAOC,QAAUqnB,EAEjB,IAAIhlB,EAASjC,EAAoB,IAEjC,WAEIinB,EAAOC,UAAY,CAAC,EAQpBD,EAAOE,SAAW,SAAS/W,GAKvB,GAJK6W,EAAOG,SAAShX,IACjBnO,EAAOqE,KAAK,mBAAoB2gB,EAAOpiB,SAASuL,GAAS,2CAGzDA,EAAO5P,QAAQymB,EAAOC,UAAW,CACjC,IAAIG,EAAaJ,EAAOC,UAAU9W,EAAO5P,MACrC8mB,EAAgBL,EAAOM,aAAanX,EAAOoX,SAASC,OACpDC,EAAoBT,EAAOM,aAAaF,EAAWG,SAASC,OAE5DH,EAAgBI,GAChBzlB,EAAOqE,KAAK,mBAAoB2gB,EAAOpiB,SAASwiB,GAAa,kBAAmBJ,EAAOpiB,SAASuL,IAChG6W,EAAOC,UAAU9W,EAAO5P,MAAQ4P,GACzBkX,EAAgBI,EACvBzlB,EAAOqE,KAAK,mBAAoB2gB,EAAOpiB,SAASwiB,GAAa,2BAA4BJ,EAAOpiB,SAASuL,IAClGA,IAAWiX,GAClBplB,EAAOqE,KAAK,mBAAoB2gB,EAAOpiB,SAASuL,GAAS,mDAEjE,MACI6W,EAAOC,UAAU9W,EAAO5P,MAAQ4P,EAGpC,OAAOA,CACX,EASA6W,EAAOU,QAAU,SAASC,GACtB,OAAOX,EAAOC,UAAUD,EAAOY,gBAAgBD,GAAYpnB,KAC/D,EAQAymB,EAAOpiB,SAAW,SAASuL,GACvB,MAAyB,kBAAXA,EAAsBA,GAAUA,EAAO5P,MAAQ,aAAe,KAAO4P,EAAOoX,SAAWpX,EAAO0X,OAAS,QACzH,EAYAb,EAAOG,SAAW,SAAS1kB,GACvB,OAAOA,GAAOA,EAAIlC,MAAQkC,EAAI8kB,SAAW9kB,EAAIqlB,OACjD,EASAd,EAAOe,OAAS,SAASroB,EAAQa,GAC7B,OAAOb,EAAOsoB,KAAKnhB,QAAQtG,IAAS,CACxC,EAWAymB,EAAOiB,MAAQ,SAAS9X,EAAQzQ,GAC5B,IAAIwoB,EAAS/X,EAAOgY,KAAOnB,EAAOY,gBAAgBzX,EAAOgY,KACzD,OAAQhY,EAAOgY,KAAQzoB,EAAOa,OAAS2nB,EAAO3nB,MAAQymB,EAAOoB,iBAAiB1oB,EAAO6nB,QAASW,EAAOL,MACzG,EAkBAb,EAAOqB,IAAM,SAAS3oB,EAAQ4oB,GAG1B,GAFA5oB,EAAO6oB,MAAQ7oB,EAAO6oB,MAAQ,IAAIriB,OAAOoiB,GAAW,IAEzB,IAAvB5oB,EAAO6oB,KAAKzlB,OAAhB,CASA,IAJA,IAAI0lB,EAAexB,EAAOwB,aAAa9oB,GACnC+oB,EAAqBzmB,EAAOoF,gBAAgBohB,GAC5CE,EAAS,GAEJzoB,EAAI,EAAGA,EAAIwoB,EAAmB3lB,OAAQ7C,GAAK,EAChD,GAAIwoB,EAAmBxoB,KAAOP,EAAOa,KAArC,CAIA,IAAI4P,EAAS6W,EAAOU,QAAQe,EAAmBxoB,IAE1CkQ,EAKD6W,EAAOe,OAAOroB,EAAQyQ,EAAO5P,QAI5BymB,EAAOiB,MAAM9X,EAAQzQ,KACtBsC,EAAOqE,KAAK,cAAe2gB,EAAOpiB,SAASuL,GAAS,SAAUA,EAAOgY,IAAK,mBAAoBnB,EAAOpiB,SAASlF,GAAU,KACxHyQ,EAAOwY,SAAU,GAGjBxY,EAAO2X,QACP3X,EAAO2X,QAAQpoB,IAEfsC,EAAOqE,KAAK,cAAe2gB,EAAOpiB,SAASuL,GAAS,yCACpDA,EAAOwY,SAAU,GAGjBxY,EAAOwY,SACPD,EAAOtlB,KAAK,MAAQ4jB,EAAOpiB,SAASuL,WAC7BA,EAAOwY,SAEdD,EAAOtlB,KAAK,KAAO4jB,EAAOpiB,SAASuL,IAGvCzQ,EAAOsoB,KAAK5kB,KAAK+M,EAAO5P,OA3BpBmoB,EAAOtlB,KAAK,KAAOqlB,EAAmBxoB,GAL1C,CAmCAyoB,EAAO5lB,OAAS,GAChBd,EAAOoE,KAAKsiB,EAAOliB,KAAK,MA7C5B,MAFIxE,EAAOqE,KAAK,cAAe2gB,EAAOpiB,SAASlF,GAAS,gDAiD5D,EAQAsnB,EAAOwB,aAAe,SAAS9oB,EAAQkpB,GACnC,IAAIC,EAAa7B,EAAOY,gBAAgBloB,GACpCa,EAAOsoB,EAAWtoB,KAItB,GAFAqoB,EAAUA,GAAW,CAAC,IAElBroB,KAAQqoB,GAAZ,CAIAlpB,EAASsnB,EAAOU,QAAQhoB,IAAWA,EAEnCkpB,EAAQroB,GAAQyB,EAAOgF,IAAItH,EAAO6oB,MAAQ,IAAI,SAASZ,GAC/CX,EAAOG,SAASQ,IAChBX,EAAOE,SAASS,GAGpB,IAAIO,EAASlB,EAAOY,gBAAgBD,GAChCmB,EAAW9B,EAAOU,QAAQC,GAmB9B,OAjBImB,IAAa9B,EAAOoB,iBAAiBU,EAASvB,QAASW,EAAOL,QAC9D7lB,EAAOqE,KACH,uBAAwB2gB,EAAOpiB,SAASkkB,GAAW,mBACnD9B,EAAOpiB,SAASsjB,GAAS,UAAWlB,EAAOpiB,SAASikB,GAAc,KAGtEC,EAASH,SAAU,EACnBjpB,EAAOipB,SAAU,GACTG,IACR9mB,EAAOqE,KACH,uBAAwB2gB,EAAOpiB,SAAS+iB,GAAa,UACrDX,EAAOpiB,SAASikB,GAAa,0BAGjCnpB,EAAOipB,SAAU,GAGdT,EAAO3nB,IAClB,IAEA,IAAK,IAAIN,EAAI,EAAGA,EAAI2oB,EAAQroB,GAAMuC,OAAQ7C,GAAK,EAC3C+mB,EAAOwB,aAAaI,EAAQroB,GAAMN,GAAI2oB,GAG1C,OAAOA,CApCP,CAqCJ,EAWA5B,EAAOY,gBAAkB,SAASD,GAC9B,GAAI3lB,EAAO+C,SAAS4iB,GAAa,CAC7B,IAAIoB,EAAU,yDAMd,OAJKA,EAAQC,KAAKrB,IACd3lB,EAAOqE,KAAK,0BAA2BshB,EAAY,qCAGhD,CACHpnB,KAAMonB,EAAWlkB,MAAM,KAAK,GAC5BokB,MAAOF,EAAWlkB,MAAM,KAAK,IAAM,IAE3C,CAEA,MAAO,CACHlD,KAAMonB,EAAWpnB,KACjBsnB,MAAOF,EAAWE,OAASF,EAAWJ,QAE9C,EAkBAP,EAAOM,aAAe,SAASO,GAC3B,IAAIkB,EAAU,gEAETA,EAAQC,KAAKnB,IACd7lB,EAAOqE,KAAK,uBAAwBwhB,EAAO,oCAG/C,IAAIhkB,EAAQklB,EAAQE,KAAKpB,GACrBqB,EAAQ7M,OAAOxY,EAAM,IACrBslB,EAAQ9M,OAAOxY,EAAM,IACrBulB,EAAQ/M,OAAOxY,EAAM,IAEzB,MAAO,CACHwlB,QAASpH,QAAQpe,EAAM,IAAMA,EAAM,IACnC0jB,QAAS1jB,EAAM,GACfgkB,MAAOA,EACPyB,SAAUzlB,EAAM,IAAMA,EAAM,IAAM,GAClCqlB,MAAOA,EACPC,MAAOA,EACPC,MAAOA,EACPvlB,MAAO,CAACqlB,EAAOC,EAAOC,GACtBG,WAAY1lB,EAAM,GAClB2jB,OAAgB,IAAR0B,EAAsB,IAARC,EAAcC,EAE5C,EAWApC,EAAOoB,iBAAmB,SAASb,EAASM,GACxCA,EAAQA,GAAS,IAEjB,IAAI/mB,EAAIkmB,EAAOM,aAAaO,GACxBnb,EAAIsa,EAAOM,aAAaC,GAE5B,GAAIzmB,EAAEuoB,QAAS,CACX,GAAmB,MAAfvoB,EAAEwoB,UAAgC,MAAZ/B,EACtB,OAAO,EAGX,GAAmB,MAAfzmB,EAAEwoB,SACF,OAAO5c,EAAE8a,OAAS1mB,EAAE0mB,OAGxB,GAAmB,OAAf1mB,EAAEwoB,SACF,OAAO5c,EAAE8a,QAAU1mB,EAAE0mB,OAGzB,GAAmB,MAAf1mB,EAAEwoB,SACF,OAAO5c,EAAEwc,QAAUpoB,EAAEooB,OAASxc,EAAEyc,QAAUroB,EAAEqoB,OAASzc,EAAE0c,OAAStoB,EAAEsoB,MAGtE,GAAmB,MAAftoB,EAAEwoB,SACF,OAAIxoB,EAAEooB,MAAQ,EACHxc,EAAEwc,QAAUpoB,EAAEooB,OAASxc,EAAE8a,QAAU1mB,EAAE0mB,OAG5C1mB,EAAEqoB,MAAQ,EACHzc,EAAEyc,QAAUroB,EAAEqoB,OAASzc,EAAE0c,OAAStoB,EAAEsoB,MAGxC1c,EAAE0c,QAAUtoB,EAAEsoB,KAE7B,CAEA,OAAO7B,IAAYM,GAAqB,MAAZN,CAChC,CAEH,EAlVD,EAqVO,WAES7nB,EAAQC,GAQxB,IAAIyd,EAAU,CAAC,EAEf1d,EAAOC,QAAUyd,EAEjB,WAQIA,EAAQ9b,OAAS,SAAS0H,GACtB,MAAO,CACHA,OAAQA,EACRwgB,cAAe,EACfC,eAAgB,EAExB,CAEH,CAhBD,EAmBO,WAES/pB,EAAQC,EAASI,GAYjC,IAAI2pB,EAAS,CAAC,EAEdhqB,EAAOC,QAAU+pB,EAEjB,IAAIna,EAAWxP,EAAoB,GAC/B4pB,EAAW5pB,EAAoB,IAC/BijB,EAAWjjB,EAAoB,IAC/B6pB,EAAQ7pB,EAAoB,IAC5BiW,EAASjW,EAAoB,GAC7B4W,EAAY5W,EAAoB,GAChCie,EAAaje,EAAoB,IACjCiC,EAASjC,EAAoB,GAC7BuP,EAAOvP,EAAoB,IAE/B,WAEI2pB,EAAOG,UAAY,IAAO,GAU1BH,EAAOpoB,OAAS,SAASwO,GACrBA,EAAUA,GAAW,CAAC,EAEtB,IAAIC,EAAW,CACX+Z,mBAAoB,EACpBC,mBAAoB,EACpBC,qBAAsB,EACtBC,gBAAgB,EAChB1X,OAAQ,GACRpC,OAAQ,CAAC,EACT+Z,QAAS,CACLvhB,EAAG,EACHC,EAAG,EACHuE,MAAO,MAEXgd,OAAQ,CACJ9M,UAAW,EACX1L,UAAW,EACXyY,UAAW,EACXC,YAAa,EACbC,oBAAqB,IAIzBC,EAASvoB,EAAOQ,OAAOuN,EAAUD,GAarC,OAXAya,EAAOC,MAAQ1a,EAAQ0a,OAAS7T,EAAUrV,OAAO,CAAE4O,MAAO,UAC1Dqa,EAAOjR,MAAQxJ,EAAQwJ,OAASsQ,EAAMtoB,SACtCipB,EAAOpH,SAAWrT,EAAQqT,UAAYH,EAAS1hB,SAC/CipB,EAAOpH,SAAS7J,MAAQiR,EAAOjR,MAG/BiR,EAAOE,KAAO,CAAEC,QAAS,IACzBH,EAAOC,MAAMN,QAAUK,EAAOL,QAC9BK,EAAOI,WAAaJ,EAAOE,KAC3BF,EAAOK,QAAU,CAAC,EAEXL,CACX,EAUAb,EAAO7gB,OAAS,SAAS0hB,EAAQjd,GAC7B,IAOIrN,EAPA4qB,EAAY7oB,EAAOoD,MAEnBolB,EAAQD,EAAOC,MACfrH,EAAWoH,EAAOpH,SAClB7J,EAAQiR,EAAOjR,MACf6Q,EAASI,EAAOJ,OAChB9M,EAAY8M,EAAO9M,UAInB/P,EAAQoc,EAAOG,WACf7nB,EAAOsE,SACH,kFAAmFojB,EAAOG,UAAUvJ,QAAQ,GAAI,OAIxHhT,EAAyB,qBAAVA,EAAwBA,EAAQtL,EAAOC,WACtDqL,GAAS6c,EAAOxY,UAGhBwY,EAAO9M,WAAa/P,EACpB6c,EAAOC,UAAY9c,EAGnB,IAAImJ,EAAQ,CACR4G,UAAW8M,EAAO9M,UAClB/P,MAAOA,GAGX0I,EAAOQ,QAAQ+T,EAAQ,eAAgB9T,GAGvC,IAAIQ,EAAYN,EAAUM,UAAUuT,GAChCtT,EAAiBP,EAAUO,eAAesT,GA2B9C,IAxBIA,EAAM5T,aAENoM,EAASE,UAAUC,EAAUlM,GAG7BN,EAAUS,YAAYoT,GAAO,GAAO,GAAO,IAI3CD,EAAON,gBACP1a,EAAS1G,OAAOoO,EAAW3J,GAG/Boc,EAAOoB,oBAAoB7T,EAAWsT,EAAOL,SAGzC5c,EAAQ,GACRoc,EAAOqB,cAAc9T,EAAW3J,GAGpC0I,EAAOQ,QAAQ+T,EAAQ,cAAe9T,GAGtCuH,EAAWc,YAAY7H,GAClBhX,EAAI,EAAGA,EAAIsqB,EAAOP,qBAAsB/pB,IACzC+d,EAAWgB,SAAS9H,EAAgB5J,GAExC0Q,EAAWgC,aAAa/I,GAGxB,IAAIgM,EAAaD,EAASC,WAAWE,GAGrCyG,EAAM/gB,OAAOyQ,EAAO2J,EAAY5F,GAG5BkN,EAAON,gBACP1a,EAAS8J,gBAAgBC,EAAMrS,MAG/BqS,EAAM0R,eAAeloB,OAAS,GAC9BkT,EAAOQ,QAAQ+T,EAAQ,iBAAkB,CACrCjR,MAAOA,EAAM0R,eACb3N,UAAW8M,EAAO9M,UAClB/P,MAAOA,IAKf,IAAI2d,EAAkBjpB,EAAOgD,MAAM,GAAKulB,EAAOT,mBAAoB,EAAG,GAGtE,IADAH,EAASuB,iBAAiB5R,EAAMrS,MAC3BhH,EAAI,EAAGA,EAAIsqB,EAAOT,mBAAoB7pB,IACvC0pB,EAASwB,cAAc7R,EAAMrS,KAAMqG,EAAO2d,GAM9C,IAJAtB,EAASyB,kBAAkBnU,GAG3B+G,EAAWc,YAAY7H,GAClBhX,EAAI,EAAGA,EAAIsqB,EAAOP,qBAAsB/pB,IACzC+d,EAAWgB,SAAS9H,EAAgB5J,GAMxC,IAJA0Q,EAAWgC,aAAa/I,GAGxB0S,EAAS0B,iBAAiB/R,EAAMrS,MAC3BhH,EAAI,EAAGA,EAAIsqB,EAAOR,mBAAoB9pB,IACvC0pB,EAAS2B,cAAchS,EAAMrS,KAAMqG,GA+BvC,OA3BAoc,EAAO6B,wBAAwBtU,GAG3BqC,EAAMkS,gBAAgB1oB,OAAS,GAC/BkT,EAAOQ,QAAQ+T,EAAQ,kBAAmB,CACtCjR,MAAOA,EAAMkS,gBACbnO,UAAW8M,EAAO9M,UAClB/P,MAAOA,IAIXgM,EAAMmS,aAAa3oB,OAAS,GAC5BkT,EAAOQ,QAAQ+T,EAAQ,eAAgB,CACnCjR,MAAOA,EAAMmS,aACbpO,UAAW8M,EAAO9M,UAClB/P,MAAOA,IAKfoc,EAAOgC,mBAAmBzU,GAE1BjB,EAAOQ,QAAQ+T,EAAQ,cAAe9T,GAGtC8T,EAAOJ,OAAOE,YAAcroB,EAAOoD,MAAQylB,EAEpCN,CACX,EAQAb,EAAOiC,MAAQ,SAASC,EAASC,GAG7B,GAFA7pB,EAAOQ,OAAOopB,EAASC,GAEnBA,EAAQrB,MAAO,CACfoB,EAAQpB,MAAQqB,EAAQrB,MAExBd,EAAOjR,MAAMmT,GAIb,IAFA,IAAI/U,EAASF,EAAUM,UAAU2U,EAAQpB,OAEhCvqB,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GAClBsP,EAAS5L,IAAI8H,GAAM,GACnBA,EAAKuE,GAAKhO,EAAO4E,QACrB,CACJ,CACJ,EAOA8iB,EAAOjR,MAAQ,SAAS8R,GACpBX,EAAMnR,MAAM8R,EAAOjR,OACnB0J,EAASvK,MAAM8R,EAAOpH,SAC1B,EAQAuG,EAAOgC,mBAAqB,SAAS7U,GAGjC,IAFA,IAAIuM,EAAevM,EAAO/T,OAEjB7C,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CACnC,IAAIwL,EAAOoL,EAAO5W,GAGlBwL,EAAK2E,MAAMzH,EAAI,EACf8C,EAAK2E,MAAMxH,EAAI,EACf6C,EAAK4E,OAAS,CAClB,CACJ,EAWAqZ,EAAOoB,oBAAsB,SAASjU,EAAQqT,GAC1C,IAAI4B,EAAwC,qBAAlB5B,EAAQ/c,MAAwB+c,EAAQ/c,MAAQ,KACtEiW,EAAevM,EAAO/T,OAE1B,IAAmB,IAAdonB,EAAQvhB,GAAyB,IAAduhB,EAAQthB,IAA6B,IAAjBkjB,EAI5C,IAAK,IAAI7rB,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CACnC,IAAIwL,EAAOoL,EAAO5W,GAEdwL,EAAKoF,UAAYpF,EAAKqF,aAI1BrF,EAAK2E,MAAMxH,GAAK6C,EAAKc,KAAO2d,EAAQthB,EAAIkjB,EACxCrgB,EAAK2E,MAAMzH,GAAK8C,EAAKc,KAAO2d,EAAQvhB,EAAImjB,EAC5C,CACJ,EASApC,EAAOqB,cAAgB,SAASlU,EAAQvJ,GAGpC,IAFA,IAAI8V,EAAevM,EAAO/T,OAEjB7C,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CACnC,IAAIwL,EAAOoL,EAAO5W,GAEdwL,EAAKoF,UAAYpF,EAAKqF,YAG1BxB,EAAKzG,OAAO4C,EAAM6B,EACtB,CACJ,EAQAoc,EAAO6B,wBAA0B,SAAS1U,GAGtC,IAFA,IAAIuM,EAAevM,EAAO/T,OAEjB7C,EAAI,EAAGA,EAAImjB,EAAcnjB,IAC9BqP,EAAKqG,iBAAiBkB,EAAO5W,GAErC,CAsPH,EA9iBD,EAijBO,WAESP,EAAQC,EAASI,GAQjC,IAAI4pB,EAAW,CAAC,EAEhBjqB,EAAOC,QAAUgqB,EAEjB,IAAIpe,EAAWxL,EAAoB,GAC/BiC,EAASjC,EAAoB,GAC7ByI,EAASzI,EAAoB,IAEjC,WAEI4pB,EAASoC,eAAiB,EAC1BpC,EAASqC,sBAAwB/nB,KAAK6F,KAAK,GAC3C6f,EAASsC,gBAAkB,GAC3BtC,EAASuC,iBAAmB,GAC5BvC,EAASwC,0BAA4B,EACrCxC,EAASyC,mBAAqB/P,OAAOC,UAOrCqN,EAASuB,iBAAmB,SAAS5R,GACjC,IAAIrZ,EACAsZ,EACAgE,EACA8O,EAAc/S,EAAMxW,OAGxB,IAAK7C,EAAI,EAAGA,EAAIosB,EAAapsB,IACzBsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,WAGV+D,EAAehE,EAAKgE,aACpBhE,EAAKE,UAAUc,QAAQ/J,eAAiB+M,EACxChE,EAAKE,UAAUe,QAAQhK,eAAiB+M,EAEhD,EASAoM,EAASwB,cAAgB,SAAS7R,EAAOhM,EAAOmR,GAC5C,IAAIxe,EACAsZ,EACAE,EACAC,EACAC,EACAe,EACA4R,EACAhc,EACAic,EAAiB5C,EAASsC,iBAAmBxN,GAAW,GACxD+N,EAAaxqB,EAAOgD,MAAMsI,EAAQtL,EAAOC,WAAY,EAAG,GACxDoqB,EAAc/S,EAAMxW,OAGxB,IAAK7C,EAAI,EAAGA,EAAIosB,EAAapsB,IACzBsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,WAAYD,EAAK3I,WAG3B6I,EAAYF,EAAKE,UACjBC,EAAQD,EAAUc,QAClBZ,EAAQF,EAAUe,QAClBE,EAASjB,EAAUiB,OAGnBnB,EAAKiE,WACD/D,EAAUgB,MAAQC,EAAO/R,GAAKgR,EAAMrJ,gBAAgB3H,EAAI+Q,EAAMpJ,gBAAgB3H,GAC5E+R,EAAO9R,GAAK+Q,EAAMrJ,gBAAgB1H,EAAI8Q,EAAMpJ,gBAAgB1H,IAGtE,IAAK3I,EAAI,EAAGA,EAAIosB,EAAapsB,IACzBsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,WAAYD,EAAK3I,WAG3B6I,EAAYF,EAAKE,UACjBC,EAAQD,EAAUc,QAClBZ,EAAQF,EAAUe,QAClBE,EAASjB,EAAUiB,OACnBpK,EAAkBiJ,EAAKiE,WAAajE,EAAK7H,KAAO8a,GAE5C9S,EAAM7I,UAAY8I,EAAM9I,YACxBP,GAAmB,GAEjBoJ,EAAM7I,UAAY6I,EAAM5I,aAC1Bwb,EAAeC,EAAiB7S,EAAMlJ,cACtCkJ,EAAMpJ,gBAAgB3H,GAAK+R,EAAO/R,EAAI2H,EAAkBgc,EACxD5S,EAAMpJ,gBAAgB1H,GAAK8R,EAAO9R,EAAI0H,EAAkBgc,GAGtD3S,EAAM9I,UAAY8I,EAAM7I,aAC1Bwb,EAAeC,EAAiB5S,EAAMnJ,cACtCmJ,EAAMrJ,gBAAgB3H,GAAK+R,EAAO/R,EAAI2H,EAAkBgc,EACxD3S,EAAMrJ,gBAAgB1H,GAAK8R,EAAO9R,EAAI0H,EAAkBgc,GAGpE,EAOA3C,EAASyB,kBAAoB,SAASvU,GAMlC,IALA,IAAI4V,EAAkB9C,EAASuC,iBAC3B9I,EAAevM,EAAO/T,OACtB4pB,EAAoBnhB,EAASjC,UAC7BqjB,EAAenkB,EAAOK,OAEjB5I,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CACnC,IAAIwL,EAAOoL,EAAO5W,GACdqQ,EAAkB7E,EAAK6E,gBACvBsc,EAAmBtc,EAAgB3H,EACnCkkB,EAAmBvc,EAAgB1H,EACnCE,EAAW2C,EAAK3C,SAKpB,GAFA2C,EAAK+E,cAAgB,EAEI,IAArBoc,GAA+C,IAArBC,EAAwB,CAElD,IAAK,IAAI7oB,EAAI,EAAGA,EAAIyH,EAAK5H,MAAMf,OAAQkB,IAAK,CACxC,IAAIoQ,EAAO3I,EAAK5H,MAAMG,GACtB0oB,EAAkBtY,EAAK3L,SAAU6H,GACjCqc,EAAavY,EAAK1L,OAAQ0L,EAAK3L,SAAUK,GACzCsL,EAAK3K,SAASd,GAAKikB,EACnBxY,EAAK3K,SAASb,GAAKikB,CACvB,CAGAphB,EAAKgH,aAAa9J,GAAKikB,EACvBnhB,EAAKgH,aAAa7J,GAAKikB,EAEnBD,EAAmB9jB,EAASH,EAAIkkB,EAAmB/jB,EAASF,EAAI,GAEhE0H,EAAgB3H,EAAI,EACpB2H,EAAgB1H,EAAI,IAGpB0H,EAAgB3H,GAAK8jB,EACrBnc,EAAgB1H,GAAK6jB,EAE7B,CACJ,CACJ,EAOA9C,EAAS0B,iBAAmB,SAAS/R,GACjC,IACIrZ,EACA+D,EAFAqoB,EAAc/S,EAAMxW,OAIxB,IAAK7C,EAAI,EAAGA,EAAIosB,EAAapsB,IAAK,CAC9B,IAAIsZ,EAAOD,EAAMrZ,GAEjB,GAAKsZ,EAAKC,WAAYD,EAAK3I,SAA3B,CAGA,IAAI0M,EAAW/D,EAAK+D,SAChBC,EAAehE,EAAKgE,aACpB9D,EAAYF,EAAKE,UACjBC,EAAQD,EAAUc,QAClBZ,EAAQF,EAAUe,QAClBE,EAASjB,EAAUiB,OACnBC,EAAUlB,EAAUkB,QAGxB,IAAK3W,EAAI,EAAGA,EAAIuZ,EAAcvZ,IAAK,CAC/B,IAAI8oB,EAAUxP,EAAStZ,GACnB+oB,EAAgBD,EAAQ9jB,OACxBwgB,EAAgBsD,EAAQtD,cACxBC,EAAiBqD,EAAQrD,eAE7B,GAAsB,IAAlBD,GAA0C,IAAnBC,EAAsB,CAE7C,IAAIuD,EAAWtS,EAAO/R,EAAI6gB,EAAgB7O,EAAQhS,EAAI8gB,EAClDwD,EAAWvS,EAAO9R,EAAI4gB,EAAgB7O,EAAQ/R,EAAI6gB,EAGhD/P,EAAM7I,UAAY6I,EAAM5I,aAC1B4I,EAAMjH,aAAa9J,GAAKqkB,EAAWtT,EAAMrF,YACzCqF,EAAMjH,aAAa7J,GAAKqkB,EAAWvT,EAAMrF,YACzCqF,EAAMhH,WAAagH,EAAMpF,iBACpByY,EAAcpkB,EAAI+Q,EAAMjQ,SAASd,GAAKskB,GACpCF,EAAcnkB,EAAI8Q,EAAMjQ,SAASb,GAAKokB,IAI3CrT,EAAM9I,UAAY8I,EAAM7I,aAC1B6I,EAAMlH,aAAa9J,GAAKqkB,EAAWrT,EAAMtF,YACzCsF,EAAMlH,aAAa7J,GAAKqkB,EAAWtT,EAAMtF,YACzCsF,EAAMjH,WAAaiH,EAAMrF,iBACpByY,EAAcpkB,EAAIgR,EAAMlQ,SAASd,GAAKskB,GACpCF,EAAcnkB,EAAI+Q,EAAMlQ,SAASb,GAAKokB,GAGrD,CACJ,CAzCY,CA0ChB,CACJ,EAQArD,EAAS2B,cAAgB,SAAShS,EAAOhM,GACrC,IAQImc,EACAyD,EACAjtB,EACA+D,EAXA2N,EAAYrE,EAAQtL,EAAOC,WAC3BkrB,EAAmBxb,EAAYA,EAC/Byb,EAAiBD,EAAmBxb,EACpC0b,GAAiB1D,EAASoC,eAAiBpa,EAC3C2b,EAAuB3D,EAASqC,sBAChCuB,EAA2B5D,EAASwC,0BAA4Bxa,EAChE6b,EAAoB7D,EAASyC,mBAC7BC,EAAc/S,EAAMxW,OAMxB,IAAK7C,EAAI,EAAGA,EAAIosB,EAAapsB,IAAK,CAC9B,IAAIsZ,EAAOD,EAAMrZ,GAEjB,GAAKsZ,EAAKC,WAAYD,EAAK3I,SAA3B,CAGA,IAAI6I,EAAYF,EAAKE,UACjBC,EAAQD,EAAUc,QAClBZ,EAAQF,EAAUe,QAClBY,EAAU3B,EAAUiB,OAAO/R,EAC3B0S,EAAU5B,EAAUiB,OAAO9R,EAC3B6kB,EAAWhU,EAAUkB,QAAQhS,EAC7B+kB,EAAWjU,EAAUkB,QAAQ/R,EAC7B+kB,EAAmBpU,EAAKlF,YACxBlD,EAAWoI,EAAKpI,SAAWoI,EAAKnI,eAAiBmc,EACjDjQ,EAAW/D,EAAK+D,SAChBC,EAAehE,EAAKgE,aACpB+O,EAAe,EAAI/O,EAGnBqQ,EAAiBlU,EAAMjQ,SAASd,EAAI+Q,EAAMjH,aAAa9J,EACvDklB,EAAiBnU,EAAMjQ,SAASb,EAAI8Q,EAAMjH,aAAa7J,EACvDklB,EAAuBpU,EAAMzP,MAAQyP,EAAMhH,UAC3Cqb,EAAiBpU,EAAMlQ,SAASd,EAAIgR,EAAMlH,aAAa9J,EACvDqlB,EAAiBrU,EAAMlQ,SAASb,EAAI+Q,EAAMlH,aAAa7J,EACvDqlB,EAAuBtU,EAAM1P,MAAQ0P,EAAMjH,UAG/C,IAAK1O,EAAI,EAAGA,EAAIuZ,EAAcvZ,IAAK,CAC/B,IAAI8oB,EAAUxP,EAAStZ,GACnB+oB,EAAgBD,EAAQ9jB,OAExBklB,EAAWnB,EAAcpkB,EAAI+Q,EAAMjQ,SAASd,EAC5CwlB,EAAWpB,EAAcnkB,EAAI8Q,EAAMjQ,SAASb,EAC5CwlB,EAAWrB,EAAcpkB,EAAIgR,EAAMlQ,SAASd,EAC5C0lB,EAAWtB,EAAcnkB,EAAI+Q,EAAMlQ,SAASb,EAE5C0lB,EAAkBV,EAAiBO,EAAWL,EAC9CS,EAAkBV,EAAiBK,EAAWJ,EAC9CU,EAAkBT,EAAiBM,EAAWJ,EAC9CQ,EAAkBT,EAAiBI,EAAWH,EAE9CS,EAAoBJ,EAAkBE,EACtCG,EAAoBJ,EAAkBE,EAEtCjP,EAAiBpE,EAAUsT,EAAoBrT,EAAUsT,EACzDC,EAAkBnB,EAAWiB,EAAoBhB,EAAWiB,EAG5DE,EAAgBtV,EAAKiE,WAAagC,EAClCsP,EAAc7qB,KAAKgB,IAAI4pB,EAAe,GAC1CC,EAAcD,EAAgB,EAAI,EAAIC,EAEtC,IAAIC,EAAgBD,EAAc3d,EAE9Byd,GAAmBG,GAAiBH,EAAkBG,GACtD7B,EAAe0B,EAAkB,EAAIA,GAAmBA,EACxDnF,EAAiBlQ,EAAKpI,UAAYyd,EAAkB,EAAI,GAAK,GAAKxB,EAE9D3D,GAAkByD,EAClBzD,GAAkByD,EACXzD,EAAiByD,IACxBzD,EAAiByD,KAGrBzD,EAAiBmF,EACjB1B,EAAcM,GAIlB,IAAIwB,EAAOd,EAAW7S,EAAU8S,EAAW/S,EACvC6T,EAAOb,EAAW/S,EAAUgT,EAAWjT,EACvCmE,GAAQ+M,GAAgBqB,EAAmBjU,EAAMpF,eAAiB0a,EAAOA,EAAOrV,EAAMrF,eAAiB2a,EAAOA,GAG9GzF,IAAiB,EAAIjQ,EAAKrI,aAAesO,EAAiBD,GAI9D,GAHAkK,GAAkBlK,GAGdC,EAAiB6N,EAEjBP,EAAQtD,cAAgB,MACrB,CAGH,IAAI0F,GAAuBpC,EAAQtD,cACnCsD,EAAQtD,eAAiBA,GACrBsD,EAAQtD,cAAgB,IAAGsD,EAAQtD,cAAgB,GACvDA,GAAgBsD,EAAQtD,cAAgB0F,EAC5C,CAGA,GAAIN,GAAmBtB,GAAwBsB,EAAkBtB,EAE7DR,EAAQrD,eAAiB,MACtB,CAGH,IAAI0F,GAAwBrC,EAAQrD,eACpCqD,EAAQrD,gBAAkBA,EACtBqD,EAAQrD,gBAAkByD,IAAaJ,EAAQrD,gBAAkByD,GACjEJ,EAAQrD,eAAiByD,IAAaJ,EAAQrD,eAAiByD,GACnEzD,EAAiBqD,EAAQrD,eAAiB0F,EAC9C,CAGA,IAAInC,GAAW5R,EAAUoO,GAAgBiE,EAAWhE,EAChDwD,GAAW5R,EAAUmO,GAAgBkE,EAAWjE,EAG9C/P,EAAM7I,UAAY6I,EAAM5I,aAC1B4I,EAAMjH,aAAa9J,GAAKqkB,GAAWtT,EAAMrF,YACzCqF,EAAMjH,aAAa7J,GAAKqkB,GAAWvT,EAAMrF,YACzCqF,EAAMhH,YAAcwb,EAAWjB,GAAWkB,EAAWnB,IAAYtT,EAAMpF,gBAGrEqF,EAAM9I,UAAY8I,EAAM7I,aAC1B6I,EAAMlH,aAAa9J,GAAKqkB,GAAWrT,EAAMtF,YACzCsF,EAAMlH,aAAa7J,GAAKqkB,GAAWtT,EAAMtF,YACzCsF,EAAMjH,YAAc0b,EAAWnB,GAAWoB,EAAWrB,IAAYrT,EAAMrF,eAE/E,CArHY,CAsHhB,CACJ,CAEH,EAhWD,EAmWO,WAES5U,EAAQC,EAASI,GAQjC,IAAI6pB,EAAQ,CAAC,EAEblqB,EAAOC,QAAUiqB,EAEjB,IAAI5P,EAAOja,EAAoB,GAC3BiC,EAASjC,EAAoB,IAEjC,WAQI6pB,EAAMtoB,OAAS,SAASwO,GACpB,OAAO9N,EAAOQ,OAAO,CACjB0Y,MAAO,CAAC,EACRjU,KAAM,GACN+jB,eAAgB,GAChBQ,gBAAiB,GACjBC,aAAc,IACf3b,EACP,EASA8Z,EAAM/gB,OAAS,SAASyQ,EAAO2J,EAAY5F,GACvC,IAcI5D,EACAF,EACAtZ,EAhBAmvB,EAAapV,EAAKnR,OAClBwmB,EAAarV,EAAK1Y,OAClBguB,EAAgBtV,EAAK+D,UACrBwR,EAAajW,EAAM4B,MACnBsU,EAAYlW,EAAMrS,KAClBwoB,EAAkBD,EAAU1sB,OAC5B4sB,EAAiBD,EACjBzE,EAAiB1R,EAAM0R,eACvBS,EAAenS,EAAMmS,aACrBD,EAAkBlS,EAAMkS,gBACxBmE,EAAmB1M,EAAWngB,OAC9B8sB,EAAsB,EACtBC,EAAoB,EACpBC,EAAuB,EAK3B,IAAK7vB,EAAI,EAAGA,EAAI0vB,EAAkB1vB,IAC9BwZ,EAAYwJ,EAAWhjB,GACvBsZ,EAAOE,EAAUF,KAEbA,GAEIA,EAAKC,WAELgS,EAAgBsE,KAA0BvW,GAI9C6V,EAAW7V,EAAME,EAAW4D,KAG5B9D,EAAO8V,EAAW5V,EAAW4D,GAC7BkS,EAAWhW,EAAKvJ,IAAMuJ,EAGtByR,EAAe4E,KAAyBrW,EACxCiW,EAAUE,KAAoBnW,GAQtC,IAHAmW,EAAiB,EACjBD,EAAkBD,EAAU1sB,OAEvB7C,EAAI,EAAGA,EAAIwvB,EAAiBxvB,IAC7BsZ,EAAOiW,EAAUvvB,GAGbsZ,EAAKmE,aAAeL,EAEpBmS,EAAUE,KAAoBnW,GAE9B+V,EAAc/V,GAAM,EAAO8D,GAGvB9D,EAAKE,UAAUC,MAAMrB,aAAe,GAAKkB,EAAKE,UAAUE,MAAMtB,aAAe,EAC7EmX,EAAUE,KAAoBnW,GAG9BkS,EAAaoE,KAAuBtW,SAC7BgW,EAAWhW,EAAKvJ,MAM/Bwf,EAAU1sB,SAAW4sB,IACrBF,EAAU1sB,OAAS4sB,GAGnB1E,EAAeloB,SAAW8sB,IAC1B5E,EAAeloB,OAAS8sB,GAGxBnE,EAAa3oB,SAAW+sB,IACxBpE,EAAa3oB,OAAS+sB,GAGtBrE,EAAgB1oB,SAAWgtB,IAC3BtE,EAAgB1oB,OAASgtB,EAEjC,EAQAlG,EAAMnR,MAAQ,SAASa,GAMnB,OALAA,EAAM4B,MAAQ,CAAC,EACf5B,EAAMrS,KAAKnE,OAAS,EACpBwW,EAAM0R,eAAeloB,OAAS,EAC9BwW,EAAMkS,gBAAgB1oB,OAAS,EAC/BwW,EAAMmS,aAAa3oB,OAAS,EACrBwW,CACX,CAEH,EA9HD,EAiIO,WAES5Z,EAAQC,EAASI,GAEjC,IAAIgwB,EAASrwB,EAAOC,QAAUI,EAAoB,IAElDgwB,EAAOvgB,KAAOzP,EAAoB,IAClCgwB,EAAOvP,OAASzgB,EAAoB,IACpCgwB,EAAOzgB,KAAOvP,EAAoB,GAClCgwB,EAAOvnB,OAASzI,EAAoB,GACpCgwB,EAAOhW,UAAYha,EAAoB,GACvCgwB,EAAO/tB,OAASjC,EAAoB,GACpCgwB,EAAOpZ,UAAY5W,EAAoB,GACvCgwB,EAAOC,WAAajwB,EAAoB,IACxCgwB,EAAO/R,WAAaje,EAAoB,IACxCgwB,EAAO3S,QAAUrd,EAAoB,IACrCgwB,EAAO/M,SAAWjjB,EAAoB,IACtCgwB,EAAOrG,OAAS3pB,EAAoB,IACpCgwB,EAAO/Z,OAASjW,EAAoB,GACpCgwB,EAAOE,KAAOlwB,EAAoB,IAClCgwB,EAAO5L,MAAQpkB,EAAoB,IACnCgwB,EAAOG,gBAAkBnwB,EAAoB,IAC7CgwB,EAAO/V,KAAOja,EAAoB,GAClCgwB,EAAOnG,MAAQ7pB,EAAoB,IACnCgwB,EAAO/I,OAASjnB,EAAoB,IACpCgwB,EAAOI,MAAQpwB,EAAoB,IACnCgwB,EAAOK,OAASrwB,EAAoB,IACpCgwB,EAAOpG,SAAW5pB,EAAoB,IACtCgwB,EAAOM,OAAStwB,EAAoB,IACpCgwB,EAAOO,IAAMvwB,EAAoB,IACjCgwB,EAAOxgB,SAAWxP,EAAoB,GACtCgwB,EAAOQ,IAAMxwB,EAAoB,IACjCgwB,EAAOnmB,OAAS7J,EAAoB,GACpCgwB,EAAOxkB,SAAWxL,EAAoB,GACtCgwB,EAAOS,MAAQzwB,EAAoB,IAGnCgwB,EAAOrG,OAAO+G,IAAMV,EAAOM,OAAOI,IAClCV,EAAO/tB,OAAOyE,WAAWspB,EAAOrG,OAAQ,MAAO,qDAGxC,WAEShqB,EAAQC,EAASI,GAQjC,IAAIgwB,EAAS,CAAC,EAEdrwB,EAAOC,QAAUowB,EAEjB,IAAI/I,EAASjnB,EAAoB,IAC7BiC,EAASjC,EAAoB,IAEjC,WAQIgwB,EAAOxvB,KAAO,YAQdwvB,EAAOxI,QAAkB,SAQzBwI,EAAOxH,KAAO,GAQdwH,EAAO/H,KAAO,GAUd+H,EAAO1H,IAAM,WACTrB,EAAOqB,IAAI0H,EAAQ5pB,MAAMvE,UAAU8B,MAAMvD,KAAK0C,WAClD,EAUAktB,EAAOW,OAAS,SAASptB,EAAM4D,GAE3B,OADA5D,EAAOA,EAAKqC,QAAQ,WAAY,IACzB3D,EAAOgG,gBAAgB+nB,EAAQzsB,EAAM4D,EAChD,EAUA6oB,EAAOY,MAAQ,SAASrtB,EAAM4D,GAE1B,OADA5D,EAAOA,EAAKqC,QAAQ,WAAY,IACzB3D,EAAOkG,eAAe6nB,EAAQzsB,EAAM4D,EAC/C,CAEH,EAxED,EA2EO,WAESxH,EAAQC,EAASI,GAWjC,IAAIiwB,EAAa,CAAC,EAElBtwB,EAAOC,QAAUqwB,EAEjB,IAAIrZ,EAAY5W,EAAoB,GAChCie,EAAaje,EAAoB,IACjCiC,EAASjC,EAAoB,GAC7BuP,EAAOvP,EAAoB,GAC3BygB,EAASzgB,EAAoB,IAC7B0G,EAAazE,EAAOyE,YAExB,WAeIupB,EAAWY,MAAQ,SAASjoB,EAAGC,EAAGioB,EAASC,EAAMC,EAAWC,EAAQ7a,GAOhE,IANA,IAGI8a,EAHAL,EAAQja,EAAUrV,OAAO,CAAE4O,MAAO,UAClCghB,EAAWvoB,EACXwoB,EAAWvoB,EAEX3I,EAAI,EAECmxB,EAAM,EAAGA,EAAMN,EAAMM,IAAO,CAGjC,IAFA,IAAIC,EAAY,EAEPC,EAAS,EAAGA,EAAST,EAASS,IAAU,CAC7C,IAAI7lB,EAAO0K,EAAS+a,EAAUC,EAAUG,EAAQF,EAAKH,EAAUhxB,GAE/D,GAAIwL,EAAM,CACN,IAAI8lB,EAAa9lB,EAAK/C,OAAOxD,IAAI0D,EAAI6C,EAAK/C,OAAOzD,IAAI2D,EACjD4oB,EAAY/lB,EAAK/C,OAAOxD,IAAIyD,EAAI8C,EAAK/C,OAAOzD,IAAI0D,EAEhD4oB,EAAaF,IACbA,EAAYE,GAEhBjiB,EAAKhG,UAAUmC,EAAM,CAAE9C,EAAe,GAAZ6oB,EAAiB5oB,EAAgB,GAAb2oB,IAE9CL,EAAWzlB,EAAK/C,OAAOxD,IAAIyD,EAAIooB,EAE/Bpa,EAAUe,QAAQkZ,EAAOnlB,GAEzBwlB,EAAWxlB,EACXxL,GAAK,CACT,MACIixB,GAAYH,CAEpB,CAEAI,GAAYE,EAAYL,EACxBE,EAAWvoB,CACf,CAEA,OAAOioB,CACX,EAaAZ,EAAWrpB,MAAQ,SAAS0Q,EAAWoa,EAAUC,EAAUC,EAAUC,EAAU9hB,GAG3E,IAFA,IAAI+G,EAASQ,EAAUR,OAEd5W,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIyZ,EAAQ7C,EAAO5W,EAAI,GACnB0Z,EAAQ9C,EAAO5W,GACf4xB,EAAcnY,EAAMhR,OAAOxD,IAAI0D,EAAI8Q,EAAMhR,OAAOzD,IAAI2D,EACpDkpB,EAAapY,EAAMhR,OAAOxD,IAAIyD,EAAI+Q,EAAMhR,OAAOzD,IAAI0D,EACnDopB,EAAcpY,EAAMjR,OAAOxD,IAAI0D,EAAI+Q,EAAMjR,OAAOzD,IAAI2D,EACpDopB,EAAarY,EAAMjR,OAAOxD,IAAIyD,EAAIgR,EAAMjR,OAAOzD,IAAI0D,EAEnDoH,EAAW,CACX2J,MAAOA,EACP0E,OAAQ,CAAEzV,EAAGmpB,EAAaL,EAAU7oB,EAAGipB,EAAcH,GACrD/X,MAAOA,EACP0E,OAAQ,CAAE1V,EAAGqpB,EAAaL,EAAU/oB,EAAGmpB,EAAcH,IAGrD/Z,EAAa7V,EAAOQ,OAAOuN,EAAUD,GAEzC6G,EAAUgB,cAAcN,EAAW2G,EAAW1c,OAAOuW,GACzD,CAIA,OAFAR,EAAUnH,OAAS,SAEZmH,CACX,EAYA2Y,EAAWiC,KAAO,SAAS5a,EAAWwZ,EAASC,EAAMoB,EAAYpiB,GAC7D,IACIshB,EACAe,EACAzY,EACAC,EACAyY,EALAvb,EAASQ,EAAUR,OAOvB,IAAKua,EAAM,EAAGA,EAAMN,EAAMM,IAAO,CAC7B,IAAKe,EAAM,EAAGA,EAAMtB,EAASsB,IACzBzY,EAAQ7C,EAAQsb,EAAM,EAAMf,EAAMP,GAClClX,EAAQ9C,EAAOsb,EAAOf,EAAMP,GAC5Bla,EAAUgB,cAAcN,EAAW2G,EAAW1c,OAAOU,EAAOQ,OAAO,CAAEkX,MAAOA,EAAOC,MAAOA,GAAS7J,KAGvG,GAAIshB,EAAM,EACN,IAAKe,EAAM,EAAGA,EAAMtB,EAASsB,IACzBzY,EAAQ7C,EAAOsb,GAAQf,EAAM,GAAKP,GAClClX,EAAQ9C,EAAOsb,EAAOf,EAAMP,GAC5Bla,EAAUgB,cAAcN,EAAW2G,EAAW1c,OAAOU,EAAOQ,OAAO,CAAEkX,MAAOA,EAAOC,MAAOA,GAAS7J,KAE/FoiB,GAAcC,EAAM,IACpBC,EAAQvb,EAAQsb,EAAM,GAAOf,EAAM,GAAKP,GACxCla,EAAUgB,cAAcN,EAAW2G,EAAW1c,OAAOU,EAAOQ,OAAO,CAAEkX,MAAO0Y,EAAOzY,MAAOA,GAAS7J,MAGnGoiB,GAAcC,EAAMtB,EAAU,IAC9BuB,EAAQvb,EAAQsb,EAAM,GAAOf,EAAM,GAAKP,GACxCla,EAAUgB,cAAcN,EAAW2G,EAAW1c,OAAOU,EAAOQ,OAAO,CAAEkX,MAAO0Y,EAAOzY,MAAOA,GAAS7J,KAInH,CAIA,OAFAuH,EAAUnH,OAAS,QAEZmH,CACX,EAeA2Y,EAAWqC,QAAU,SAAS1pB,EAAGC,EAAGioB,EAASC,EAAMC,EAAWC,EAAQ7a,GAClE,OAAO6Z,EAAWY,MAAMjoB,EAAGC,EAAGioB,EAASC,EAAMC,EAAWC,GAAQ,SAASsB,EAAQC,EAAQjB,EAAQF,EAAKH,EAAUhxB,GAC5G,IAAIuyB,EAAavuB,KAAKgB,IAAI6rB,EAAM7sB,KAAKqd,KAAKuP,EAAU,IAChD4B,EAAgBxB,EAAWA,EAASvoB,OAAOxD,IAAIyD,EAAIsoB,EAASvoB,OAAOzD,IAAI0D,EAAI,EAE/E,KAAIyoB,EAAMoB,GAAV,CAIApB,EAAMoB,EAAapB,EAEnB,IAAIsB,EAAQtB,EACR5tB,EAAMqtB,EAAU,EAAIO,EAExB,KAAIE,EAASoB,GAASpB,EAAS9tB,GAA/B,CAIU,IAANvD,GACAqP,EAAKhG,UAAU2nB,EAAU,CAAEtoB,GAAI2oB,GAAUT,EAAU,IAAM,EAAI,GAAK,IAAM4B,EAAe7pB,EAAG,IAG9F,IAAIyJ,EAAU4e,EAAWK,EAASmB,EAAgB,EAElD,OAAOtc,EAASxN,EAAI0J,EAAUif,EAASP,EAAWwB,EAAQjB,EAAQF,EAAKH,EAAUhxB,EATvE,CATA,CAmBd,GACJ,EAaA+vB,EAAW2C,cAAgB,SAAShqB,EAAGC,EAAG4e,EAAQoL,EAAM9vB,GAGpD,IAFA,IAAI6vB,EAAgBhc,EAAUrV,OAAO,CAAE4O,MAAO,mBAErCjQ,EAAI,EAAGA,EAAIunB,EAAQvnB,IAAK,CAC7B,IAAIud,EAAa,IACb2D,EAASX,EAAOW,OAAOxY,EAAI1I,GAAK2yB,EAAOpV,GAAa5U,EAAI9F,EAAQ8vB,EAC5D,CAAEtmB,QAASvD,IAAUmI,YAAa,EAAGC,SAAU,EAAGE,YAAa,KAAQK,KAAM,IACjFmG,EAAamG,EAAW1c,OAAO,CAAE8c,OAAQ,CAAEzV,EAAGA,EAAI1I,GAAK2yB,EAAOpV,GAAa5U,EAAGA,GAAK+Q,MAAOwH,IAE9FxK,EAAUe,QAAQib,EAAexR,GACjCxK,EAAUgB,cAAcgb,EAAe9a,EAC3C,CAEA,OAAO8a,CACX,EAEAlsB,EAAWupB,EAAY,gBAAiB,6DAaxCA,EAAW6C,IAAM,SAASlqB,EAAGC,EAAG8X,EAAOC,EAAQmS,GAC3C,IAAIrhB,EAAQnC,EAAK0D,WAAU,GACvB+f,EAAY,GACZC,EAAwB,IAARtS,EAAcqS,EAC9BE,EAAuB,GAARvS,EAAcqS,EAC7BG,EAAe,EAEfL,EAAMlc,EAAUrV,OAAO,CAAE4O,MAAO,QAChCzE,EAAO+U,EAAOC,UAAU9X,EAAGC,EAAG8X,EAAOC,EAAQ,CACzCrP,gBAAiB,CACbG,MAAOA,GAEXlE,QAAS,CACLC,OAAiB,GAATmT,GAEZ1P,QAAS,OAGbkiB,EAAS3S,EAAOW,OAAOxY,EAAIqqB,EAAcpqB,EAAIsqB,EAAcJ,EAAW,CACtExhB,gBAAiB,CACbG,MAAOA,GAEXN,SAAU,KAGViiB,EAAS5S,EAAOW,OAAOxY,EAAIsqB,EAAcrqB,EAAIsqB,EAAcJ,EAAW,CACtExhB,gBAAiB,CACbG,MAAOA,GAEXN,SAAU,KAGVkiB,EAAQrV,EAAW1c,OAAO,CAC1BqY,MAAOlO,EACP4S,OAAQ,CAAE1V,EAAGqqB,EAAcpqB,EAAGsqB,GAC9BxZ,MAAOyZ,EACP3U,UAAW,EACX1b,OAAQ,IAGRwwB,EAAQtV,EAAW1c,OAAO,CAC1BqY,MAAOlO,EACP4S,OAAQ,CAAE1V,EAAGsqB,EAAcrqB,EAAGsqB,GAC9BxZ,MAAO0Z,EACP5U,UAAW,EACX1b,OAAQ,IASZ,OANA6T,EAAUe,QAAQmb,EAAKpnB,GACvBkL,EAAUe,QAAQmb,EAAKM,GACvBxc,EAAUe,QAAQmb,EAAKO,GACvBzc,EAAUgB,cAAckb,EAAKQ,GAC7B1c,EAAUgB,cAAckb,EAAKS,GAEtBT,CACX,EAEApsB,EAAWupB,EAAY,MAAO,yCAmB9BA,EAAWuD,SAAW,SAAS5qB,EAAGC,EAAGioB,EAASC,EAAMC,EAAWC,EAAQkB,EAAYsB,EAAgBC,EAAiBC,GAChHD,EAAkBzxB,EAAOQ,OAAO,CAAE8J,QAASvD,KAAY0qB,GACvDC,EAAoB1xB,EAAOQ,OAAO,CAAEgc,UAAW,GAAK5M,OAAQ,CAAE3B,KAAM,OAAQ4O,SAAS,IAAW6U,GAEhG,IAAIH,EAAWvD,EAAWY,MAAMjoB,EAAGC,EAAGioB,EAASC,EAAMC,EAAWC,GAAQ,SAASsB,EAAQC,GACrF,OAAO/R,EAAOW,OAAOmR,EAAQC,EAAQiB,EAAgBC,EACzD,IAMA,OAJAzD,EAAWiC,KAAKsB,EAAU1C,EAASC,EAAMoB,EAAYwB,GAErDH,EAASrjB,MAAQ,YAEVqjB,CACX,EAEA9sB,EAAWupB,EAAY,WAAY,6DACtC,EA5TD,EA+TO,WAEStwB,EAAQC,EAASI,GAcjC,IAAIkwB,EAAO,CAAC,EAEZvwB,EAAOC,QAAUswB,EAEjB,IAAIjW,EAAOja,EAAoB,GAC3BiC,EAASjC,EAAoB,GAC7B0G,EAAazE,EAAOyE,YAExB,WASIwpB,EAAK3uB,OAAS,SAASwO,GACnB,IAAIC,EAAW,CACX2a,QAAS,CAAC,EACVpR,MAAO,CAAC,EACRkW,UAAW,GACXmE,YAAa,GACbC,aAAc,IAGlB,OAAO5xB,EAAOQ,OAAOuN,EAAUD,EACnC,EA2BAmgB,EAAKpnB,OAAS,SAAS4hB,EAAM5T,EAAQ0T,EAAQsJ,GACzC,IAAI5zB,EAAGkyB,EAAKf,EAGR0C,EACAC,EAHAvJ,EAAQD,EAAOC,MACfE,EAAUD,EAAKC,QAGfsJ,GAAc,EAElB,IAAK/zB,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CAChC,IAAIwL,EAAOoL,EAAO5W,GAElB,KAAIwL,EAAKqF,YAAe+iB,MAIpBrJ,EAAM9hB,UAAW+C,EAAK/C,OAAOxD,IAAIyD,EAAI6hB,EAAM9hB,OAAOzD,IAAI0D,GAAK8C,EAAK/C,OAAOzD,IAAI0D,EAAI6hB,EAAM9hB,OAAOxD,IAAIyD,GAC7F8C,EAAK/C,OAAOxD,IAAI0D,EAAI4hB,EAAM9hB,OAAOzD,IAAI2D,GAAK6C,EAAK/C,OAAOzD,IAAI2D,EAAI4hB,EAAM9hB,OAAOxD,IAAI0D,IADtF,CAIA,IAAIqrB,EAAYhE,EAAKiE,WAAWzJ,EAAMhf,GAGtC,IAAKA,EAAK0oB,QAAUF,EAAUjkB,KAAOvE,EAAK0oB,OAAOnkB,IAAM6jB,EAAa,CAE3DpoB,EAAK0oB,SAAUN,IAChBpoB,EAAK0oB,OAASF,GAElB,IAAIG,EAAQnE,EAAKoE,aAAaJ,EAAWxoB,EAAK0oB,QAI9C,IAAKhC,EAAMiC,EAAME,SAAUnC,GAAOiC,EAAMG,OAAQpC,IAC5C,IAAKf,EAAMgD,EAAMI,SAAUpD,GAAOgD,EAAMK,OAAQrD,IAAO,CACnD2C,EAAW9D,EAAKyE,aAAavC,EAAKf,GAClC0C,EAASpJ,EAAQqJ,GAEjB,IAAIY,EAAqBxC,GAAO8B,EAAUK,UAAYnC,GAAO8B,EAAUM,QAC5CnD,GAAO6C,EAAUO,UAAYpD,GAAO6C,EAAUQ,OAErEG,EAAqBzC,GAAO1mB,EAAK0oB,OAAOG,UAAYnC,GAAO1mB,EAAK0oB,OAAOI,QAChDnD,GAAO3lB,EAAK0oB,OAAOK,UAAYpD,GAAO3lB,EAAK0oB,OAAOM,QAGxEE,GAAqBC,GAClBA,GACId,GACA7D,EAAK4E,kBAAkBpK,EAAMqJ,EAAQroB,IAK7CA,EAAK0oB,SAAWF,GAAcU,IAAsBC,GAAsBf,KACrEC,IACDA,EAAS7D,EAAK6E,cAAcpK,EAASqJ,IACzC9D,EAAK8E,eAAetK,EAAMqJ,EAAQroB,GAE1C,CAIJA,EAAK0oB,OAASF,EAGdD,GAAc,CAClB,CA/CY,CAgDhB,CAGIA,IACAvJ,EAAK+E,UAAYS,EAAK+E,uBAAuBvK,GACrD,EAEAhkB,EAAWwpB,EAAM,SAAU,6CAQ3BA,EAAKxX,MAAQ,SAASgS,GAClBA,EAAKC,QAAU,CAAC,EAChBD,EAAKnR,MAAQ,CAAC,EACdmR,EAAK+E,UAAY,EACrB,EAEA/oB,EAAWwpB,EAAM,QAAS,4CAW1BA,EAAKoE,aAAe,SAASY,EAASC,GAClC,IAAIZ,EAAWrwB,KAAKgB,IAAIgwB,EAAQX,SAAUY,EAAQZ,UAC9CC,EAAStwB,KAAKiB,IAAI+vB,EAAQV,OAAQW,EAAQX,QAC1CC,EAAWvwB,KAAKgB,IAAIgwB,EAAQT,SAAUU,EAAQV,UAC9CC,EAASxwB,KAAKiB,IAAI+vB,EAAQR,OAAQS,EAAQT,QAE9C,OAAOxE,EAAKkF,cAAcb,EAAUC,EAAQC,EAAUC,EAC1D,EAWAxE,EAAKiE,WAAa,SAASzJ,EAAMhf,GAC7B,IAAI/C,EAAS+C,EAAK/C,OACd4rB,EAAWrwB,KAAKC,MAAMwE,EAAOzD,IAAI0D,EAAI8hB,EAAKkJ,aAC1CY,EAAStwB,KAAKC,MAAMwE,EAAOxD,IAAIyD,EAAI8hB,EAAKkJ,aACxCa,EAAWvwB,KAAKC,MAAMwE,EAAOzD,IAAI2D,EAAI6hB,EAAKmJ,cAC1Ca,EAASxwB,KAAKC,MAAMwE,EAAOxD,IAAI0D,EAAI6hB,EAAKmJ,cAE5C,OAAO3D,EAAKkF,cAAcb,EAAUC,EAAQC,EAAUC,EAC1D,EAaAxE,EAAKkF,cAAgB,SAASb,EAAUC,EAAQC,EAAUC,GACtD,MAAO,CACHzkB,GAAIskB,EAAW,IAAMC,EAAS,IAAMC,EAAW,IAAMC,EACrDH,SAAUA,EACVC,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EAEhB,EAWAxE,EAAKyE,aAAe,SAASpD,EAAQF,GACjC,MAAO,IAAME,EAAS,IAAMF,CAChC,EAWAnB,EAAK6E,cAAgB,SAASpK,EAASqJ,GACnC,IAAID,EAASpJ,EAAQqJ,GAAY,GACjC,OAAOD,CACX,EAWA7D,EAAK8E,eAAiB,SAAStK,EAAMqJ,EAAQroB,GACzC,IAGIxL,EAHAm1B,EAAY3K,EAAKnR,MACjB+b,EAASrb,EAAKhK,GACdslB,EAAexB,EAAOhxB,OAI1B,IAAK7C,EAAI,EAAGA,EAAIq1B,EAAcr1B,IAAK,CAC/B,IAAI0Z,EAAQma,EAAO7zB,GAEnB,KAAIwL,EAAKuE,KAAO2J,EAAM3J,IAAOvE,EAAKoF,UAAY8I,EAAM9I,UAApD,CAKA,IAAIb,EAAKqlB,EAAO5pB,EAAMkO,GAClBJ,EAAO6b,EAAUplB,GAEjBuJ,EACAA,EAAK,IAAM,EAEX6b,EAAUplB,GAAM,CAACvE,EAAMkO,EAAO,EAVtB,CAYhB,CAGAma,EAAO1wB,KAAKqI,EAChB,EAWAwkB,EAAK4E,kBAAoB,SAASpK,EAAMqJ,EAAQroB,GAC5C,IAEIxL,EAFAm1B,EAAY3K,EAAKnR,MACjB+b,EAASrb,EAAKhK,GAIlB8jB,EAAOxb,OAAOtW,EAAO6E,QAAQitB,EAAQroB,GAAO,GAE5C,IAAI6pB,EAAexB,EAAOhxB,OAG1B,IAAK7C,EAAI,EAAGA,EAAIq1B,EAAcr1B,IAAK,CAG/B,IAAIsZ,EAAO6b,EAAUC,EAAO5pB,EAAMqoB,EAAO7zB,KAErCsZ,IACAA,EAAK,IAAM,EACnB,CACJ,EAUA0W,EAAK+E,uBAAyB,SAASvK,GACnC,IAAIlR,EAKAxK,EAJAqmB,EAAY3K,EAAKnR,MACjBic,EAAWvzB,EAAOmB,KAAKiyB,GACvBI,EAAiBD,EAASzyB,OAC1BwW,EAAQ,GAIZ,IAAKvK,EAAI,EAAGA,EAAIymB,EAAgBzmB,IAC5BwK,EAAO6b,EAAUG,EAASxmB,IAItBwK,EAAK,GAAK,EACVD,EAAMlW,KAAKmW,UAEJ6b,EAAUG,EAASxmB,IAIlC,OAAOuK,CACX,CAEH,EA/TD,EAkUO,WAES5Z,EAAQC,EAASI,GAWjC,IAAImwB,EAAkB,CAAC,EAEvBxwB,EAAOC,QAAUuwB,EAEjB,IAAI3kB,EAAWxL,EAAoB,GAC/BwP,EAAWxP,EAAoB,GAC/BokB,EAAQpkB,EAAoB,IAC5BiW,EAASjW,EAAoB,GAC7BijB,EAAWjjB,EAAoB,IAC/Bie,EAAaje,EAAoB,IACjC4W,EAAY5W,EAAoB,GAChCiC,EAASjC,EAAoB,GAC7ByI,EAASzI,EAAoB,IAEjC,WAWImwB,EAAgB5uB,OAAS,SAASipB,EAAQza,GACtC,IAAIuU,GAASkG,EAASA,EAAOlG,MAAQ,QAAUvU,EAAUA,EAAQuU,MAAQ,MAEpEA,IACGkG,GAAUA,EAAO3Y,QAAU2Y,EAAO3Y,OAAO6jB,OACzCpR,EAAQF,EAAM7iB,OAAOipB,EAAO3Y,OAAO6jB,QAC5B3lB,GAAWA,EAAQsU,QAC1BC,EAAQF,EAAM7iB,OAAOwO,EAAQsU,UAE7BC,EAAQF,EAAM7iB,SACdU,EAAOqE,KAAK,sHAIpB,IAAIwR,EAAamG,EAAW1c,OAAO,CAC/B4O,MAAO,mBACPkO,OAAQiG,EAAM5a,SACd4U,OAAQ,CAAE1V,EAAG,EAAGC,EAAG,GACnB9F,OAAQ,IACR0b,UAAW,GACXE,iBAAkB,EAClB9M,OAAQ,CACJG,YAAa,UACbE,UAAW,KAIflC,EAAW,CACXE,KAAM,kBACNoU,MAAOA,EACPD,QAAS,KACT3Y,KAAM,KACNoM,WAAYA,EACZvG,gBAAiB,CACbC,SAAU,EACVC,KAAM,WACNC,MAAO,IAIXikB,EAAkB1zB,EAAOQ,OAAOuN,EAAUD,GAQ9C,OANAkG,EAAOC,GAAGsU,EAAQ,gBAAgB,WAC9B,IAAItT,EAAYN,EAAUM,UAAUsT,EAAOC,OAC3C0F,EAAgBrnB,OAAO6sB,EAAiBze,GACxCiZ,EAAgByF,eAAeD,EACnC,IAEOA,CACX,EASAxF,EAAgBrnB,OAAS,SAAS6sB,EAAiB7e,GAC/C,IAAIwN,EAAQqR,EAAgBrR,MACxBxM,EAAa6d,EAAgB7d,WAC7BpM,EAAOiqB,EAAgBjqB,KAE3B,GAAqB,IAAjB4Y,EAAMM,QACN,GAAK9M,EAAW8B,MAsBZpK,EAAS5L,IAAIkU,EAAW8B,OAAO,GAC/B9B,EAAWuG,OAASiG,EAAM5a,cAtB1B,IAAK,IAAIxJ,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAE/B,GADAwL,EAAOoL,EAAO5W,GACVuI,EAAOS,SAASwC,EAAK/C,OAAQ2b,EAAM5a,WAC5BuZ,EAASK,WAAW5X,EAAK6F,gBAAiBokB,EAAgBpkB,iBACjE,IAAK,IAAItN,EAAIyH,EAAK5H,MAAMf,OAAS,EAAI,EAAI,EAAGkB,EAAIyH,EAAK5H,MAAMf,OAAQkB,IAAK,CACpE,IAAIoQ,EAAO3I,EAAK5H,MAAMG,GACtB,GAAIuH,EAAStC,SAASmL,EAAK3L,SAAU4b,EAAM5a,UAAW,CAClDoO,EAAWuG,OAASiG,EAAM5a,SAC1BoO,EAAW8B,MAAQ+b,EAAgBjqB,KAAOA,EAC1CoM,EAAWwG,OAAS,CAAE1V,EAAG0b,EAAM5a,SAASd,EAAI8C,EAAKhC,SAASd,EAAGC,EAAGyb,EAAM5a,SAASb,EAAI6C,EAAKhC,SAASb,GACjGiP,EAAW+G,OAASnT,EAAKxB,MAEzBsF,EAAS5L,IAAI8H,GAAM,GACnBuK,EAAOQ,QAAQkf,EAAiB,YAAa,CAAErR,MAAOA,EAAO5Y,KAAMA,IAEnE,KACJ,CACJ,OAQZoM,EAAW8B,MAAQ+b,EAAgBjqB,KAAO,KAC1CoM,EAAWwG,OAAS,KAEhB5S,GACAuK,EAAOQ,QAAQkf,EAAiB,UAAW,CAAErR,MAAOA,EAAO5Y,KAAMA,GAE7E,EAQAykB,EAAgByF,eAAiB,SAASD,GACtC,IAAIrR,EAAQqR,EAAgBrR,MACxBuR,EAAcvR,EAAMS,aAEpB8Q,EAAY7Q,WACZ/O,EAAOQ,QAAQkf,EAAiB,YAAa,CAAErR,MAAOA,IAEtDuR,EAAY5Q,WACZhP,EAAOQ,QAAQkf,EAAiB,YAAa,CAAErR,MAAOA,IAEtDuR,EAAY3Q,SACZjP,EAAOQ,QAAQkf,EAAiB,UAAW,CAAErR,MAAOA,IAGxDF,EAAMwB,kBAAkBtB,EAC5B,CA2GH,EA7OD,EAgPO,WAES3kB,EAAQC,EAASI,GAUjC,IAAIowB,EAAQ,CAAC,EAEbzwB,EAAOC,QAAUwwB,EAEjB,IAAIvmB,EAAS7J,EAAoB,GAC7Bga,EAAYha,EAAoB,GAChCyI,EAASzI,EAAoB,GAC7BygB,EAASzgB,EAAoB,IAC7BwL,EAAWxL,EAAoB,IAEnC,WASIowB,EAAMpV,SAAW,SAAStP,EAAMoL,GAO5B,IANA,IAAIoM,EAAa,GACbG,EAAevM,EAAO/T,OACtB4F,EAAS+C,EAAK/C,OACdqS,EAAWhB,EAAUgB,SACrB5R,EAAWX,EAAOW,SAEblJ,EAAI,EAAGA,EAAImjB,EAAcnjB,IAAK,CACnC,IAAIyZ,EAAQ7C,EAAO5W,GACf2jB,EAAelK,EAAM7V,MAAMf,OAC3BihB,EAA+B,IAAjBH,EAAqB,EAAI,EAE3C,GAAIza,EAASuQ,EAAMhR,OAAQA,GACvB,IAAK,IAAI1E,EAAI+f,EAAa/f,EAAI4f,EAAc5f,IAAK,CAC7C,IAAIoQ,EAAOsF,EAAM7V,MAAMG,GAEvB,GAAImF,EAASiL,EAAK1L,OAAQA,GAAS,CAC/B,IAAI+Q,EAAYsB,EAAS3G,EAAM3I,GAE/B,GAAIgO,EAAW,CACXwJ,EAAW7f,KAAKqW,GAChB,KACJ,CACJ,CACJ,CAER,CAEA,OAAOwJ,CACX,EAWAkN,EAAM0F,IAAM,SAAShf,EAAQif,EAAYC,EAAUC,GAC/CA,EAAWA,GAAY,OASvB,IAPA,IAAIC,EAAWrsB,EAAOK,MAAM6rB,EAAYC,GACpCG,EAAYtsB,EAAOC,UAAUD,EAAOkB,IAAIgrB,EAAYC,IACpDI,EAAqC,IAA7BJ,EAASptB,EAAImtB,EAAWntB,GAChCytB,EAAqC,IAA7BL,EAASntB,EAAIktB,EAAWltB,GAChCitB,EAAMrV,EAAOC,UAAU0V,EAAMC,EAAMF,EAAWF,EAAU,CAAE/rB,MAAOgsB,IACjEhT,EAAakN,EAAMpV,SAAS8a,EAAKhf,GAE5B5W,EAAI,EAAGA,EAAIgjB,EAAWngB,OAAQ7C,GAAK,EAAG,CAC3C,IAAIwZ,EAAYwJ,EAAWhjB,GAC3BwZ,EAAUhO,KAAOgO,EAAUE,MAAQF,EAAUC,KACjD,CAEA,OAAOuJ,CACX,EAUAkN,EAAMgE,OAAS,SAAStd,EAAQnO,EAAQ2tB,GAGpC,IAFA,IAAI/uB,EAAS,GAEJrH,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GACdkJ,EAAWX,EAAOW,SAASsC,EAAK/C,OAAQA,IACvCS,IAAaktB,IAAcltB,GAAYktB,IACxC/uB,EAAOlE,KAAKqI,EACpB,CAEA,OAAOnE,CACX,EASA6oB,EAAMjnB,MAAQ,SAAS2N,EAAQ3N,GAG3B,IAFA,IAAI5B,EAAS,GAEJrH,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GAElB,GAAIuI,EAAOS,SAASwC,EAAK/C,OAAQQ,GAC7B,IAAK,IAAIlF,EAA0B,IAAtByH,EAAK5H,MAAMf,OAAe,EAAI,EAAGkB,EAAIyH,EAAK5H,MAAMf,OAAQkB,IAAK,CACtE,IAAIoQ,EAAO3I,EAAK5H,MAAMG,GAEtB,GAAIwE,EAAOS,SAASmL,EAAK1L,OAAQQ,IAC1BqC,EAAStC,SAASmL,EAAK3L,SAAUS,GAAQ,CAC5C5B,EAAOlE,KAAKqI,GACZ,KACJ,CACJ,CAER,CAEA,OAAOnE,CACX,CAEH,EArHD,EAwHO,WAES5H,EAAQC,EAASI,GAUjC,IAAIqwB,EAAS,CAAC,EAEd1wB,EAAOC,QAAUywB,EAEjB,IAAI9gB,EAAOvP,EAAoB,GAC3BiC,EAASjC,EAAoB,GAC7B4W,EAAY5W,EAAoB,GAChCyI,EAASzI,EAAoB,GAC7BiW,EAASjW,EAAoB,GAC7B6J,EAAS7J,EAAoB,GAC7BokB,EAAQpkB,EAAoB,KAEhC,WAEI,IAAIu2B,EACAC,EAEkB,qBAAXlxB,SACPixB,EAAyBjxB,OAAOmxB,uBAAyBnxB,OAAOoxB,6BAC/BpxB,OAAOqxB,0BAA4BrxB,OAAOsxB,yBAC1C,SAASxgB,GAAW9Q,OAAOuxB,YAAW,WAAazgB,EAASnU,EAAOoD,MAAQ,GAAG,IAAO,GAAK,EAE3HmxB,EAAwBlxB,OAAOwxB,sBAAwBxxB,OAAOyxB,yBAC7BzxB,OAAO0xB,4BAA8B1xB,OAAO2xB,wBAGjF5G,EAAO6G,SAAW,GAClB7G,EAAO8G,WAAa,IAAO,GAU3B9G,EAAO9uB,OAAS,SAASwO,GACrB,IAAIC,EAAW,CACXwa,OAAQ,KACRnG,QAAS,KACTqR,OAAQ,KACRpR,MAAO,KACP8S,eAAgB,KAChBhN,OAAQ,CACJiN,YAAa,GACb9pB,MAAO,EACP+pB,aAAc,GACdC,SAAU,EACVC,cAAe,EACflN,YAAa,EACbmN,iBAAkB,EAClBC,wBAAyB,GACzBC,mBAAoB,GACpBC,qBAAsB,GACtBC,qBAAsB,GACtBC,eAAgB,IAEpB/nB,QAAS,CACL4Q,MAAO,IACPC,OAAQ,IACRiE,WAAY,EACZkT,WAAY,UACZC,oBAAqB,UACrBC,qBAAsB,OACtBC,YAAanoB,EAAQpH,OACrBwvB,SAAS,EACTC,YAAY,EACZC,cAAc,EACdC,WAAW,EACXC,WAAW,EACXC,iBAAiB,EACjBC,YAAY,EACZC,cAAc,EACdC,gBAAgB,EAChBC,iBAAiB,EACjBC,UAAU,EACVC,eAAe,EACfC,oBAAoB,EACpBC,SAAS,EACTC,mBAAmB,EACnBC,iBAAiB,EACjBC,mBAAmB,EACnBC,mBAAmB,IAIvBvnB,EAAS5P,EAAOQ,OAAOuN,EAAUD,GAoCrC,OAlCI8B,EAAO6jB,SACP7jB,EAAO6jB,OAAO/U,MAAQ9O,EAAO9B,QAAQ4Q,OAAS9O,EAAO6jB,OAAO/U,MAC5D9O,EAAO6jB,OAAO9U,OAAS/O,EAAO9B,QAAQ6Q,QAAU/O,EAAO6jB,OAAO9U,QAGlE/O,EAAOyS,MAAQvU,EAAQuU,MACvBzS,EAAO2Y,OAASza,EAAQya,OACxB3Y,EAAO6jB,OAAS7jB,EAAO6jB,QAAU2D,EAAcxnB,EAAO9B,QAAQ4Q,MAAO9O,EAAO9B,QAAQ6Q,QACpF/O,EAAOynB,QAAUznB,EAAO6jB,OAAO6D,WAAW,MAC1C1nB,EAAO2nB,SAAW,CAAC,EAEnB3nB,EAAOlJ,OAASkJ,EAAOlJ,QAAU,CAC7BzD,IAAK,CACD0D,EAAG,EACHC,EAAG,GAEP1D,IAAK,CACDyD,EAAGiJ,EAAO6jB,OAAO/U,MACjB9X,EAAGgJ,EAAO6jB,OAAO9U,SAKzB/O,EAAO4nB,WAAapJ,EACpBxe,EAAO9B,QAAQ2pB,gBAAiB,EAEE,IAA9B7nB,EAAO9B,QAAQ8U,YACfwL,EAAOsJ,cAAc9nB,EAAQA,EAAO9B,QAAQ8U,YAG5C5iB,EAAOuC,UAAUqN,EAAOwS,UACxBxS,EAAOwS,QAAQuV,YAAY/nB,EAAO6jB,QAG/B7jB,CACX,EAOAwe,EAAOK,IAAM,SAAS7e,IAClB,SAAUgoB,EAAKC,GACXjoB,EAAOulB,eAAiBb,EAAuBsD,GAE/CE,EAAcloB,EAAQioB,GAEtBzJ,EAAO5F,MAAM5Y,EAAQioB,GAErBjoB,EAAOynB,QAAQU,aAAanoB,EAAO9B,QAAQ8U,WAAY,EAAG,EAAGhT,EAAO9B,QAAQ8U,WAAY,EAAG,IAEvFhT,EAAO9B,QAAQwoB,WAAa1mB,EAAO9B,QAAQuoB,YAC3CjI,EAAO4J,MAAMpoB,EAAQA,EAAOynB,QAASQ,IAGrCjoB,EAAO9B,QAAQyoB,iBAAmB3mB,EAAO9B,QAAQuoB,YACjDjI,EAAO9qB,YAAYsM,EAAQA,EAAOynB,QAASQ,GAG/CjoB,EAAOynB,QAAQU,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,EAC9C,EAlBD,EAmBJ,EAOA3J,EAAO6J,KAAO,SAASroB,GACnB2kB,EAAsB3kB,EAAOulB,eACjC,EASA/G,EAAOsJ,cAAgB,SAAS9nB,EAAQgT,GACpC,IAAI9U,EAAU8B,EAAO9B,QACjB2lB,EAAS7jB,EAAO6jB,OAED,SAAf7Q,IACAA,EAAasV,EAAezE,IAGhC3lB,EAAQ8U,WAAaA,EACrB6Q,EAAO0E,aAAa,mBAAoBvV,GACxC6Q,EAAO/U,MAAQ5Q,EAAQ4Q,MAAQkE,EAC/B6Q,EAAO9U,OAAS7Q,EAAQ6Q,OAASiE,EACjC6Q,EAAO2E,MAAM1Z,MAAQ5Q,EAAQ4Q,MAAQ,KACrC+U,EAAO2E,MAAMzZ,OAAS7Q,EAAQ6Q,OAAS,IAC3C,EAkBAyP,EAAOiK,QAAU,SAASzoB,EAAQ8O,EAAOC,GACrC/O,EAAO9B,QAAQ4Q,MAAQA,EACvB9O,EAAO9B,QAAQ6Q,OAASA,EACxB/O,EAAOlJ,OAAOxD,IAAIyD,EAAIiJ,EAAOlJ,OAAOzD,IAAI0D,EAAI+X,EAC5C9O,EAAOlJ,OAAOxD,IAAI0D,EAAIgJ,EAAOlJ,OAAOzD,IAAI2D,EAAI+X,EAEV,IAA9B/O,EAAO9B,QAAQ8U,WACfwL,EAAOsJ,cAAc9nB,EAAQA,EAAO9B,QAAQ8U,aAE5ChT,EAAO6jB,OAAO/U,MAAQA,EACtB9O,EAAO6jB,OAAO9U,OAASA,EAE/B,EAeAyP,EAAOkK,OAAS,SAAS1oB,EAAQ6F,EAAS8iB,EAASC,GAC/CA,EAA2B,qBAAXA,GAAyBA,EACzC/iB,EAAUzV,EAAO2C,QAAQ8S,GAAWA,EAAU,CAACA,GAC/C8iB,EAAUA,GAAW,CACjB5xB,EAAG,EACHC,EAAG,GASP,IALA,IAAIF,EAAS,CACTzD,IAAK,CAAE0D,EAAGI,IAAUH,EAAGG,KACvB7D,IAAK,CAAEyD,GAAII,IAAUH,GAAIG,MAGpB9I,EAAI,EAAGA,EAAIwX,EAAQ3U,OAAQ7C,GAAK,EAAG,CACxC,IAAIyB,EAAS+V,EAAQxX,GACjBgF,EAAMvD,EAAOgH,OAAShH,EAAOgH,OAAOzD,IAAOvD,EAAOuD,KAAOvD,EAAO+H,UAAY/H,EAC5EwD,EAAMxD,EAAOgH,OAAShH,EAAOgH,OAAOxD,IAAOxD,EAAOwD,KAAOxD,EAAO+H,UAAY/H,EAE5EuD,GAAOC,IACHD,EAAI0D,EAAID,EAAOzD,IAAI0D,IACnBD,EAAOzD,IAAI0D,EAAI1D,EAAI0D,GAEnBzD,EAAIyD,EAAID,EAAOxD,IAAIyD,IACnBD,EAAOxD,IAAIyD,EAAIzD,EAAIyD,GAEnB1D,EAAI2D,EAAIF,EAAOzD,IAAI2D,IACnBF,EAAOzD,IAAI2D,EAAI3D,EAAI2D,GAEnB1D,EAAI0D,EAAIF,EAAOxD,IAAI0D,IACnBF,EAAOxD,IAAI0D,EAAI1D,EAAI0D,GAE/B,CAGA,IAAI8X,EAAShY,EAAOxD,IAAIyD,EAAID,EAAOzD,IAAI0D,EAAK,EAAI4xB,EAAQ5xB,EACpDgY,EAAUjY,EAAOxD,IAAI0D,EAAIF,EAAOzD,IAAI2D,EAAK,EAAI2xB,EAAQ3xB,EACrD6xB,EAAa7oB,EAAO6jB,OAAO9U,OAC3B+Z,EAAY9oB,EAAO6jB,OAAO/U,MAC1Bia,EAAaD,EAAYD,EACzBG,EAAala,EAAQC,EACrBvT,EAAS,EACTC,EAAS,EAGTutB,EAAaD,EACbttB,EAASutB,EAAaD,EAEtBvtB,EAASutB,EAAaC,EAI1BhpB,EAAO9B,QAAQmoB,WAAY,EAG3BrmB,EAAOlJ,OAAOzD,IAAI0D,EAAID,EAAOzD,IAAI0D,EACjCiJ,EAAOlJ,OAAOxD,IAAIyD,EAAID,EAAOzD,IAAI0D,EAAI+X,EAAQtT,EAC7CwE,EAAOlJ,OAAOzD,IAAI2D,EAAIF,EAAOzD,IAAI2D,EACjCgJ,EAAOlJ,OAAOxD,IAAI0D,EAAIF,EAAOzD,IAAI2D,EAAI+X,EAAStT,EAG1CmtB,IACA5oB,EAAOlJ,OAAOzD,IAAI0D,GAAa,GAAR+X,EAAeA,EAAQtT,EAAU,GACxDwE,EAAOlJ,OAAOxD,IAAIyD,GAAa,GAAR+X,EAAeA,EAAQtT,EAAU,GACxDwE,EAAOlJ,OAAOzD,IAAI2D,GAAc,GAAT+X,EAAgBA,EAAStT,EAAU,GAC1DuE,EAAOlJ,OAAOxD,IAAI0D,GAAc,GAAT+X,EAAgBA,EAAStT,EAAU,IAI9DuE,EAAOlJ,OAAOzD,IAAI0D,GAAK4xB,EAAQ5xB,EAC/BiJ,EAAOlJ,OAAOxD,IAAIyD,GAAK4xB,EAAQ5xB,EAC/BiJ,EAAOlJ,OAAOzD,IAAI2D,GAAK2xB,EAAQ3xB,EAC/BgJ,EAAOlJ,OAAOxD,IAAI0D,GAAK2xB,EAAQ3xB,EAG3BgJ,EAAOyS,QACPF,EAAM0B,SAASjU,EAAOyS,MAAO,CACzB1b,GAAIiJ,EAAOlJ,OAAOxD,IAAIyD,EAAIiJ,EAAOlJ,OAAOzD,IAAI0D,GAAKiJ,EAAO6jB,OAAO/U,MAC/D9X,GAAIgJ,EAAOlJ,OAAOxD,IAAI0D,EAAIgJ,EAAOlJ,OAAOzD,IAAI2D,GAAKgJ,EAAO6jB,OAAO9U,SAGnEwD,EAAMyB,UAAUhU,EAAOyS,MAAOzS,EAAOlJ,OAAOzD,KAEpD,EAOAmrB,EAAOyK,mBAAqB,SAASjpB,GACjC,IAAIkpB,EAAclpB,EAAOlJ,OAAOxD,IAAIyD,EAAIiJ,EAAOlJ,OAAOzD,IAAI0D,EACtDoyB,EAAenpB,EAAOlJ,OAAOxD,IAAI0D,EAAIgJ,EAAOlJ,OAAOzD,IAAI2D,EACvDoyB,EAAeF,EAAclpB,EAAO9B,QAAQ4Q,MAC5Cua,EAAeF,EAAenpB,EAAO9B,QAAQ6Q,OAEjD/O,EAAOynB,QAAQU,aACXnoB,EAAO9B,QAAQ8U,WAAaoW,EAAc,EAAG,EAC7CppB,EAAO9B,QAAQ8U,WAAaqW,EAAc,EAAG,GAGjDrpB,EAAOynB,QAAQ/vB,WAAWsI,EAAOlJ,OAAOzD,IAAI0D,GAAIiJ,EAAOlJ,OAAOzD,IAAI2D,EACtE,EAOAwnB,EAAO8K,iBAAmB,SAAStpB,GAC/BA,EAAOynB,QAAQU,aAAanoB,EAAO9B,QAAQ8U,WAAY,EAAG,EAAGhT,EAAO9B,QAAQ8U,WAAY,EAAG,EAC/F,EAQAwL,EAAO5F,MAAQ,SAAS5Y,EAAQioB,GAC5B,IAaI55B,EAbA4qB,EAAY7oB,EAAOoD,MACnBmlB,EAAS3Y,EAAO2Y,OAChBC,EAAQD,EAAOC,MACfiL,EAAS7jB,EAAO6jB,OAChB4D,EAAUznB,EAAOynB,QACjBvpB,EAAU8B,EAAO9B,QACjBqa,EAASvY,EAAOuY,OAEhBlT,EAAYN,EAAUM,UAAUuT,GAChCtT,EAAiBP,EAAUO,eAAesT,GAC1CsN,EAAahoB,EAAQqoB,WAAaroB,EAAQioB,oBAAsBjoB,EAAQgoB,WACxEjhB,EAAS,GACTC,EAAc,GAGdL,EAAQ,CACR4G,UAAWkN,EAAOJ,OAAO9M,WAgB7B,GAbArH,EAAOQ,QAAQ5E,EAAQ,eAAgB6E,GAGnC7E,EAAOupB,oBAAsBrD,GAC7BsD,EAAiBxpB,EAAQkmB,GAG7BuB,EAAQgC,yBAA2B,YACnChC,EAAQrnB,UAAY,cACpBqnB,EAAQiC,SAAS,EAAG,EAAG7F,EAAO/U,MAAO+U,EAAO9U,QAC5C0Y,EAAQgC,yBAA2B,cAG/BvrB,EAAQmoB,UAAW,CAEnB,IAAKh4B,EAAI,EAAGA,EAAIgX,EAAUnU,OAAQ7C,IAAK,CACnC,IAAIwL,EAAOwL,EAAUhX,GACjBuI,EAAOW,SAASsC,EAAK/C,OAAQkJ,EAAOlJ,SACpCmO,EAAOzT,KAAKqI,EACpB,CAGA,IAAKxL,EAAI,EAAGA,EAAIiX,EAAepU,OAAQ7C,IAAK,CACxC,IAAI4X,EAAaX,EAAejX,GAC5ByZ,EAAQ7B,EAAW6B,MACnBC,EAAQ9B,EAAW8B,MACnByF,EAAcvH,EAAWuG,OACzBiB,EAAcxH,EAAWwG,OAEzB3E,IAAO0F,EAAcxV,EAAOiB,IAAI6O,EAAMjQ,SAAUoO,EAAWuG,SAC3DzE,IAAO0F,EAAczV,EAAOiB,IAAI8O,EAAMlQ,SAAUoO,EAAWwG,SAE1De,GAAgBC,KAGjB7W,EAAOS,SAAS2I,EAAOlJ,OAAQ0W,IAAgB5W,EAAOS,SAAS2I,EAAOlJ,OAAQ2W,KAC9EvI,EAAY1T,KAAKyU,GACzB,CAGAuY,EAAOyK,mBAAmBjpB,GAGtBA,EAAOyS,QACPF,EAAM0B,SAASjU,EAAOyS,MAAO,CACzB1b,GAAIiJ,EAAOlJ,OAAOxD,IAAIyD,EAAIiJ,EAAOlJ,OAAOzD,IAAI0D,GAAKiJ,EAAO9B,QAAQ4Q,MAChE9X,GAAIgJ,EAAOlJ,OAAOxD,IAAI0D,EAAIgJ,EAAOlJ,OAAOzD,IAAI2D,GAAKgJ,EAAO9B,QAAQ6Q,SAGpEwD,EAAMyB,UAAUhU,EAAOyS,MAAOzS,EAAOlJ,OAAOzD,KAEpD,MACI6R,EAAcI,EACdL,EAASI,EAEyB,IAA9BrF,EAAO9B,QAAQ8U,YACfhT,EAAOynB,QAAQU,aAAanoB,EAAO9B,QAAQ8U,WAAY,EAAG,EAAGhT,EAAO9B,QAAQ8U,WAAY,EAAG,IAI9F9U,EAAQqoB,YAAe5N,EAAON,gBAAkBna,EAAQsoB,aAEzDhI,EAAOvZ,OAAOjF,EAAQiF,EAAQwiB,IAE1BvpB,EAAQmpB,iBACR7I,EAAOmL,gBAAgB3pB,EAAQiF,EAAQwiB,GAG3CjJ,EAAOoL,eAAe5pB,EAAQiF,EAAQwiB,IAGtCvpB,EAAQ0oB,YACRpI,EAAOqL,WAAW7pB,EAAQiF,EAAQwiB,IAElCvpB,EAAQ8oB,UAAY9oB,EAAQgpB,qBAC5B1I,EAAOsL,SAAS9pB,EAAQiF,EAAQwiB,GAEhCvpB,EAAQ+oB,eACRzI,EAAOuL,cAAc/pB,EAAQiF,EAAQwiB,GAErCvpB,EAAQ2oB,cACRrI,EAAOxa,aAAahE,EAAQiF,EAAQwiB,GAEpCvpB,EAAQipB,SACR3I,EAAOwL,QAAQhqB,EAAQiF,EAAQwiB,GAE/BvpB,EAAQ6oB,iBACRvI,EAAOyL,YAAYjqB,EAAQ2Y,EAAOjR,MAAMrS,KAAMoyB,GAE9CvpB,EAAQ4oB,gBACRtI,EAAOnN,WAAWrR,EAAQ2Y,EAAOjR,MAAMrS,KAAMoyB,GAE7CvpB,EAAQkpB,mBACR5I,EAAO0L,cAAclqB,EAAQiF,EAAQwiB,GAErCvpB,EAAQqpB,mBACR/I,EAAO2L,cAAcnqB,EAAQA,EAAOyS,MAAOgV,GAE/CjJ,EAAOtZ,YAAYA,EAAauiB,GAE5BvpB,EAAQmoB,WAER7H,EAAO8K,iBAAiBtpB,GAG5BoE,EAAOQ,QAAQ5E,EAAQ,cAAe6E,GAGtC0T,EAAOE,YAAcroB,EAAOoD,MAAQylB,CACxC,EAUAuF,EAAO4J,MAAQ,SAASpoB,EAAQynB,EAASQ,GAWrC,IAVA,IAAItP,EAAS3Y,EAAO2Y,OAChBC,EAAQD,EAAOC,MACf3T,EAASF,EAAUM,UAAUuT,GAC7B3mB,EAAQ,EACR6c,EAAQ,GACRC,EAAS,GACThY,EAAI,EACJC,EAAI,EAGC3I,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,GAAK,EACpC4D,GAASgT,EAAO5W,GAAG4D,MAAMf,OAI7B,IAAIk5B,EAAW,CACX,KAAQn4B,EACR,KAAQgT,EAAO/T,OACf,KAAQ6T,EAAUO,eAAesT,GAAO1nB,OACxC,KAAQ6T,EAAUQ,cAAcqT,GAAO1nB,OACvC,KAAQynB,EAAOjR,MAAMrS,KAAKnE,QAY9B,IAAK,IAAIvB,KART83B,EAAQrnB,UAAY,UACpBqnB,EAAQiC,SAAS3yB,EAAGC,EAAW,IAAR8X,EAAaC,GAEpC0Y,EAAQ4C,KAAO,aACf5C,EAAQ6C,aAAe,MACvB7C,EAAQ8C,UAAY,QAGJH,EAAU,CACtB,IAAII,EAAUJ,EAASz6B,GAEvB83B,EAAQrnB,UAAY,OACpBqnB,EAAQgD,SAAS96B,EAAKoH,EAAI+X,EAAO9X,EAAI,GAGrCywB,EAAQrnB,UAAY,OACpBqnB,EAAQgD,SAASD,EAASzzB,EAAI+X,EAAO9X,EAAI,IAEzCD,GAAK+X,CACT,CACJ,EASA0P,EAAO9qB,YAAc,SAASsM,EAAQynB,GAClC,IAAI9O,EAAS3Y,EAAO2Y,OAChBJ,EAASvY,EAAOuY,OAChBkN,EAAelN,EAAOkN,aACtBQ,EAAiB1N,EAAO0N,eACxBJ,EAA0BtN,EAAOsN,wBACjCC,EAAqBvN,EAAOuN,mBAC5BE,EAAuBzN,EAAOyN,qBAC9BD,EAAuBxN,EAAOwN,qBAC9B2E,EAA4B/R,EAAOJ,OAAOG,oBAC1CiS,EAAkBhS,EAAOJ,OAAOC,UAEhCoS,EAAYC,EAAMpF,GAClBqF,EAAcD,EAAM5E,GACpB8E,EAAkBF,EAAM/E,GACxBkF,EAAoBH,EAAM7E,GAC1BiF,EAAoBJ,EAAM9E,GAC1BmF,EAAuBL,EAAMhF,GAC7BsF,EAAYD,EAAuBN,GAAc,EACjDQ,EAAwB/4B,KAAKg5B,MAAMT,EAAYD,GAC/CW,EAAO,IAAOV,GAAc,EAE5BW,EAAc,EACdC,EAAM,GACN1c,EAAQ,GACRC,EAAS,GACThY,EAAI,GACJC,EAAI,GAGRywB,EAAQrnB,UAAY,UACpBqnB,EAAQiC,SAAS,EAAG,GAAU,EAAN8B,EAAkB,EAAR1c,EAAY,GAAIC,GAGlDyP,EAAO1H,OACH2Q,EAAS1wB,EAAGC,EAAG8X,EAAOyc,EAAa9F,EAAav0B,OAChDmB,KAAKg5B,MAAMC,GAAO,OAClBA,EAAM9M,EAAO6G,UACb,SAASh3B,GAAK,OAAQo3B,EAAap3B,GAAKu8B,EAAa,CAAG,IAI5DpM,EAAO1H,OACH2Q,EAAS1wB,EAAIy0B,EAAM1c,EAAO9X,EAAG8X,EAAOyc,EAAazF,EAAmB50B,OACpEy5B,EAAgBjc,QAAQ,GAAK,MAC7B8P,EAAO8G,WAAaqF,GACpB,SAASt8B,GAAK,OAAQy3B,EAAmBz3B,GAAK08B,EAAmB,CAAG,IAIxEvM,EAAO1H,OACH2Q,EAAS1wB,EAAoB,GAAfy0B,EAAM1c,GAAY9X,EAAG8X,EAAOyc,EAAavF,EAAqB90B,OAC5Ew5B,EAA4B,OAC5Br4B,KAAKiK,IAAIlM,EAAOgD,MAAO43B,EAAoBI,GAA0B,EAAG,EAAG,GAAI,IAC/E,SAAS/8B,GAAK,OAAQ23B,EAAqB33B,GAAK28B,EAAqB,CAAG,IAI5ExM,EAAO1H,OACH2Q,EAAS1wB,EAAoB,GAAfy0B,EAAM1c,GAAY9X,EAAG8X,EAAOyc,EAAaxF,EAAqB70B,OAC5E+5B,EAAkBvc,QAAQ,GAAK,MAC/B,EAAKgc,EAA4BO,EAAoBzM,EAAO6G,UAC5D,SAASh3B,GAAK,OAAQ03B,EAAqB13B,GAAK48B,EAAqB,CAAG,IAI5EzM,EAAO1H,OACH2Q,EAAS1wB,EAAoB,GAAfy0B,EAAM1c,GAAY9X,EAAG8X,EAAOyc,EAAatF,EAAe/0B,OACtE45B,EAAYpc,QAAQ,GAAK,MACzB,EAAKoc,EAActM,EAAO6G,UAC1B,SAASh3B,GAAK,OAAQ43B,EAAe53B,GAAKy8B,EAAe,CAAG,IAIhEtM,EAAO1H,OACH2Q,EAAS1wB,EAAoB,GAAfy0B,EAAM1c,GAAY9X,EAAG8X,EAAOyc,EAAa1F,EAAwB30B,OAC/Ei6B,EAASzc,QAAQ,GAAK,KACtByc,EAAWA,EAAWA,GACtB,SAAS98B,GAAK,OAAUw3B,EAAwBx3B,GAAKo3B,EAAap3B,GAAM88B,GAAa,GAAK,CAAG,GAErG,EAgBA3M,EAAO1H,OAAS,SAAS2Q,EAAS1wB,EAAGC,EAAG8X,EAAOC,EAAQ0c,EAAOntB,EAAOotB,EAAWC,GAE5ElE,EAAQtnB,YAAc,OACtBsnB,EAAQrnB,UAAY,OACpBqnB,EAAQpnB,UAAY,EACpBonB,EAAQiC,SAAS3yB,EAAGC,EAAI,EAAG8X,EAAO,GAGlC2Y,EAAQmE,YACRnE,EAAQoE,OAAO90B,EAAGC,EAAI,EAAI+X,EAAS3e,EAAOgD,MAAM,GAAMu4B,EAAM,IAAK,EAAG,IACpE,IAAK,IAAIt9B,EAAI,EAAGA,EAAIygB,EAAOzgB,GAAK,EAC5Bo5B,EAAQqE,OAAO/0B,EAAI1I,EAAG2I,EAAI,GAAK3I,EAAIo9B,EAAQ1c,EAAS3e,EAAOgD,MAAM,GAAMu4B,EAAMt9B,IAAK,EAAG,GAAK,IAE9Fo5B,EAAQsE,SAGRtE,EAAQrnB,UAAY,OAAShQ,EAAOgD,MAAM,GAAK,GAAKs4B,EAAW,EAAG,KAAO,aACzEjE,EAAQiC,SAAS3yB,EAAGC,EAAI,EAAG,EAAG,GAG9BywB,EAAQ4C,KAAO,aACf5C,EAAQ6C,aAAe,SACvB7C,EAAQ8C,UAAY,QACpB9C,EAAQrnB,UAAY,OACpBqnB,EAAQgD,SAASnsB,EAAOvH,EAAI+X,EAAO9X,EAAI,EAC3C,EASAwnB,EAAOtZ,YAAc,SAASA,EAAauiB,GAGvC,IAFA,IAAIh5B,EAAIg5B,EAECp5B,EAAI,EAAGA,EAAI6W,EAAYhU,OAAQ7C,IAAK,CACzC,IAAI4X,EAAaf,EAAY7W,GAE7B,GAAK4X,EAAWjG,OAAOC,SAAYgG,EAAWuG,QAAWvG,EAAWwG,OAApE,CAGA,IAEIqU,EACAlvB,EAHAkW,EAAQ7B,EAAW6B,MACnBC,EAAQ9B,EAAW8B,MAUvB,GALI+Y,EADAhZ,EACQ9P,EAAOiB,IAAI6O,EAAMjQ,SAAUoO,EAAWuG,QAEtCvG,EAAWuG,OAGQ,QAA3BvG,EAAWjG,OAAO3B,KAClB5P,EAAEm9B,YACFn9B,EAAEu9B,IAAIlL,EAAM/pB,EAAG+pB,EAAM9pB,EAAG,EAAG,EAAG,EAAI3E,KAAKud,IACvCnhB,EAAEw9B,gBACC,CAUH,GARIr6B,EADAmW,EACM/P,EAAOiB,IAAI8O,EAAMlQ,SAAUoO,EAAWwG,QAEtCxG,EAAWwG,OAGrBhe,EAAEm9B,YACFn9B,EAAEo9B,OAAO/K,EAAM/pB,EAAG+pB,EAAM9pB,GAEO,WAA3BiP,EAAWjG,OAAO3B,KAMlB,IALA,IAGI6F,EAHAxI,EAAQ1D,EAAOkB,IAAItH,EAAKkvB,GACxBhY,EAAS9Q,EAAOsB,KAAKtB,EAAOU,UAAUgD,IACtCwwB,EAAQ75B,KAAKqd,KAAKtf,EAAOgD,MAAM6S,EAAW/U,OAAS,EAAG,GAAI,KAGrDkB,EAAI,EAAGA,EAAI85B,EAAO95B,GAAK,EAC5B8R,EAAS9R,EAAI,IAAM,EAAI,GAAK,EAE5B3D,EAAEq9B,OACEhL,EAAM/pB,EAAI2E,EAAM3E,GAAK3E,EAAI85B,GAASpjB,EAAO/R,EAAImN,EAAS,EACtD4c,EAAM9pB,EAAI0E,EAAM1E,GAAK5E,EAAI85B,GAASpjB,EAAO9R,EAAIkN,EAAS,GAKlEzV,EAAEq9B,OAAOl6B,EAAImF,EAAGnF,EAAIoF,EACxB,CAEIiP,EAAWjG,OAAOK,YAClB5R,EAAE4R,UAAY4F,EAAWjG,OAAOK,UAChC5R,EAAE0R,YAAc8F,EAAWjG,OAAOG,YAClC1R,EAAEs9B,UAGF9lB,EAAWjG,OAAOiN,UAClBxe,EAAE2R,UAAY6F,EAAWjG,OAAOG,YAChC1R,EAAEm9B,YACFn9B,EAAEu9B,IAAIlL,EAAM/pB,EAAG+pB,EAAM9pB,EAAG,EAAG,EAAG,EAAI3E,KAAKud,IACvCnhB,EAAEu9B,IAAIp6B,EAAImF,EAAGnF,EAAIoF,EAAG,EAAG,EAAG,EAAI3E,KAAKud,IACnCnhB,EAAEw9B,YACFx9B,EAAE09B,OA1DM,CA4DhB,CACJ,EAUA3N,EAAOvZ,OAAS,SAASjF,EAAQiF,EAAQwiB,GACrC,IAII5tB,EACA2I,EACAnU,EACA8O,EAPA1O,EAAIg5B,EAEJvpB,GADS8B,EAAO2Y,OACN3Y,EAAO9B,SACjBopB,EAAoBppB,EAAQopB,oBAAsBppB,EAAQqoB,WAM9D,IAAKl4B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAG3B,GAFAwL,EAAOoL,EAAO5W,GAETwL,EAAKmG,OAAOC,QAIjB,IAAK9C,EAAItD,EAAK5H,MAAMf,OAAS,EAAI,EAAI,EAAGiM,EAAItD,EAAK5H,MAAMf,OAAQiM,IAG3D,GAFAqF,EAAO3I,EAAK5H,MAAMkL,GAEbqF,EAAKxC,OAAOC,QAAjB,CASA,GANI/B,EAAQsoB,cAAgB3sB,EAAKqF,WAC7BzQ,EAAE29B,YAAc,GAAM5pB,EAAKxC,OAAOE,QACH,IAAxBsC,EAAKxC,OAAOE,UACnBzR,EAAE29B,YAAc5pB,EAAKxC,OAAOE,SAG5BsC,EAAKxC,OAAOM,QAAUkC,EAAKxC,OAAOM,OAAO+rB,UAAYnuB,EAAQqoB,WAAY,CAEzE,IAAIjmB,EAASkC,EAAKxC,OAAOM,OACrB+rB,EAAUC,EAAYtsB,EAAQM,EAAO+rB,SAEzC59B,EAAEiJ,UAAU8K,EAAK3K,SAASd,EAAGyL,EAAK3K,SAASb,GAC3CvI,EAAE2J,OAAOoK,EAAKnK,OAEd5J,EAAE89B,UACEF,EACAA,EAAQvd,OAASxO,EAAOG,QAAUH,EAAOC,OACzC8rB,EAAQtd,QAAUzO,EAAOI,QAAUJ,EAAOE,OAC1C6rB,EAAQvd,MAAQxO,EAAOC,OACvB8rB,EAAQtd,OAASzO,EAAOE,QAI5B/R,EAAE2J,QAAQoK,EAAKnK,OACf5J,EAAEiJ,WAAW8K,EAAK3K,SAASd,GAAIyL,EAAK3K,SAASb,EACjD,KAAO,CAEH,GAAIwL,EAAK5B,aACLnS,EAAEm9B,YACFn9B,EAAEu9B,IAAIxpB,EAAK3K,SAASd,EAAGyL,EAAK3K,SAASb,EAAGwL,EAAK5B,aAAc,EAAG,EAAIvO,KAAKud,QACpE,CACHnhB,EAAEm9B,YACFn9B,EAAEo9B,OAAOrpB,EAAK3L,SAAS,GAAGE,EAAGyL,EAAK3L,SAAS,GAAGG,GAE9C,IAAK,IAAI5E,EAAI,EAAGA,EAAIoQ,EAAK3L,SAAS3F,OAAQkB,KACjCoQ,EAAK3L,SAASzE,EAAI,GAAG2H,YAAcutB,EACpC74B,EAAEq9B,OAAOtpB,EAAK3L,SAASzE,GAAG2E,EAAGyL,EAAK3L,SAASzE,GAAG4E,GAE9CvI,EAAEo9B,OAAOrpB,EAAK3L,SAASzE,GAAG2E,EAAGyL,EAAK3L,SAASzE,GAAG4E,GAG9CwL,EAAK3L,SAASzE,GAAG2H,aAAeutB,GAChC74B,EAAEo9B,OAAOrpB,EAAK3L,UAAUzE,EAAI,GAAKoQ,EAAK3L,SAAS3F,QAAQ6F,EAAGyL,EAAK3L,UAAUzE,EAAI,GAAKoQ,EAAK3L,SAAS3F,QAAQ8F,GAIhHvI,EAAEq9B,OAAOtpB,EAAK3L,SAAS,GAAGE,EAAGyL,EAAK3L,SAAS,GAAGG,GAC9CvI,EAAEw9B,WACN,CAEK/tB,EAAQqoB,YAWT93B,EAAE4R,UAAY,EACd5R,EAAE0R,YAAcH,EAAO9B,QAAQkoB,qBAC/B33B,EAAEs9B,WAZFt9B,EAAE2R,UAAYoC,EAAKxC,OAAOI,UAEtBoC,EAAKxC,OAAOK,YACZ5R,EAAE4R,UAAYmC,EAAKxC,OAAOK,UAC1B5R,EAAE0R,YAAcqC,EAAKxC,OAAOG,YAC5B1R,EAAEs9B,UAGNt9B,EAAE09B,OAMV,CAEA19B,EAAE29B,YAAc,CArEJ,CAwExB,EAUA5N,EAAOoL,eAAiB,SAAS5pB,EAAQiF,EAAQwiB,GAC7C,IAEI5tB,EACA2I,EACAnU,EACA+D,EACA+K,EANA1O,EAAIg5B,EACJH,EAAoBtnB,EAAO9B,QAAQopB,kBAUvC,IAHA74B,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAG3B,GAFAwL,EAAOoL,EAAO5W,GAETwL,EAAKmG,OAAOC,QAIjB,IAAK9C,EAAItD,EAAK5H,MAAMf,OAAS,EAAI,EAAI,EAAGiM,EAAItD,EAAK5H,MAAMf,OAAQiM,IAAK,CAKhE,IAJAqF,EAAO3I,EAAK5H,MAAMkL,GAElB1O,EAAEo9B,OAAOrpB,EAAK3L,SAAS,GAAGE,EAAGyL,EAAK3L,SAAS,GAAGG,GAEzC5E,EAAI,EAAGA,EAAIoQ,EAAK3L,SAAS3F,OAAQkB,KAC7BoQ,EAAK3L,SAASzE,EAAI,GAAG2H,YAAcutB,EACpC74B,EAAEq9B,OAAOtpB,EAAK3L,SAASzE,GAAG2E,EAAGyL,EAAK3L,SAASzE,GAAG4E,GAE9CvI,EAAEo9B,OAAOrpB,EAAK3L,SAASzE,GAAG2E,EAAGyL,EAAK3L,SAASzE,GAAG4E,GAG9CwL,EAAK3L,SAASzE,GAAG2H,aAAeutB,GAChC74B,EAAEo9B,OAAOrpB,EAAK3L,UAAUzE,EAAI,GAAKoQ,EAAK3L,SAAS3F,QAAQ6F,EAAGyL,EAAK3L,UAAUzE,EAAI,GAAKoQ,EAAK3L,SAAS3F,QAAQ8F,GAIhHvI,EAAEq9B,OAAOtpB,EAAK3L,SAAS,GAAGE,EAAGyL,EAAK3L,SAAS,GAAGG,EAClD,CAGJvI,EAAE4R,UAAY,EACd5R,EAAE0R,YAAcH,EAAO9B,QAAQkoB,qBAC/B33B,EAAEs9B,QACN,EAUAvN,EAAOmL,gBAAkB,SAAS3pB,EAAQiF,EAAQwiB,GAC9C,IACI5tB,EAEAxL,EACA+D,EAJA3D,EAAIg5B,EAUR,IAHAh5B,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAG3B,GAFAwL,EAAOoL,EAAO5W,GAETwL,EAAKmG,OAAOC,SAAiC,IAAtBpG,EAAK5H,MAAMf,OAAvC,CAKA,IAFAzC,EAAEo9B,OAAOhyB,EAAKhD,SAAS,GAAGE,EAAG8C,EAAKhD,SAAS,GAAGG,GAEzC5E,EAAI,EAAGA,EAAIyH,EAAKhD,SAAS3F,OAAQkB,IAClC3D,EAAEq9B,OAAOjyB,EAAKhD,SAASzE,GAAG2E,EAAG8C,EAAKhD,SAASzE,GAAG4E,GAGlDvI,EAAEq9B,OAAOjyB,EAAKhD,SAAS,GAAGE,EAAG8C,EAAKhD,SAAS,GAAGG,EARlC,CAWhBvI,EAAE4R,UAAY,EACd5R,EAAE0R,YAAc,wBAChB1R,EAAEs9B,QACN,EAUAvN,EAAO0L,cAAgB,SAASlqB,EAAQiF,EAAQwiB,GAC5C,IACIp5B,EACA+D,EACA+K,EAHA1O,EAAIg5B,EAKR,IAAKp5B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CAChC,IAAI4D,EAAQgT,EAAO5W,GAAG4D,MACtB,IAAKkL,EAAIlL,EAAMf,OAAS,EAAI,EAAI,EAAGiM,EAAIlL,EAAMf,OAAQiM,IAAK,CACtD,IAAIqF,EAAOvQ,EAAMkL,GACjB,IAAK/K,EAAI,EAAGA,EAAIoQ,EAAK3L,SAAS3F,OAAQkB,IAClC3D,EAAE2R,UAAY,wBACd3R,EAAEg8B,SAASp8B,EAAI,IAAM+D,EAAGoQ,EAAK3K,SAASd,EAA6C,IAAxCyL,EAAK3L,SAASzE,GAAG2E,EAAIyL,EAAK3K,SAASd,GAAUyL,EAAK3K,SAASb,EAA6C,IAAxCwL,EAAK3L,SAASzE,GAAG4E,EAAIwL,EAAK3K,SAASb,GAEtJ,CACJ,CACJ,EAUAwnB,EAAO2L,cAAgB,SAASnqB,EAAQyS,EAAOgV,GAC3C,IAAIh5B,EAAIg5B,EACRh5B,EAAE2R,UAAY,wBACd3R,EAAEg8B,SAAShY,EAAM5a,SAASd,EAAI,KAAO0b,EAAM5a,SAASb,EAAGyb,EAAM5a,SAASd,EAAI,EAAG0b,EAAM5a,SAASb,EAAI,EACpG,EAUAwnB,EAAOqL,WAAa,SAAS7pB,EAAQiF,EAAQwiB,GACzC,IAAIh5B,EAAIg5B,EAEJvpB,GADS8B,EAAO2Y,OACN3Y,EAAO9B,SAErBzP,EAAEm9B,YAEF,IAAK,IAAIv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GAElB,GAAIwL,EAAKmG,OAAOC,QAEZ,IADA,IAAIhO,EAAQgT,EAAO5W,GAAG4D,MACbG,EAAIH,EAAMf,OAAS,EAAI,EAAI,EAAGkB,EAAIH,EAAMf,OAAQkB,IAAK,CAC1D,IAAIoQ,EAAOvQ,EAAMG,GACjB3D,EAAE+9B,KAAKhqB,EAAK1L,OAAOzD,IAAI0D,EAAGyL,EAAK1L,OAAOzD,IAAI2D,EAAGwL,EAAK1L,OAAOxD,IAAIyD,EAAIyL,EAAK1L,OAAOzD,IAAI0D,EAAGyL,EAAK1L,OAAOxD,IAAI0D,EAAIwL,EAAK1L,OAAOzD,IAAI2D,EAC5H,CAER,CAEIkH,EAAQqoB,WACR93B,EAAE0R,YAAc,yBAEhB1R,EAAE0R,YAAc,kBAGpB1R,EAAE4R,UAAY,EACd5R,EAAEs9B,QACN,EAUAvN,EAAOsL,SAAW,SAAS9pB,EAAQiF,EAAQwiB,GACvC,IAGIjlB,EACAnU,EACA+D,EACA+K,EANA1O,EAAIg5B,EAEJvpB,GADS8B,EAAO2Y,OACN3Y,EAAO9B,SAQrB,IAFAzP,EAAEm9B,YAEGv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CAChC,IAAIwL,EAAOoL,EAAO5W,GACd4D,EAAQ4H,EAAK5H,MAEjB,GAAK4H,EAAKmG,OAAOC,QAGjB,GAAI/B,EAAQ8oB,SAER,IAAK50B,EAAIH,EAAMf,OAAS,EAAI,EAAI,EAAGkB,EAAIH,EAAMf,OAAQkB,IAEjD,IADAoQ,EAAOvQ,EAAMG,GACR+K,EAAI,EAAGA,EAAIqF,EAAKxB,KAAK9P,OAAQiM,IAAK,CACnC,IAAIqL,EAAOhG,EAAKxB,KAAK7D,GACrB1O,EAAEo9B,OAAOrpB,EAAK3K,SAASd,EAAGyL,EAAK3K,SAASb,GACxCvI,EAAEq9B,OAAOtpB,EAAK3K,SAASd,EAAa,GAATyR,EAAKzR,EAAQyL,EAAK3K,SAASb,EAAa,GAATwR,EAAKxR,EACnE,MAGJ,IAAK5E,EAAIH,EAAMf,OAAS,EAAI,EAAI,EAAGkB,EAAIH,EAAMf,OAAQkB,IAEjD,IADAoQ,EAAOvQ,EAAMG,GACR+K,EAAI,EAAGA,EAAIqF,EAAKxB,KAAK9P,OAAQiM,IAE9B1O,EAAEo9B,OAAOrpB,EAAK3K,SAASd,EAAGyL,EAAK3K,SAASb,GACxCvI,EAAEq9B,QAAQtpB,EAAK3L,SAAS,GAAGE,EAAIyL,EAAK3L,SAAS2L,EAAK3L,SAAS3F,OAAO,GAAG6F,GAAK,GACrEyL,EAAK3L,SAAS,GAAGG,EAAIwL,EAAK3L,SAAS2L,EAAK3L,SAAS3F,OAAO,GAAG8F,GAAK,EAIrF,CAEIkH,EAAQqoB,YACR93B,EAAE0R,YAAc,YAChB1R,EAAE4R,UAAY,IAEd5R,EAAE0R,YAAc,2BAChB1R,EAAEg7B,yBAA2B,UAC7Bh7B,EAAE4R,UAAY,GAGlB5R,EAAEs9B,SACFt9B,EAAEg7B,yBAA2B,aACjC,EAUAjL,EAAOuL,cAAgB,SAAS/pB,EAAQiF,EAAQwiB,GAC5C,IAGI5tB,EACA2I,EACAnU,EACA8O,EANA1O,EAAIg5B,EAEJvpB,GADS8B,EAAO2Y,OACN3Y,EAAO9B,SASrB,IAHAzP,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAG3B,GAFAwL,EAAOoL,EAAO5W,GAETwL,EAAKmG,OAAOC,QAIjB,IAAK9C,EAAI,EAAGA,EAAItD,EAAK5H,MAAMf,OAAQiM,IAC/BqF,EAAO3I,EAAK5H,MAAMkL,GAClB1O,EAAEu9B,IAAIxpB,EAAK3K,SAASd,EAAGyL,EAAK3K,SAASb,EAAG,EAAG,EAAG,EAAI3E,KAAKud,IAAI,GAC3DnhB,EAAEw9B,YAcV,IAVI/tB,EAAQqoB,WACR93B,EAAE2R,UAAY,YAEd3R,EAAE2R,UAAY,kBAElB3R,EAAE09B,OAEF19B,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAC3BwL,EAAOoL,EAAO5W,GACVwL,EAAKmG,OAAOC,UACZxR,EAAEu9B,IAAInyB,EAAKgH,aAAa9J,EAAG8C,EAAKgH,aAAa7J,EAAG,EAAG,EAAG,EAAI3E,KAAKud,IAAI,GACnEnhB,EAAEw9B,aAIVx9B,EAAE2R,UAAY,sBACd3R,EAAE09B,MACN,EAUA3N,EAAOxa,aAAe,SAAShE,EAAQiF,EAAQwiB,GAC3C,IAAIh5B,EAAIg5B,EAERh5B,EAAEm9B,YAEF,IAAK,IAAIv9B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAAK,CACpC,IAAIwL,EAAOoL,EAAO5W,GAElB,GAAKwL,EAAKmG,OAAOC,QAAjB,CAGA,IAAI/I,EAAWwG,EAAKyF,YAAYtJ,GAEhCpL,EAAEo9B,OAAOhyB,EAAKhC,SAASd,EAAG8C,EAAKhC,SAASb,GACxCvI,EAAEq9B,OAAOjyB,EAAKhC,SAASd,EAAIG,EAASH,EAAG8C,EAAKhC,SAASb,EAAIE,EAASF,EALtD,CAMhB,CAEAvI,EAAE4R,UAAY,EACd5R,EAAE0R,YAAc,iBAChB1R,EAAEs9B,QACN,EAUAvN,EAAOwL,QAAU,SAAShqB,EAAQiF,EAAQwiB,GACtC,IACIp5B,EACA+D,EAFA3D,EAAIg5B,EAIR,IAAKp5B,EAAI,EAAGA,EAAI4W,EAAO/T,OAAQ7C,IAC3B,GAAK4W,EAAO5W,GAAG2R,OAAOC,QAAtB,CAGA,IAAIhO,EAAQgT,EAAO5W,GAAG4D,MACtB,IAAKG,EAAIH,EAAMf,OAAS,EAAI,EAAI,EAAGkB,EAAIH,EAAMf,OAAQkB,IAAK,CACtD,IAAIoQ,EAAOvQ,EAAMG,GACjB3D,EAAE47B,KAAO,aACT57B,EAAE2R,UAAY,wBACd3R,EAAEg8B,SAASjoB,EAAKpE,GAAIoE,EAAK3K,SAASd,EAAI,GAAIyL,EAAK3K,SAASb,EAAI,GAChE,CARY,CAUpB,EAUAwnB,EAAOnN,WAAa,SAASrR,EAAQ0H,EAAO+f,GACxC,IAEI9f,EACAE,EAIAxZ,EACA+D,EARA3D,EAAIg5B,EACJvpB,EAAU8B,EAAO9B,QAYrB,IAHAzP,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAIqZ,EAAMxW,OAAQ7C,IAG1B,GAFAsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,SAIV,IADAC,EAAYF,EAAKE,UACZzV,EAAI,EAAGA,EAAIuV,EAAKgE,aAAcvZ,IAAK,CACpC,IAAI8oB,EAAUvT,EAAK+D,SAAStZ,GACxBgF,EAAS8jB,EAAQ9jB,OACrB3I,EAAE+9B,KAAKp1B,EAAOL,EAAI,IAAKK,EAAOJ,EAAI,IAAK,IAAK,IAChD,CAaJ,IAVIkH,EAAQqoB,WACR93B,EAAE2R,UAAY,wBAEd3R,EAAE2R,UAAY,SAElB3R,EAAE09B,OAEF19B,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAIqZ,EAAMxW,OAAQ7C,IAG1B,GAFAsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,WAGVC,EAAYF,EAAKE,UAEbF,EAAKgE,aAAe,GAAG,CACvB,IAAI8gB,EAAa9kB,EAAK+D,SAAS,GAAGtU,OAAOL,EACrC21B,EAAa/kB,EAAK+D,SAAS,GAAGtU,OAAOJ,EAEf,IAAtB2Q,EAAKgE,eACL8gB,GAAc9kB,EAAK+D,SAAS,GAAGtU,OAAOL,EAAI4Q,EAAK+D,SAAS,GAAGtU,OAAOL,GAAK,EACvE21B,GAAc/kB,EAAK+D,SAAS,GAAGtU,OAAOJ,EAAI2Q,EAAK+D,SAAS,GAAGtU,OAAOJ,GAAK,GAGvE6Q,EAAUE,QAAUF,EAAUoB,SAAS,GAAGpP,OAAqC,IAA7BgO,EAAUC,MAAM7I,SAClExQ,EAAEo9B,OAAOY,EAAkC,EAArB5kB,EAAUiB,OAAO/R,EAAO21B,EAAkC,EAArB7kB,EAAUiB,OAAO9R,GAE5EvI,EAAEo9B,OAAOY,EAAkC,EAArB5kB,EAAUiB,OAAO/R,EAAO21B,EAAkC,EAArB7kB,EAAUiB,OAAO9R,GAGhFvI,EAAEq9B,OAAOW,EAAYC,EACzB,CAGAxuB,EAAQqoB,WACR93B,EAAE0R,YAAc,sBAEhB1R,EAAE0R,YAAc,SAGpB1R,EAAE4R,UAAY,EACd5R,EAAEs9B,QACN,EAUAvN,EAAOyL,YAAc,SAASjqB,EAAQ0H,EAAO+f,GACzC,IAEI9f,EACAE,EAEAC,EACAC,EACA1Z,EAPAI,EAAIg5B,EACJvpB,EAAU8B,EAAO9B,QAYrB,IAHAzP,EAAEm9B,YAGGv9B,EAAI,EAAGA,EAAIqZ,EAAMxW,OAAQ7C,IAG1B,GAFAsZ,EAAOD,EAAMrZ,GAERsZ,EAAKC,SAAV,CAGAC,EAAYF,EAAKE,UACjBC,EAAQD,EAAUC,MAClBC,EAAQF,EAAUE,MAElB,IAAI5K,EAAI,EAEH4K,EAAM9I,UAAa6I,EAAM7I,WAAU9B,EAAI,IACxC4K,EAAM9I,WAAU9B,EAAI,GAExB1O,EAAEo9B,OAAO9jB,EAAMlQ,SAASd,EAAGgR,EAAMlQ,SAASb,GAC1CvI,EAAEq9B,OAAO/jB,EAAMlQ,SAASd,EAAI8Q,EAAUmB,YAAYjS,EAAIoG,EAAG4K,EAAMlQ,SAASb,EAAI6Q,EAAUmB,YAAYhS,EAAImG,GAEtGA,EAAI,EAEC4K,EAAM9I,UAAa6I,EAAM7I,WAAU9B,EAAI,IACxC2K,EAAM7I,WAAU9B,EAAI,GAExB1O,EAAEo9B,OAAO/jB,EAAMjQ,SAASd,EAAG+Q,EAAMjQ,SAASb,GAC1CvI,EAAEq9B,OAAOhkB,EAAMjQ,SAASd,EAAI8Q,EAAUmB,YAAYjS,EAAIoG,EAAG2K,EAAMjQ,SAASb,EAAI6Q,EAAUmB,YAAYhS,EAAImG,EApB1F,CAuBZe,EAAQqoB,WACR93B,EAAE0R,YAAc,sBAEhB1R,EAAE0R,YAAc,SAEpB1R,EAAEs9B,QACN,EASAvN,EAAOmO,UAAY,SAASA,EAAWlF,GACtBkF,EAAUhU,OAAvB,IAII7hB,EAHA81B,EAAWD,EAAUC,SACrB5sB,EAAS2sB,EAAU3sB,OACnB9B,EAAU8B,EAAO9B,QAGrB,GAAIA,EAAQmoB,UAAW,CACnB,IAAI6C,EAAclpB,EAAOlJ,OAAOxD,IAAIyD,EAAIiJ,EAAOlJ,OAAOzD,IAAI0D,EACtDoyB,EAAenpB,EAAOlJ,OAAOxD,IAAI0D,EAAIgJ,EAAOlJ,OAAOzD,IAAI2D,EACvDoyB,EAAeF,EAAclpB,EAAO9B,QAAQ4Q,MAC5Cua,EAAeF,EAAenpB,EAAO9B,QAAQ6Q,OAEjD0Y,EAAQlsB,MAAM,EAAI6tB,EAAc,EAAIC,GACpC5B,EAAQ/vB,WAAWsI,EAAOlJ,OAAOzD,IAAI0D,GAAIiJ,EAAOlJ,OAAOzD,IAAI2D,EAC/D,CAEA,IAAK,IAAI3I,EAAI,EAAGA,EAAIu+B,EAAS17B,OAAQ7C,IAAK,CACtC,IAAIw+B,EAAOD,EAASv+B,GAAGy+B,KAOvB,OALArF,EAAQ/vB,UAAU,GAAK,IACvB+vB,EAAQpnB,UAAY,EACpBonB,EAAQtnB,YAAc,sBACtBsnB,EAAQsF,YAAY,CAAC,EAAE,IAEfF,EAAKxuB,MAEb,IAAK,OAGDvH,EAAS+1B,EAAK/1B,OACd2wB,EAAQmE,YACRnE,EAAQ+E,KAAKn6B,KAAKC,MAAMwE,EAAOzD,IAAI0D,EAAI,GAAI1E,KAAKC,MAAMwE,EAAOzD,IAAI2D,EAAI,GACjE3E,KAAKC,MAAMwE,EAAOxD,IAAIyD,EAAID,EAAOzD,IAAI0D,EAAI,GAAI1E,KAAKC,MAAMwE,EAAOxD,IAAI0D,EAAIF,EAAOzD,IAAI2D,EAAI,IAC1FywB,EAAQwE,YACRxE,EAAQsE,SAER,MAEJ,IAAK,aAGD,IAAIz0B,EAAQu1B,EAAKrgB,OACbqgB,EAAK/kB,QACLxQ,EAAQu1B,EAAKpgB,QACjBgb,EAAQmE,YACRnE,EAAQuE,IAAI10B,EAAMP,EAAGO,EAAMN,EAAG,GAAI,EAAG,EAAI3E,KAAKud,IAC9C6X,EAAQwE,YACRxE,EAAQsE,SAER,MAIJtE,EAAQsF,YAAY,IACpBtF,EAAQ/vB,WAAW,IAAM,GAC7B,CAG8B,OAA1Bi1B,EAAUK,cACVvF,EAAQ/vB,UAAU,GAAK,IACvB+vB,EAAQpnB,UAAY,EACpBonB,EAAQtnB,YAAc,sBACtBsnB,EAAQrnB,UAAY,sBACpBtJ,EAAS61B,EAAUM,aACnBxF,EAAQmE,YACRnE,EAAQ+E,KAAKn6B,KAAKC,MAAMwE,EAAOzD,IAAI0D,GAAI1E,KAAKC,MAAMwE,EAAOzD,IAAI2D,GACzD3E,KAAKC,MAAMwE,EAAOxD,IAAIyD,EAAID,EAAOzD,IAAI0D,GAAI1E,KAAKC,MAAMwE,EAAOxD,IAAI0D,EAAIF,EAAOzD,IAAI2D,IAClFywB,EAAQwE,YACRxE,EAAQsE,SACRtE,EAAQ0E,OACR1E,EAAQ/vB,WAAW,IAAM,KAGzBwG,EAAQmoB,WACRoB,EAAQU,aAAa,EAAG,EAAG,EAAG,EAAG,EAAG,EAC5C,EASA,IAAID,EAAgB,SAASloB,EAAQioB,GACjC,IAAItP,EAAS3Y,EAAO2Y,OAChBJ,EAASvY,EAAOuY,OAChBiN,EAAcjN,EAAOiN,YACrB/Z,EAAYkN,EAAOJ,OAAO9M,UAE9B8M,EAAO7c,MAAQusB,EAAO1P,EAAOmN,UAAYlH,EAAO8G,WAChD/M,EAAOmN,SAAWuC,EAElB1P,EAAOqN,iBAAmBna,EAAY8M,EAAOoN,eAAiB,EAC9DpN,EAAOoN,cAAgBla,EAEvB8M,EAAOkN,aAAayH,QAAQ3U,EAAO7c,OACnC6c,EAAOkN,aAAav0B,OAASmB,KAAKgB,IAAIklB,EAAOkN,aAAav0B,OAAQs0B,GAElEjN,EAAOuN,mBAAmBoH,QAAQvU,EAAOJ,OAAOC,WAChDD,EAAOuN,mBAAmB50B,OAASmB,KAAKgB,IAAIklB,EAAOuN,mBAAmB50B,OAAQs0B,GAE9EjN,EAAOsN,wBAAwBqH,QAAQ3U,EAAOqN,kBAC9CrN,EAAOsN,wBAAwB30B,OAASmB,KAAKgB,IAAIklB,EAAOsN,wBAAwB30B,OAAQs0B,GAExFjN,EAAOyN,qBAAqBkH,QAAQvU,EAAOJ,OAAOG,qBAClDH,EAAOyN,qBAAqB90B,OAASmB,KAAKgB,IAAIklB,EAAOyN,qBAAqB90B,OAAQs0B,GAElFjN,EAAOwN,qBAAqBmH,QAAQvU,EAAOJ,OAAOE,aAClDF,EAAOwN,qBAAqB70B,OAASmB,KAAKgB,IAAIklB,EAAOwN,qBAAqB70B,OAAQs0B,GAElFjN,EAAO0N,eAAeiH,QAAQ3U,EAAOE,aACrCF,EAAO0N,eAAe/0B,OAASmB,KAAKgB,IAAIklB,EAAO0N,eAAe/0B,OAAQs0B,EAC1E,EASIqF,EAAQ,SAASp5B,GAEjB,IADA,IAAIiE,EAAS,EACJrH,EAAI,EAAGA,EAAIoD,EAAOP,OAAQ7C,GAAK,EACpCqH,GAAUjE,EAAOpD,GAErB,OAAQqH,EAASjE,EAAOP,QAAW,CACvC,EASIs2B,EAAgB,SAAS1Y,EAAOC,GAChC,IAAI8U,EAASnR,SAASya,cAAc,UAKpC,OAJAtJ,EAAO/U,MAAQA,EACf+U,EAAO9U,OAASA,EAChB8U,EAAOuJ,cAAgB,WAAa,OAAO,CAAO,EAClDvJ,EAAOwJ,cAAgB,WAAa,OAAO,CAAO,EAC3CxJ,CACX,EASIyE,EAAiB,SAASzE,GAC1B,IAAI4D,EAAU5D,EAAO6D,WAAW,MAC5B4F,EAAmB75B,OAAO65B,kBAAoB,EAC9CC,EAAyB9F,EAAQ+F,8BAAgC/F,EAAQgG,2BAC5ChG,EAAQiG,0BAA4BjG,EAAQkG,yBAC5ClG,EAAQ8F,wBAA0B,EAEnE,OAAOD,EAAmBC,CAC9B,EAUIjB,EAAc,SAAStsB,EAAQ4tB,GAC/B,IAAIC,EAAQ7tB,EAAO2nB,SAASiG,GAE5B,OAAIC,IAGJA,EAAQ7tB,EAAO2nB,SAASiG,GAAa,IAAIE,MACzCD,EAAME,IAAMH,EAELC,EACX,EASIrE,EAAmB,SAASxpB,EAAQkmB,GACpC,IAAI8H,EAAgB9H,EAEhB,iBAAiB9O,KAAK8O,KACtB8H,EAAgB,OAAS9H,EAAa,KAE1ClmB,EAAO6jB,OAAO2E,MAAMtC,WAAa8H,EACjChuB,EAAO6jB,OAAO2E,MAAMyF,eAAiB,UACrCjuB,EAAOupB,kBAAoBrD,CAC/B,CA8VH,EAh1DD,EAm1DO,WAESp4B,EAAQC,EAASI,GAcjC,IAAIswB,EAAS,CAAC,EAEd3wB,EAAOC,QAAU0wB,EAEjB,IAAIra,EAASjW,EAAoB,GAC7B2pB,EAAS3pB,EAAoB,IAC7BiC,EAASjC,EAAoB,IAEjC,WAEIswB,EAAOyP,eAAiB,IAAO,GAC/BzP,EAAO0P,oBAAsB,IAAO,GACpC1P,EAAO2P,kBAAoB,IAC3B3P,EAAO4P,qBAAuB,EAC9B5P,EAAO6P,qBAAuB,GAC9B7P,EAAO8P,qBAAuB,GAQ9B9P,EAAO/uB,OAAS,SAASwO,GACrB,IAAIC,EAAW,CACXzC,MAAO,IAAO,GACd8yB,WAAY,KACZC,qBAAqB,EACrBC,oBAAoB,EACpBC,kBAAmB,GACnBC,sBAAuB,IACvBrJ,eAAgB,KAChBsJ,WAAY,EACZC,aAAc,KACdC,WAAY,KACZC,aAAc,IAAO,GACrBC,oBAAqB,EACrB3I,SAAS,GAGT4I,EAAS9+B,EAAOQ,OAAOuN,EAAUD,GAKrC,OAFAgxB,EAAO5D,IAAM,EAEN4D,CACX,EAWAzQ,EAAOI,IAAM,SAASqQ,EAAQvW,GAY1B,OAVAuW,EAAOL,WAAapQ,EAAO0P,oBAE3B,SAAUgB,EAAQlH,GACdiH,EAAO3J,eAAiB9G,EAAO2Q,aAAaF,EAAQC,GAEhDlH,GAAQiH,EAAO5I,SACf7H,EAAO4Q,KAAKH,EAAQvW,EAAQsP,EAEnC,CAND,GAQOiH,CACX,EAWAzQ,EAAO4Q,KAAO,SAASH,EAAQvW,EAAQsP,GACnC,IAAIqH,EAAgBl/B,EAAOoD,MACvB+7B,EAAcL,EAAOxzB,MACrB8zB,EAAc,EAGdhB,EAAavG,EAAOiH,EAAOJ,aAQ/B,KALKN,IAAeU,EAAOJ,cAAgBN,EAAan8B,KAAKiB,IAAImrB,EAAOyP,eAAgBgB,EAAOF,iBAE3FR,EAAaU,EAAOV,YAAc/P,EAAO0P,qBAGzCe,EAAOT,oBAAqB,CAE5BS,EAAOP,kBAAkBn9B,KAAKg9B,GAC9BU,EAAOP,kBAAoBO,EAAOP,kBAAkB78B,OAAOo9B,EAAON,uBAGlE,IAAIa,EAAqBP,EAAOP,kBAAkB78B,MAAM,GAAGiL,OAGvD2yB,EAAqBR,EAAOP,kBAAkB78B,MAC9C29B,EAAmBv+B,OAASutB,EAAO6P,qBACnCmB,EAAmBv+B,OAASutB,EAAO8P,sBAInCoB,EAAqB9E,EAAM6E,GAC/BlB,EAAamB,GAAsBnB,CACvC,CAEIU,EAAOR,qBAEPF,EAAa,IAAOn8B,KAAKg5B,MAAM,IAAOmD,IAI1CU,EAAOV,WAAaA,EACpBU,EAAOJ,aAAe7G,EAGtBiH,EAAOL,YAAcK,EAAOV,WAG5BU,EAAOL,WAAaz+B,EAAOgD,MACvB87B,EAAOL,WAAY,EAAGK,EAAOV,WAAae,EAAc9Q,EAAO2P,mBAInEc,EAAOD,oBAAsB,EAG7B,IAAIF,EAAaG,EAAOH,YAAc18B,KAAKqd,KAAKwf,EAAOF,aAAeO,GAGlE1qB,EAAQ,CACR4G,UAAWkN,EAAOJ,OAAO9M,WAI7BrH,EAAOQ,QAAQsqB,EAAQ,aAAcrqB,GACrCT,EAAOQ,QAAQsqB,EAAQ,OAAQrqB,GAE/B,IAAI+qB,EAAkBx/B,EAAOoD,MAG7B,MAAO+7B,EAAc,GAAKL,EAAOL,YAAcU,EAAc9Q,EAAO2P,kBAAmB,CAEnFhqB,EAAOQ,QAAQsqB,EAAQ,eAAgBrqB,GACvCiT,EAAO7gB,OAAO0hB,EAAQ4W,GACtBnrB,EAAOQ,QAAQsqB,EAAQ,cAAerqB,GAGtCqqB,EAAOL,YAAcU,EACrBC,GAAe,EAGf,IAAIK,EAAmBz/B,EAAOoD,MAAQ87B,EAClCQ,EAAqB1/B,EAAOoD,MAAQo8B,EACpCG,EAAsBF,EAAmBpR,EAAO4P,qBAAuByB,EAAqBN,EAGhG,GAAIA,GAAeT,GAAcgB,EAAsBb,EAAOF,aAAc,CACxEE,EAAOD,oBAAsB58B,KAAKg5B,MAAMh5B,KAAKiB,IAAI,EAAI47B,EAAOL,WAAaU,EAAe9Q,EAAO2P,oBAC/F,KACJ,CACJ,CAGAzV,EAAOJ,OAAOG,oBAAsB8W,EAGpCprB,EAAOQ,QAAQsqB,EAAQ,YAAarqB,GAGhCqqB,EAAOP,kBAAkBz9B,QAAU,MAC/Bg+B,EAAOD,qBAAuB58B,KAAKg5B,MAAM6D,EAAOV,WAAae,GAAeR,EAC5E3+B,EAAOsE,SAAS,8DACTw6B,EAAOD,qBACd7+B,EAAOsE,SAAS,gEAGU,qBAAnBw6B,EAAOc,SACd5/B,EAAOsE,SAAS,8DAGhBw6B,EAAOe,UAAYf,EAAOgB,WAC1B9/B,EAAOsE,SAAS,8EAGD,IAAfw6B,EAAO5D,KACPl7B,EAAOsE,SAAS,qEAG5B,EAQA+pB,EAAO4J,KAAO,SAAS6G,GACnBzQ,EAAO0R,iBAAiBjB,EAC5B,EAUAzQ,EAAO2Q,aAAe,SAASF,EAAQ3qB,GACnC,GAAsB,qBAAX9Q,SAA0BA,OAAOmxB,sBAGxC,MAAM,IAAIwL,MAAM,wEAGpB,OALIlB,EAAO3J,eAAiB9xB,OAAOmxB,sBAAsBrgB,GAKlD2qB,EAAO3J,cAClB,EAQA9G,EAAO0R,iBAAmB,SAASjB,GAC/B,GAAsB,qBAAXz7B,SAA0BA,OAAOwxB,qBAGxC,MAAM,IAAImL,MAAM,uEAFhB38B,OAAOwxB,qBAAqBiK,EAAO3J,eAI3C,EASA,IAAIsF,EAAQ,SAASp5B,GAIjB,IAHA,IAAIiE,EAAS,EACT26B,EAAe5+B,EAAOP,OAEjB7C,EAAI,EAAGA,EAAIgiC,EAAchiC,GAAK,EACnCqH,GAAUjE,EAAOpD,GAGrB,OAAQqH,EAAS26B,GAAiB,CACtC,CAuLH,EAhbD,EAmbO,WAESviC,EAAQC,EAASI,GAcjC,IAAIuwB,EAAM,CAAC,EAEX5wB,EAAOC,QAAU2wB,EAEjB,IAAIvW,EAAYha,EAAoB,GAChCiC,EAASjC,EAAoB,GAC7B0G,EAAazE,EAAOyE,YAExB,WAUI6pB,EAAIvV,SAAW,SAASrB,EAAOC,GAC3B,OAAOI,EAAUgB,SAASrB,EAAOC,EACrC,EAEAlT,EAAW6pB,EAAK,WAAY,gDAE/B,EAhBD,EAmBO,WAES5wB,EAAQC,EAASI,GAYjC,IAAIwwB,EAAM,CAAC,EAEX7wB,EAAOC,QAAU4wB,EAEJxwB,EAAoB,GAAjC,IACIiC,EAASjC,EAAoB,IAEjC,WAaIwwB,EAAI2R,eAAiB,SAAS5+B,EAAM6+B,GACV,qBAAX98B,QAA4B,eAAgBA,QACnDrD,EAAOqE,KAAK,uEAIhB,IAAIpG,EAAGmiC,EAAIztB,EAAOzL,EAAOm5B,EAASC,EAC9BC,EAAeC,EACfC,EAAWC,EACXC,EAAIC,EADqBp3B,EAAS,GAC1B1I,EAAS,EAAG6F,EAAI,EAAGC,EAAI,EAEnCu5B,EAAeA,GAAgB,GAE/B,IAAIU,EAAW,SAASC,EAAIC,EAAIC,GAE5B,IAAIC,EAAaD,EAAc,IAAM,GAAKA,EAAc,EAGxD,IAAKP,GAAaK,GAAML,EAAU95B,GAAKo6B,GAAMN,EAAU75B,EAAG,CAClD65B,GAAaQ,GACbN,EAAKF,EAAU95B,EACfi6B,EAAKH,EAAU75B,IAEf+5B,EAAK,EACLC,EAAK,GAGT,IAAI15B,EAAQ,CACRP,EAAGg6B,EAAKG,EACRl6B,EAAGg6B,EAAKG,IAIRE,GAAeR,IACfA,EAAYv5B,GAGhBsC,EAAOpI,KAAK8F,GAEZP,EAAIg6B,EAAKG,EACTl6B,EAAIg6B,EAAKG,CACb,CACJ,EAEIG,EAAkB,SAASb,GAC3B,IAAIc,EAAUd,EAAQe,oBAAoBC,cAG1C,GAAgB,MAAZF,EAAJ,CAIA,OAAQA,GAER,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDx6B,EAAI05B,EAAQ15B,EACZC,EAAIy5B,EAAQz5B,EACZ,MACJ,IAAK,IACDD,EAAI05B,EAAQ15B,EACZ,MACJ,IAAK,IACDC,EAAIy5B,EAAQz5B,EACZ,MAGJi6B,EAASl6B,EAAGC,EAAGy5B,EAAQW,YAtBb,CAuBd,EAUA,IAPAzS,EAAI+S,mBAAmBhgC,GAGvBqR,EAAQrR,EAAKigC,iBAGbjB,EAAW,GACNriC,EAAI,EAAGA,EAAIqD,EAAKkgC,YAAYC,cAAexjC,GAAK,EACjDqiC,EAASl/B,KAAKE,EAAKkgC,YAAYE,QAAQzjC,IAE3CsiC,EAAgBD,EAASp8B,SAGzB,MAAOpD,EAAS6R,EAAO,CAMnB,GAJA+tB,EAAep/B,EAAKqgC,mBAAmB7gC,GACvCu/B,EAAUC,EAASI,GAGfL,GAAWG,EAAa,CACxB,MAAOD,EAAcz/B,QAAUy/B,EAAc,IAAMF,EAC/Ca,EAAgBX,EAAc/4B,SAElCg5B,EAAcH,CAClB,CAIA,OAAQA,EAAQe,oBAAoBC,eAEpC,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACDn6B,EAAQ5F,EAAKsgC,iBAAiB9gC,GAC9B+/B,EAAS35B,EAAMP,EAAGO,EAAMN,EAAG,GAC3B,MAKJ9F,GAAUq/B,CACd,CAGA,IAAKliC,EAAI,EAAGmiC,EAAKG,EAAcz/B,OAAQ7C,EAAImiC,IAAMniC,EAC7CijC,EAAgBX,EAActiC,IAElC,OAAOuL,CACX,EAEA+kB,EAAI+S,mBAAqB,SAAShgC,GAQ9B,IAHA,IAAIugC,EAAIC,EAAI9iB,EAAI+iB,EAAI9iB,EAAI+iB,EAAIC,EAAO3gC,EAAKkgC,YACpC76B,EAAI,EAAGC,EAAI,EAAGs7B,EAAMD,EAAKR,cAEpBxjC,EAAI,EAAGA,EAAIikC,IAAOjkC,EAAG,CAC1B,IAAIkkC,EAAMF,EAAKP,QAAQzjC,GACnBkjC,EAAUgB,EAAIf,oBAElB,GAAI,cAAcpa,KAAKma,GACf,MAAOgB,IAAKx7B,EAAIw7B,EAAIx7B,GACpB,MAAOw7B,IAAKv7B,EAAIu7B,EAAIv7B,QASxB,OAPI,OAAQu7B,IAAKnjB,EAAKrY,EAAIw7B,EAAInjB,IAC1B,OAAQmjB,IAAKljB,EAAKtY,EAAIw7B,EAAIljB,IAC1B,OAAQkjB,IAAKJ,EAAKn7B,EAAIu7B,EAAIJ,IAC1B,OAAQI,IAAKH,EAAKp7B,EAAIu7B,EAAIH,IAC1B,MAAOG,IAAKx7B,GAAKw7B,EAAIx7B,GACrB,MAAOw7B,IAAKv7B,GAAKu7B,EAAIv7B,GAEjBu6B,GAER,IAAK,IACDc,EAAKG,YAAY9gC,EAAK+gC,0BAA0B17B,EAAGC,GAAI3I,GACvD,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKghC,0BAA0B37B,EAAGC,GAAI3I,GACvD,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKihC,oCAAoC57B,GAAI1I,GAC9D,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKkhC,kCAAkC57B,GAAI3I,GAC5D,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKmhC,gCAAgC97B,EAAGC,EAAGoY,EAAI+iB,EAAI9iB,EAAI+iB,GAAK/jC,GAC7E,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKohC,sCAAsC/7B,EAAGC,EAAGqY,EAAI+iB,GAAK/jC,GAC3E,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKqhC,oCAAoCh8B,EAAGC,EAAGoY,EAAI+iB,GAAK9jC,GACzE,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKshC,0CAA0Cj8B,EAAGC,GAAI3I,GACvE,MACJ,IAAK,IACDgkC,EAAKG,YAAY9gC,EAAKuhC,uBAAuBl8B,EAAGC,EAAGu7B,EAAIW,GAAIX,EAAIY,GAAIZ,EAAIl6B,MAAOk6B,EAAIa,aAAcb,EAAIc,WAAYhlC,GAChH,MACJ,IAAK,IACL,IAAK,IACD0I,EAAIk7B,EACJj7B,EAAIk7B,EACJ,MAKO,KAAXX,GAA6B,KAAXA,IAClBU,EAAKl7B,EACLm7B,EAAKl7B,EAEb,CACJ,CAEH,EAhND,EAkNO,WAESlJ,EAAQC,EAASI,GAgBjC,IAAIywB,EAAQ,CAAC,EAEb9wB,EAAOC,QAAU6wB,EAEjB,IAAI7Z,EAAY5W,EAAoB,GACvBA,EAAoB,IAEjC,WAKIywB,EAAMlvB,OAASqV,EAAUrV,OACzBkvB,EAAM3lB,IAAM8L,EAAU9L,IACtB2lB,EAAM1Y,OAASnB,EAAUmB,OACzB0Y,EAAM/X,MAAQ9B,EAAU8B,MACxB+X,EAAM5Y,aAAejB,EAAUiB,aAC/B4Y,EAAM9Y,QAAUf,EAAUe,QAC1B8Y,EAAM7Y,cAAgBhB,EAAUgB,aAEnC,EAbD,EAiBQ,GACR,G","sources":["webpack://my-project/./node_modules/matter-js/build/matter.js"],"sourcesContent":["/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Matter\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Matter\"] = factory();\n\telse\n\t\troot[\"Matter\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._baseDelta = 1000 / 60;\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof global !== 'undefined') {\n                decomp = global.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\n\n(function() {\n\n    Body._timeCorrection = true;\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n    Body._baseDelta = 1000 / 60;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            deltaTime: 1000 / 60,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'speed':\n                Body.setSpeed(body, value);\n                break;\n            case 'angularSpeed':\n                Body.setAngularSpeed(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            if (isStatic) {\n                if (!part.isStatic) {\n                    part._original = {\n                        restitution: part.restitution,\n                        friction: part.friction,\n                        mass: part.mass,\n                        inertia: part.inertia,\n                        density: part.density,\n                        inverseMass: part.inverseMass,\n                        inverseInertia: part.inverseInertia\n                    };\n                }\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n\n            part.isStatic = isStatic;\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body`. \n     * \n     * See `body.parts` for details and requirements on how parts are used.\n     * \n     * See Bodies.fromVertices for a related utility.\n     * \n     * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n     * Sets each `part.parent` to be this `body`.  \n     * \n     * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n     * Automatically ensures that the first part in `body.parts` is the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setPosition = function(body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n\n        if (updateVelocity) {\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.velocity.x = delta.x;\n            body.velocity.y = delta.y;\n            body.speed = Vector.magnitude(delta);\n        } else {\n            body.positionPrev.x += delta.x;\n            body.positionPrev.y += delta.y;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setAngle = function(body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        \n        if (updateVelocity) {\n            body.anglePrev = body.angle;\n            body.angularVelocity = delta;\n            body.angularSpeed = Math.abs(delta);\n        } else {\n            body.anglePrev += delta;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */\n    Body.getVelocity = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n\n        return {\n            x: (body.position.x - body.positionPrev.x) * timeScale,\n            y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n    };\n\n    /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */\n    Body.getSpeed = function(body) {\n        return Vector.magnitude(Body.getVelocity(body));\n    };\n\n    /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setSpeed = function(body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n    };\n\n    /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */\n    Body.getAngularVelocity = function(body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n    };\n\n    /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */\n    Body.getAngularSpeed = function(body) {\n        return Math.abs(Body.getAngularVelocity(body));\n    };\n\n    /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setAngularSpeed = function(body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.translate = function(body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.rotate = function(body, rotation, point, updateVelocity) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            }, updateVelocity);\n\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */\n    Body.update = function(body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\n\n        var deltaTimeSquared = deltaTime * deltaTime,\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */\n    Body.updateVelocities = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n            bodyVelocity = body.velocity;\n\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\n\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * See `Bodies.fromVertices` for a related utility.\n     * \n     * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n     * \n     * The parts are fixed together and therefore perform as a single unified rigid body.\n     * \n     * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n     * \n     * Use properties and functions on the parent `body` rather than on parts.\n     *   \n     * Outside of their geometry, most properties on parts are not considered or updated.  \n     * As such 'per-part' material properties among others are not currently considered.\n     * \n     * Parts should be created specifically for their parent body.  \n     * Parts should not be shared or reused between bodies, only one parent is supported.  \n     * Parts should not have their own parts, they are not handled recursively.  \n     * Parts should not be added to the world directly or any other composite.  \n     * Parts own vertices must be convex and in clockwise order.   \n     * \n     * A body with more than one part is sometimes referred to as a 'compound' body. \n     * \n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n     * \n     * See `Vertices.chamfer` for possible parameters this object may hold.\n     * \n     * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n     * \n     * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n     * \n     * @property chamfer\n     * @type object|null|undefined\n     */\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n\n        if (position !== -1) {\n            var bodies = Composite.allBodies(compositeB);\n\n            Composite.removeCompositeAt(compositeA, position);\n\n            for (var i = 0; i < bodies.length; i++) {\n                bodies[i].sleepCounter = 0;\n            }\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n            body.sleepCounter = 0;\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        \n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Body = __webpack_require__(4);\nvar Events = __webpack_require__(5);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */\n    Sleeping.update = function(bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\n        \n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                speed = Body.getSpeed(body),\n                angularSpeed = Body.getAngularSpeed(body),\n                motion = speed * speed + angularSpeed * angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                    Sleeping.set(body, true);\n                }\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */\n    Sleeping.afterCollisions = function(pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __webpack_require__(3);\nvar Pair = __webpack_require__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: [null, null],\n            supportCount: 0\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            tangent = collision.tangent,\n            penetration = collision.penetration,\n            supports = collision.supports,\n            depth = minOverlap.overlap,\n            minAxis = minOverlap.axis,\n            normalX = minAxis.x,\n            normalY = minAxis.y,\n            deltaX = bodyB.position.x - bodyA.position.x,\n            deltaY = bodyB.position.y - bodyA.position.y;\n\n        // ensure normal is facing away from bodyA\n        if (normalX * deltaX + normalY * deltaY >= 0) {\n            normalX = -normalX;\n            normalY = -normalY;\n        }\n\n        normal.x = normalX;\n        normal.y = normalY;\n        \n        tangent.x = -normalY;\n        tangent.y = normalX;\n\n        penetration.x = normalX * depth;\n        penetration.y = normalY * depth;\n\n        collision.depth = depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update support count\n        collision.supportCount = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            vertexA = vertices[0],\n            vertexB = vertexA,\n            nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y),\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 1; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     * \n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n    /**\n     * The number of active supports for this collision found in `collision.supports`.\n     * \n     * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n     * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n     *\n     * @property supportCount\n     * @type number\n     * @default 0\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __webpack_require__(16);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [Contact.create(), Contact.create()],\n            contactCount: 0,\n            separation: 0,\n            isActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var supports = collision.supports,\n            supportCount = collision.supportCount,\n            contacts = pair.contacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        pair.contactCount = supportCount;\n        collision.pair = pair;\n\n        var supportA = supports[0],\n            contactA = contacts[0],\n            supportB = supports[1],\n            contactB = contacts[1];\n\n        // match contacts to supports\n        if (contactB.vertex === supportA || contactA.vertex === supportB) {\n            contacts[1] = contactA;\n            contacts[0] = contactA = contactB;\n            contactB = contacts[1];\n        }\n\n        // update contacts\n        contactA.vertex = supportA;\n        contactB.vertex = supportB;\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.contactCount = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ':' + bodyB.id.toString(36) \n            : bodyB.id.toString(36) + ':' + bodyA.id.toString(36);\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __webpack_require__(3);\nvar Vector = __webpack_require__(2);\nvar Sleeping = __webpack_require__(7);\nvar Bounds = __webpack_require__(1);\nvar Axes = __webpack_require__(11);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */\n    Constraint.solveAll = function(constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n            stiffness = isRigid ? constraint.stiffness * timeScale \n                : constraint.stiffness * timeScale * timeScale,\n            damping = constraint.damping * timeScale,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n    \n        if (damping > 0) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \n                + (constraint.pointA ? constraint.pointA.x : 0),\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \n                + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \n                + (constraint.pointB ? constraint.pointB.x : 0),\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \n                + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n    };\n\n    /**\n     * Returns the current length of the constraint. \n     * This is the distance between both of the constraint's end points.\n     * See `constraint.length` for the target rest length.\n     * @method currentLength\n     * @param {constraint} constraint\n     * @returns {number} the current length\n     */\n    Constraint.currentLength = function(constraint) {\n        var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) \n            + (constraint.pointA ? constraint.pointA.x : 0);\n\n        var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) \n            + (constraint.pointA ? constraint.pointA.y : 0);\n\n        var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) \n            + (constraint.pointB ? constraint.pointB.x : 0);\n            \n        var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) \n            + (constraint.pointB ? constraint.pointB.y : 0);\n\n        var deltaX = pointAX - pointBX;\n        var deltaY = pointAY - pointBY;\n\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __webpack_require__(2);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bounds = __webpack_require__(1);\nvar Vector = __webpack_require__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope Must be a number < 1.\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        if (slope >= 1) {\n            Common.warn('Bodies.trapezoid: slope parameter must be < 1.');\n        }\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __webpack_require__(0);\nvar Collision = __webpack_require__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            collisions: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n        detector.collisions = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            collisions = detector.collisions,\n            collisionIndex = 0,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions[collisionIndex++] = collision;\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions[collisionIndex++] = collision;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (collisions.length !== collisionIndex) {\n            collisions.length = collisionIndex;\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n     * @property collisions\n     * @type collision[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n            mouse.sourceEvents.mousewheel = event;\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove, { passive: true });\n        element.addEventListener('mousedown', mouse.mousedown, { passive: true });\n        element.addEventListener('mouseup', mouse.mouseup, { passive: true });\n        \n        element.addEventListener('wheel', mouse.mousewheel, { passive: false });\n        \n        element.addEventListener('touchmove', mouse.mousemove, { passive: false });\n        element.addEventListener('touchstart', mouse.mousedown, { passive: false });\n        element.addEventListener('touchend', mouse.mouseup, { passive: false });\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} [vertex]\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __webpack_require__(7);\nvar Resolver = __webpack_require__(18);\nvar Detector = __webpack_require__(13);\nvar Pairs = __webpack_require__(19);\nvar Events = __webpack_require__(5);\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\n\n(function() {\n\n    Engine._deltaMax = 1000 / 60;\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0,\n                lastUpdatesPerFrame: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n        engine.detector.pairs = engine.pairs;\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */\n    Engine.update = function(engine, delta) {\n        var startTime = Common.now();\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        // warn if high delta\n        if (delta > Engine._deltaMax) {\n            Common.warnOnce(\n                'Matter.Engine.update: delta argument is recommended to be less than or equal to', Engine._deltaMax.toFixed(3), 'ms.'\n            );\n        }\n\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp,\n            delta: delta\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n            // update the detector bodies\n            Detector.setBodies(detector, allBodies);\n\n            // reset all composite modified flags\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n            Engine._bodiesUpdate(allBodies, delta);\n        }\n\n        Events.trigger(engine, 'beforeSolve', event);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0) {\n            Events.trigger(engine, 'collisionStart', { \n                pairs: pairs.collisionStart,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        \n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0) {\n            Events.trigger(engine, 'collisionActive', { \n                pairs: pairs.collisionActive, \n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        if (pairs.collisionEnd.length > 0) {\n            Events.trigger(engine, 'collisionEnd', {\n                pairs: pairs.collisionEnd,\n                timestamp: timing.timestamp,\n                delta: delta\n            });\n        }\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n            bodiesLength = bodies.length;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // add the resultant force of gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */\n    Engine._bodiesUpdate = function(bodies, delta) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, delta);\n        }\n    };\n\n    /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesUpdateVelocities = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            Body.updateVelocities(bodies[i]);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n    *\n    * @event beforeSolve\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __webpack_require__(3);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    Resolver._restingThresh = 2;\n    Resolver._restingThreshTangent = Math.sqrt(6);\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            contactCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            contactCount = pair.contactCount;\n            pair.collision.parentA.totalContacts += contactCount;\n            pair.collision.parentB.totalContacts += contactCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */\n    Resolver.solvePosition = function(pairs, delta, damping) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen * (damping || 1),\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = pair.separation - pair.slop * slopDampen;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */\n    Resolver.solveVelocity = function(pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n            timeScaleSquared = timeScale * timeScale,\n            timeScaleCubed = timeScaleSquared * timeScale,\n            restingThresh = -Resolver._restingThresh * timeScale,\n            restingThreshTangent = Resolver._restingThreshTangent,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n            frictionMaxStatic = Resolver._frictionMaxStatic,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                inverseMassTotal = pair.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier,\n                contacts = pair.contacts,\n                contactCount = pair.contactCount,\n                contactShare = 1 / contactCount;\n\n            // get body velocities\n            var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x,\n                bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y,\n                bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev,\n                bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x,\n                bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y,\n                bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactCount; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity,\n                    velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity,\n                    velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity,\n                    velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n\n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = frictionMaxStatic;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < restingThresh) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairUpdate = Pair.update,\n            pairCreate = Pair.create,\n            pairSetActive = Pair.setActive,\n            pairsTable = pairs.table,\n            pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsListIndex = pairsListLength,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collisionsLength = collisions.length,\n            collisionStartIndex = 0,\n            collisionEndIndex = 0,\n            collisionActiveIndex = 0,\n            collision,\n            pair,\n            i;\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive[collisionActiveIndex++] = pair;\n                }\n\n                // update the pair\n                pairUpdate(pair, collision, timestamp);\n            } else {\n                // pair did not exist, create a new pair\n                pair = pairCreate(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // add the new pair\n                collisionStart[collisionStartIndex++] = pair;\n                pairsList[pairsListIndex++] = pair;\n            }\n        }\n\n        // find pairs that are no longer active\n        pairsListIndex = 0;\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            // pair is active if updated this timestep\n            if (pair.timeUpdated >= timestamp) {\n                // keep active pairs\n                pairsList[pairsListIndex++] = pair;\n            } else {\n                pairSetActive(pair, false, timestamp);\n\n                // keep inactive pairs if both bodies may be sleeping\n                if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n                    pairsList[pairsListIndex++] = pair;\n                } else {\n                    // remove inactive pairs if either body awake\n                    collisionEnd[collisionEndIndex++] = pair;\n                    delete pairsTable[pair.id];\n                }\n            }\n        }\n\n        // update array lengths if changed\n        if (pairsList.length !== pairsListIndex) {\n            pairsList.length = pairsListIndex;\n        }\n\n        if (collisionStart.length !== collisionStartIndex) {\n            collisionStart.length = collisionStartIndex;\n        }\n\n        if (collisionEnd.length !== collisionEndIndex) {\n            collisionEnd.length = collisionEndIndex;\n        }\n\n        if (collisionActive.length !== collisionActiveIndex) {\n            collisionActive.length = collisionActiveIndex;\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Matter = module.exports = __webpack_require__(21);\r\n\r\nMatter.Axes = __webpack_require__(11);\r\nMatter.Bodies = __webpack_require__(12);\r\nMatter.Body = __webpack_require__(4);\r\nMatter.Bounds = __webpack_require__(1);\r\nMatter.Collision = __webpack_require__(8);\r\nMatter.Common = __webpack_require__(0);\r\nMatter.Composite = __webpack_require__(6);\r\nMatter.Composites = __webpack_require__(22);\r\nMatter.Constraint = __webpack_require__(10);\r\nMatter.Contact = __webpack_require__(16);\r\nMatter.Detector = __webpack_require__(13);\r\nMatter.Engine = __webpack_require__(17);\r\nMatter.Events = __webpack_require__(5);\r\nMatter.Grid = __webpack_require__(23);\r\nMatter.Mouse = __webpack_require__(14);\r\nMatter.MouseConstraint = __webpack_require__(24);\r\nMatter.Pair = __webpack_require__(9);\r\nMatter.Pairs = __webpack_require__(19);\r\nMatter.Plugin = __webpack_require__(15);\r\nMatter.Query = __webpack_require__(25);\r\nMatter.Render = __webpack_require__(26);\r\nMatter.Resolver = __webpack_require__(18);\r\nMatter.Runner = __webpack_require__(27);\r\nMatter.SAT = __webpack_require__(28);\r\nMatter.Sleeping = __webpack_require__(7);\r\nMatter.Svg = __webpack_require__(29);\r\nMatter.Vector = __webpack_require__(2);\r\nMatter.Vertices = __webpack_require__(3);\r\nMatter.World = __webpack_require__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __webpack_require__(15);\r\nvar Common = __webpack_require__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =  true ? \"0.20.0\" : undefined;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __webpack_require__(6);\nvar Constraint = __webpack_require__(10);\nvar Common = __webpack_require__(0);\nvar Body = __webpack_require__(4);\nvar Bodies = __webpack_require__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            currentX = x,\n            currentY = y,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(currentX, currentY, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    currentX = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    currentX += columnGap;\n                }\n            }\n            \n            currentY += maxHeight + rowGap;\n            currentX = x;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(x, y, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(x, y, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(x + i * (size * separation), y + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: x + i * (size * separation), y: y }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(x, y, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(x, y, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} x Starting position in X.\n     * @param {number} y Starting position in Y.\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function(stackX, stackY) {\n            return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __webpack_require__(9);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __webpack_require__(3);\nvar Sleeping = __webpack_require__(7);\nvar Mouse = __webpack_require__(14);\nvar Events = __webpack_require__(5);\nvar Detector = __webpack_require__(13);\nvar Constraint = __webpack_require__(10);\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\nvar Bounds = __webpack_require__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __webpack_require__(2);\nvar Collision = __webpack_require__(8);\nvar Bounds = __webpack_require__(1);\nvar Bodies = __webpack_require__(12);\nvar Vertices = __webpack_require__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Body = __webpack_require__(4);\nvar Common = __webpack_require__(0);\nvar Composite = __webpack_require__(6);\nvar Bounds = __webpack_require__(1);\nvar Events = __webpack_require__(5);\nvar Vector = __webpack_require__(2);\nvar Mouse = __webpack_require__(14);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                engineUpdatesHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                wireframeStrokeStyle: '#bbb',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n\n            render.context.setTransform(1, 0, 0, 1, 0, 0);\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Sets the render `width` and `height`.\n     * \n     * Updates the canvas accounting for `render.options.pixelRatio`.  \n     * \n     * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n     * The top left render bound `render.bounds.min` isn't changed.\n     * \n     * Follow this call with `Render.lookAt` if you need to change the render bounds.\n     * \n     * See also `Render.setPixelRatio`.\n     * @method setSize\n     * @param {render} render\n     * @param {number} width The width (in CSS pixels)\n     * @param {number} height The height (in CSS pixels)\n     */\n    Render.setSize = function(render, width, height) {\n        render.options.width = width;\n        render.options.height = height;\n        render.bounds.max.x = render.bounds.min.x + width;\n        render.bounds.max.y = render.bounds.min.y + height;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        } else {\n            render.canvas.width = width;\n            render.canvas.height = height;\n        }\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineUpdatesHistory = timing.engineUpdatesHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineUpdatesMean = _mean(engineUpdatesHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta),\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine updates per frame\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length,\n            lastEngineUpdatesPerFrame + ' upf', \n            Math.pow(Common.clamp((engineUpdatesMean / neededUpdatesPerFrame) || 1, 0, 1), 4),\n            function(i) { return (engineUpdatesHistory[i] / engineUpdatesMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = render.options.wireframeStrokeStyle;\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = render.options.wireframeStrokeStyle;\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            var velocity = Body.getVelocity(body);\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.contactCount; j++) {\n                var contact = pair.contacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.contactCount > 0) {\n                var normalPosX = pair.contacts[0].vertex.x,\n                    normalPosY = pair.contacts[0].vertex.y;\n\n                if (pair.contactCount === 2) {\n                    normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n                    normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n        timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for background when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeStrokeStyle\n     * @type string\n     * @default '#bbb'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average updates per frame (e.g. 1)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n* A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n* This runner favours a smoother user experience over perfect time keeping.\n* This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n* Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __webpack_require__(5);\nvar Engine = __webpack_require__(17);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    Runner._maxFrameDelta = 1000 / 15;\n    Runner._frameDeltaFallback = 1000 / 60;\n    Runner._timeBufferMargin = 1.5;\n    Runner._elapsedNextEstimate = 1;\n    Runner._smoothingLowerBound = 0.1;\n    Runner._smoothingUpperBound = 0.9;\n\n    /**\n     * Creates a new Runner. \n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            delta: 1000 / 60,\n            frameDelta: null,\n            frameDeltaSmoothing: true,\n            frameDeltaSnapping: true,\n            frameDeltaHistory: [],\n            frameDeltaHistorySize: 100,\n            frameRequestId: null,\n            timeBuffer: 0,\n            timeLastTick: null,\n            maxUpdates: null,\n            maxFrameTime: 1000 / 30,\n            lastUpdatesDeferred: 0,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        // for temporary back compatibility only\n        runner.fps = 0;\n\n        return runner;\n    };\n\n    /**\n     * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method run\n     * @param {runner} runner\n     * @param {engine} [engine]\n     * @return {runner} runner\n     */\n    Runner.run = function(runner, engine) {\n        // initial time buffer for the first frame\n        runner.timeBuffer = Runner._frameDeltaFallback;\n\n        (function onFrame(time){\n            runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * Performs a single runner tick as used inside `Runner.run`.\n     * See module and properties descriptions for more information on this runner.\n     * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var tickStartTime = Common.now(),\n            engineDelta = runner.delta,\n            updateCount = 0;\n\n        // find frame delta time since last call\n        var frameDelta = time - runner.timeLastTick;\n\n        // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n        if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n            // reuse last accepted frame delta else fallback\n            frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n        }\n\n        if (runner.frameDeltaSmoothing) {\n            // record frame delta over a number of frames\n            runner.frameDeltaHistory.push(frameDelta);\n            runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n\n            // sort frame delta history\n            var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n\n            // sample a central window to limit outliers\n            var deltaHistoryWindow = runner.frameDeltaHistory.slice(\n                deltaHistorySorted.length * Runner._smoothingLowerBound, \n                deltaHistorySorted.length * Runner._smoothingUpperBound\n            );\n\n            // take the mean of the central window\n            var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n            frameDelta = frameDeltaSmoothed || frameDelta;\n        }\n\n        if (runner.frameDeltaSnapping) {\n            // snap frame delta to the nearest 1 Hz\n            frameDelta = 1000 / Math.round(1000 / frameDelta);\n        }\n\n        // update runner values for next call\n        runner.frameDelta = frameDelta;\n        runner.timeLastTick = time;\n\n        // accumulate elapsed time\n        runner.timeBuffer += runner.frameDelta;\n\n        // limit time buffer size to a single frame of updates\n        runner.timeBuffer = Common.clamp(\n            runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin\n        );\n\n        // reset count of over budget updates\n        runner.lastUpdatesDeferred = 0;\n\n        // get max updates per frame\n        var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n\n        // create event object\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        // tick events before update\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(runner, 'tick', event);\n\n        var updateStartTime = Common.now();\n\n        // simulate time elapsed between calls\n        while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin) {\n            // update the engine\n            Events.trigger(runner, 'beforeUpdate', event);\n            Engine.update(engine, engineDelta);\n            Events.trigger(runner, 'afterUpdate', event);\n\n            // consume time simulated from buffer\n            runner.timeBuffer -= engineDelta;\n            updateCount += 1;\n\n            // find elapsed time during this tick\n            var elapsedTimeTotal = Common.now() - tickStartTime,\n                elapsedTimeUpdates = Common.now() - updateStartTime,\n                elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n\n            // defer updates if over performance budgets for this frame\n            if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n                runner.lastUpdatesDeferred = Math.round(Math.max(0, (runner.timeBuffer / engineDelta) - Runner._timeBufferMargin));\n                break;\n            }\n        }\n\n        // track timing metrics\n        engine.timing.lastUpdatesPerFrame = updateCount;\n\n        // tick events after update\n        Events.trigger(runner, 'afterTick', event);\n\n        // show useful warnings if needed\n        if (runner.frameDeltaHistory.length >= 100) {\n            if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxUpdates, see docs.');\n            } else if (runner.lastUpdatesDeferred) {\n                Common.warnOnce('Matter.Runner: runner reached runner.maxFrameTime, see docs.');\n            }\n\n            if (typeof runner.isFixed !== 'undefined') {\n                Common.warnOnce('Matter.Runner: runner.isFixed is now redundant, see docs.');\n            }\n\n            if (runner.deltaMin || runner.deltaMax) {\n                Common.warnOnce('Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.');\n            }\n\n            if (runner.fps !== 0) {\n                Common.warnOnce('Matter.Runner: runner.fps was replaced by runner.delta, see docs.');\n            }\n        }\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n     * Alternatively to temporarily pause the runner, see `runner.enabled`.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        Runner._cancelNextFrame(runner);\n    };\n\n    /**\n     * Schedules the `callback` on this `runner` for the next animation frame.\n     * @private\n     * @method _onNextFrame\n     * @param {runner} runner\n     * @param {function} callback\n     * @return {number} frameRequestId\n     */\n    Runner._onNextFrame = function(runner, callback) {\n        if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n            runner.frameRequestId = window.requestAnimationFrame(callback);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.requestAnimationFrame.');\n        }\n\n        return runner.frameRequestId;\n    };\n\n    /**\n     * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n     * @private\n     * @method _cancelNextFrame\n     * @param {runner} runner\n     */\n    Runner._cancelNextFrame = function(runner) {\n        if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n            window.cancelAnimationFrame(runner.frameRequestId);\n        } else {\n            throw new Error('Matter.Runner: missing required global window.cancelAnimationFrame.');\n        }\n    };\n\n    /**\n     * Returns the mean of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values.\n     */\n    var _mean = function(values) {\n        var result = 0,\n            valuesLength = values.length;\n\n        for (var i = 0; i < valuesLength; i += 1) {\n            result += values[i];\n        }\n\n        return (result / valuesLength) || 0;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired once at the start of the browser frame, before any engine updates.\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the start of the browser frame, after `beforeTick`.\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after each and every engine update in this browser frame (if any). \n    * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n     * \n     * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n     * \n     * Smaller `delta` values provide higher quality results at the cost of performance.\n     * \n     * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n     * \n     * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n     * \n     * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n     * \n     * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n     * \n     * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n     * \n     * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n     * \n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The accumulated time elapsed that has yet to be simulated in milliseconds.\n     * This value is clamped within certain limits (see `Runner.tick` code).\n     *\n     * @private\n     * @property timeBuffer\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The measured time elapsed between the last two browser frames measured in milliseconds.\n     * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n     *\n     * @readonly\n     * @property frameDelta\n     * @type number\n     */\n\n    /**\n     * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n     *\n     * @property frameDeltaSmoothing\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Rounds measured browser frame delta to the nearest 1 Hz.\n     * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n     * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n     *\n     * @property frameDeltaSnapping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n     * \n     * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n     * \n     * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n     * \n     * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n     * \n     * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n     * \n     * See also `runner.maxUpdates`.\n     *\n     * @property maxFrameTime\n     * @type number\n     * @default 1000 / 30\n     */\n\n    /**\n     * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n     * \n     * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n     * \n     * See also `runner.maxFrameTime`.\n     * \n     * @property maxUpdates\n     * @type number\n     * @default null\n     */\n\n    /**\n     * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n     *\n     * @private\n     * @property timeLastTick\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * The id of the last call to `Runner._onNextFrame`.\n     *\n     * @private\n     * @property frameRequestId\n     * @type number\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __webpack_require__(8);\nvar Common = __webpack_require__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __webpack_require__(1);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __webpack_require__(6);\nvar Common = __webpack_require__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});"],"names":["root","factory","module","exports","this","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Common","_baseDelta","_nextId","_seed","_nowStartTime","Date","_warnedOnce","_decomp","extend","obj","deep","argsStart","deepClone","arguments","length","source","prop","constructor","clone","keys","push","values","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","toString","isFunction","isPlainObject","isString","clamp","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","warnOnce","message","join","deprecated","warning","chain","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","funcs","_chained","lastResult","args","chainPathBefore","base","chainPathAfter","setDecomp","decomp","getDecomp","global","e","Bounds","vertices","bounds","x","y","update","velocity","Infinity","vertex","contains","point","overlaps","boundsA","boundsB","translate","vector","shift","position","deltaX","deltaY","Vector","magnitude","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp","Vertices","points","body","index","isInternal","fromPath","pathPattern","match","parseFloat","centre","area","mean","average","signed","abs","inertia","mass","numerator","denominator","v","verticesLength","translateX","translateY","dx","dy","pointX","pointY","nextVertex","scale","scaleX","scaleY","delta","chamfer","radius","quality","qualityMin","qualityMax","newVertices","prevVertex","currentRadius","prevNormal","nextNormal","diagonalRadius","pow","radiusVector","midNormal","scaledVertex","precision","alpha","acos","theta","clockwiseSort","sort","vertexA","vertexB","isConvex","k","z","flag","hull","upper","lower","pop","Body","Sleeping","Axes","_timeCorrection","_inertiaScale","_nextCollidingGroupId","_nextNonCollidingGroupId","_nextCategory","options","defaults","id","type","label","plugin","force","torque","positionImpulse","constraintImpulse","totalContacts","speed","angularSpeed","angularVelocity","isSensor","isStatic","isSleeping","motion","sleepThreshold","density","restitution","friction","frictionStatic","frictionAir","collisionFilter","category","mask","group","slop","timeScale","render","visible","opacity","strokeStyle","fillStyle","lineWidth","sprite","xScale","yScale","xOffset","yOffset","events","circleRadius","positionPrev","anglePrev","parent","axes","deltaTime","_original","_initProperties","nextGroup","isNonColliding","nextCategory","defaultFillStyle","defaultStrokeStyle","defaultLineWidth","settings","setStatic","setMass","setDensity","setInertia","setVertices","setPosition","setAngle","setVelocity","setAngularVelocity","setSpeed","setAngularSpeed","setParts","setCentre","part","inverseMass","inverseInertia","moment","fromVertices","autoHull","hullCentre","total","_totalProperties","relative","updateVelocity","getVelocity","getSpeed","getAngularVelocity","getAngularSpeed","translation","rotation","totalArea","totalInertia","deltaTimeSquared","correction","velocityPrevX","velocityPrevY","updateVelocities","bodyVelocity","applyForce","offset","properties","Events","on","eventNames","callback","names","off","callbacks","newCallbacks","trigger","event","eventClone","Composite","isModified","bodies","constraints","composites","cache","allBodies","allConstraints","allComposites","setModified","composite","updateParents","updateChildren","childComposite","objects","addBody","addConstraint","addComposite","constraint","remove","removeBody","removeConstraint","removeComposite","compositeA","compositeB","removeCompositeAt","sleepCounter","splice","removeBodyAt","removeConstraintAt","clear","keepStatic","filter","move","rebase","recursive","_motionWakeThreshold","_motionSleepThreshold","_minBias","motionSleepThreshold","minMotion","maxMotion","afterCollisions","pairs","pair","isActive","collision","bodyA","bodyB","sleepingBody","movingBody","wasSleeping","Collision","Pair","_supports","_overlapAB","overlap","axis","_overlapBA","collided","parentA","parentB","depth","normal","tangent","penetration","supports","supportCount","collides","_overlapAxes","minOverlap","table","minAxis","normalX","normalY","supportsB","_findSupports","supportsA","verticesA","verticesB","overlapAB","overlapBA","verticesALength","verticesBLength","verticesAX","verticesAY","verticesBX","verticesBY","axesLength","overlapMin","Number","MAX_VALUE","overlapAxisNumber","axisX","axisY","minA","minB","maxA","maxB","direction","vertexC","distance","bodyAPositionX","bodyAPositionY","nearestDistance","Contact","timestamp","contacts","contactCount","separation","timeCreated","timeUpdated","supportA","contactA","supportB","contactB","setActive","Constraint","_warming","_torqueDampen","_minLength","pointA","pointB","initialPointA","initialPointB","stiffness","damping","angularStiffness","angleA","angleB","anchors","preSolveAll","impulse","solveAll","fixedA","fixedB","solve","pointAWorld","pointBWorld","currentLength","share","normalVelocity","relativeVelocity","difference","isRigid","massTotal","inertiaTotal","resistanceTotal","zero","postSolveAll","pointAX","pointAY","pointBX","pointBY","gradient","toFixed","xx","Bodies","rectangle","width","height","trapezoid","slope","verticesPath","roof","x1","x2","x3","circle","maxSides","sides","ceil","polygon","PI","yy","vertexSets","flagInternal","removeCollinear","minimumArea","removeDuplicatePoints","canDecomp","isConcave","Boolean","quickDecomp","concave","makeCCW","removeCollinearPoints","decomposed","chunk","chunkVertices","coincident_max_dist","partA","partB","pav","pbv","da","db","Detector","collisions","setBodies","detector","bodiesLength","canCollide","collisionIndex","_compareBoundsX","boundXMax","boundYMax","boundYMin","bodyAStatic","partsALength","partsASingle","partsBLength","partsAStart","partsBStart","filterA","filterB","Mouse","element","mouse","document","absolute","mousedownPosition","mouseupPosition","wheelDelta","button","pixelRatio","getAttribute","sourceEvents","mousemove","mousedown","mouseup","mousewheel","_getRelativeMousePosition","touches","changedTouches","preventDefault","detail","setElement","addEventListener","passive","clearSourceEvents","setOffset","setScale","elementBounds","getBoundingClientRect","rootNode","documentElement","parentNode","scrollX","undefined","pageXOffset","scrollLeft","scrollY","pageYOffset","scrollTop","pageX","left","pageY","top","clientWidth","clientHeight","Plugin","_registry","register","isPlugin","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","install","isUsed","used","isFor","parsed","for","versionSatisfies","use","plugins","uses","dependencies","sortedDependencies","status","_warned","tracked","parsedBase","resolved","pattern","test","exec","major","minor","patch","isRange","operator","prerelease","normalImpulse","tangentImpulse","Engine","Resolver","Pairs","_deltaMax","positionIterations","velocityIterations","constraintIterations","enableSleeping","gravity","timing","lastDelta","lastElapsed","lastUpdatesPerFrame","engine","world","grid","buckets","broadphase","metrics","startTime","_bodiesApplyGravity","_bodiesUpdate","collisionStart","positionDamping","preSolvePosition","solvePosition","postSolvePosition","preSolveVelocity","solveVelocity","_bodiesUpdateVelocities","collisionActive","collisionEnd","_bodiesClearForces","merge","engineA","engineB","gravityScale","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","_frictionMaxStatic","pairsLength","contactShare","positionDampen","slopDampen","positionWarming","verticesTranslate","boundsUpdate","positionImpulseX","positionImpulseY","contact","contactVertex","impulseX","impulseY","maxFriction","timeScaleSquared","timeScaleCubed","restingThresh","restingThreshTangent","frictionNormalMultiplier","frictionMaxStatic","tangentX","tangentY","inverseMassTotal","bodyAVelocityX","bodyAVelocityY","bodyAAngularVelocity","bodyBVelocityX","bodyBVelocityY","bodyBAngularVelocity","offsetAX","offsetAY","offsetBX","offsetBY","velocityPointAX","velocityPointAY","velocityPointBX","velocityPointBY","relativeVelocityX","relativeVelocityY","tangentVelocity","normalOverlap","normalForce","frictionLimit","oAcN","oBcN","contactNormalImpulse","contactTangentImpulse","pairUpdate","pairCreate","pairSetActive","pairsTable","pairsList","pairsListLength","pairsListIndex","collisionsLength","collisionStartIndex","collisionEndIndex","collisionActiveIndex","Matter","Composites","Grid","MouseConstraint","Query","Render","Runner","SAT","Svg","World","run","before","after","stack","columns","rows","columnGap","rowGap","lastBody","currentX","currentY","row","maxHeight","column","bodyHeight","bodyWidth","xOffsetA","yOffsetA","xOffsetB","yOffsetB","bodyAHeight","bodyAWidth","bodyBHeight","bodyBWidth","mesh","crossBrace","col","bodyC","pyramid","stackX","stackY","actualRows","lastBodyWidth","start","newtonsCradle","size","car","wheelSize","wheelBase","wheelAOffset","wheelBOffset","wheelYOffset","wheelA","wheelB","axelA","axelB","softBody","particleRadius","particleOptions","constraintOptions","bucketWidth","bucketHeight","forceUpdate","bucket","bucketId","gridChanged","newRegion","_getRegion","region","union","_regionUnion","startCol","endCol","startRow","endRow","_getBucketId","isInsideNewRegion","isInsideOldRegion","_bucketRemoveBody","_createBucket","_bucketAddBody","_createActivePairsList","regionA","regionB","_createRegion","gridPairs","pairId","bucketLength","pairKeys","pairKeysLength","canvas","mouseConstraint","_triggerEvents","mouseEvents","ray","startPoint","endPoint","rayWidth","rayAngle","rayLength","rayX","rayY","outside","_requestAnimationFrame","_cancelAnimationFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","msRequestAnimationFrame","setTimeout","cancelAnimationFrame","mozCancelAnimationFrame","webkitCancelAnimationFrame","msCancelAnimationFrame","_goodFps","_goodDelta","frameRequestId","historySize","deltaHistory","lastTime","lastTimestamp","timestampElapsed","timestampElapsedHistory","engineDeltaHistory","engineElapsedHistory","engineUpdatesHistory","elapsedHistory","background","wireframeBackground","wireframeStrokeStyle","hasBounds","enabled","wireframes","showSleeping","showDebug","showStats","showPerformance","showBounds","showVelocity","showCollisions","showSeparations","showAxes","showPositions","showAngleIndicator","showIds","showVertexNumbers","showConvexHulls","showInternalEdges","showMousePosition","_createCanvas","context","getContext","textures","controller","showBroadphase","setPixelRatio","appendChild","loop","time","_updateTiming","setTransform","stats","stop","_getPixelRatio","setAttribute","style","setSize","lookAt","padding","center","viewHeight","viewWidth","outerRatio","innerRatio","startViewTransform","boundsWidth","boundsHeight","boundsScaleX","boundsScaleY","endViewTransform","currentBackground","_applyBackground","globalCompositeOperation","fillRect","bodyConvexHulls","bodyWireframes","bodyBounds","bodyAxes","bodyPositions","bodyIds","separations","vertexNumbers","mousePosition","sections","font","textBaseline","textAlign","section","fillText","lastEngineUpdatesPerFrame","lastEngineDelta","deltaMean","_mean","elapsedMean","engineDeltaMean","engineUpdatesMean","engineElapsedMean","timestampElapsedMean","rateMean","neededUpdatesPerFrame","round","fps","graphHeight","gap","count","indicator","plotY","beginPath","moveTo","lineTo","stroke","arc","closePath","coils","fill","globalAlpha","texture","_getTexture","drawImage","rect","normalPosX","normalPosY","inspector","selected","item","data","setLineDash","selectStart","selectBounds","unshift","createElement","oncontextmenu","onselectstart","devicePixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","imagePath","image","Image","src","cssBackground","backgroundSize","_maxFrameDelta","_frameDeltaFallback","_timeBufferMargin","_elapsedNextEstimate","_smoothingLowerBound","_smoothingUpperBound","frameDelta","frameDeltaSmoothing","frameDeltaSnapping","frameDeltaHistory","frameDeltaHistorySize","timeBuffer","timeLastTick","maxUpdates","maxFrameTime","lastUpdatesDeferred","runner","onFrame","_onNextFrame","tick","tickStartTime","engineDelta","updateCount","deltaHistorySorted","deltaHistoryWindow","frameDeltaSmoothed","updateStartTime","elapsedTimeTotal","elapsedTimeUpdates","elapsedNextEstimate","isFixed","deltaMin","deltaMax","_cancelNextFrame","Error","valuesLength","pathToVertices","sampleLength","il","segment","segments","segmentsQueue","lastSegment","lastPoint","segmentIndex","lx","ly","addPoint","px","py","pathSegType","isRelative","addSegmentPoint","segType","pathSegTypeAsLetter","toUpperCase","_svgPathToAbsolute","getTotalLength","pathSegList","numberOfItems","getItem","getPathSegAtLength","getPointAtLength","x0","y0","y1","y2","segs","len","seg","replaceItem","createSVGPathSegMovetoAbs","createSVGPathSegLinetoAbs","createSVGPathSegLinetoHorizontalAbs","createSVGPathSegLinetoVerticalAbs","createSVGPathSegCurvetoCubicAbs","createSVGPathSegCurvetoCubicSmoothAbs","createSVGPathSegCurvetoQuadraticAbs","createSVGPathSegCurvetoQuadraticSmoothAbs","createSVGPathSegArcAbs","r1","r2","largeArcFlag","sweepFlag"],"sourceRoot":""}